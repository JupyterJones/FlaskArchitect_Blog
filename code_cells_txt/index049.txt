-
from matplotlib import pyplot as plt
import numpy as np
import mpld3
from mpld3 import plugins
%matplotlib inline

LA = LAT
LO = LONG

print(len(LA))
print(len(LO))

LT = np.array(LAT,dtype=np.float)
LG = np.array(LONG,dtype=np.float)
print (max(LG))
print (min(LG))
print (min(LT))
print (max(LT))

A = (min(LG))-1
B = (max(LG))+1
C = (min(LT))-1
D = (max(LT))+1


fig = plt.figure(num=None, figsize=(12,12), dpi=80, facecolor='salmon')
#fig = plt.figure()
ax = fig.gca()

#ax.set_facecolor('xkcd:green')
ax.set_facecolor(('#8eda8b'))

S=5
Size=[]
for x in cases:
    S=2+(float(x)*2)
    Size.append(int(S))
    #print(int(S))
s = np.array(Size)

#plt.axis([-130,-65,20,55])
plt.axis([A,B,C,D])

ax.grid(color='lightgray', linestyle='-', linewidth=1)
plt.scatter(LG, LT, s=s, color="black")
plt.grid(True)

plt.xlabel('First data sample was: 09/03/2020 04:30:00')
plt.title('Using Latitude and Longitude from https://github.com/CSSEGISandData/COVID-19')
plt.ylabel('Number of Cases')
plt.show()


from matplotlib import pyplot as plt
from matplotlib.pyplot import text
import numpy as np

LASTFILE="COVID-19/csse_covid_19_data/csse_covid_19_daily_reports/04-13-2020.csv"


DataIn = open(LASTFILE).readlines()
cnt=-1
LAT =[]
LON =[]
cases = []
#STate = input("What State? ")
STate = 'Florida'
for lines in DataIn:
    lines = lines.replace("\n","")

    line = lines.split(",")
    if STate in line[2] and len(line[5])>8 and len(line[6])>4:
        cnt=cnt+1
        if cnt<5:print(line[1],line[2],line[3],line[4],line[5],line[6],line[7],line[8])
        LAT.append(line[5]) 
        LON.append(line[6])
        cases.append(int(line[7]))
LA = LAT
LO = LON

print("len(LA)",len(LA))
print("len(LO)",len(LO))
LT = np.array(LAT,dtype=np.float)
LG = np.array(LON,dtype=np.float)
print ("max(LT)",max(LT))
print ("min(LT)",min(LT))
print ('max(LG)',max(LG))
print ('min(LG)',min(LG))
print('len(LT)',len(LT))
print('len(LG)',len(LG))

fig = plt.figure(num=None, figsize=(12,12), dpi=80, facecolor='salmon')
#fig = plt.figure()
ax = fig.gca()

#ax.set_facecolor('xkcd:green')
ax.set_facecolor(('#c2efc1'))

S=1
Size=[]
for x in cases:
    S=1+(float(x)*.1)
    Size.append(int(S))
    #print(int(S))
s = np.array(Size)

print (min(LG))
print (max(LG))
print (min(LT))
print (max(LT))


A= (min(LG))-1
B = (max(LG))+1
C = (min(LT))-1
D = (max(LT))+1

ax = fig.gca()
T= 'Miami-Dade'
text(0.68, 0.29, T, horizontalalignment='center', verticalalignment='center', transform=ax.transAxes)

#if float(line[6])<=-87 and float(line[6])>=-89:
#                if float(line[5])>42 and float(line[5])<44:
#font="/home/jack/fonts/DancingScript-Bold.ttf"
#-90 and float(line[6])>-92 and float(line[5])<40 and float(line[5])<42
#plt.axis([-100,-70,30,45])
plt.axis([A,B,C,D])
#plt.axis([-80,-90,40,45])
ax.grid(color='lightgray', linestyle='-', linewidth=1)
plt.scatter(LG, LT, s=s, color="black")
plt.grid(True)
#plt.text(2, 0.65, r'$\cos(2 \pi t) \exp(-t)$', fontdict=font)
#text(20, 40, r'$\cos(2 \pi t) \exp(-t)$')
plt.xlabel('First data sample was: 09/03/2020 04:30:00')
plt.title('Using Latitude and Longitude from https://github.com/CSSEGISandData/COVID-19')
plt.ylabel('Number of Cases')
plt.show()

LASTFILE="COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv"
DataIn = open(LASTFILE).readlines()
cases=[]
for line in DataIn:
    if len(line)>10 and 'US' in line and "Recovered" not in line and "Unassigned" not in line:
        line=line.replace("\n","")
        line = line.lstrip(",")
        line = line.split(",")
        End=len(line)-1
        if len(line)>5 and "Florida" in line[6] and "Out of FL" not in line:
            cases.append(line[End])        

from matplotlib.pyplot import text
from matplotlib import pyplot as plt
import numpy as np
import mpld3
from mpld3 import plugins
import time
%matplotlib inline
LASTFILE="COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv"
DataIn = open(LASTFILE).readlines()
cases=[]
for line in DataIn:
    if len(line)>10 and 'US' in line and "Recovered" not in line and "Unassigned" not in line:
        line=line.replace("\n","")
        line = line.lstrip(",")
        line = line.split(",")
        End=len(line)-1
        if len(line)>5 and "Florida" in line[6] and "Out of FL" not in line:
            cases.append(line[End])        

LASTFILE="COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv"
DataIn = open(LASTFILE).readlines()
LAT=[]
LONG=[]
CITY=[]
deaths=[]
TEXT=[]
cnt = -1
Total=0
SEARCH = "California"
for line in DataIn:
    if len(line)>10 and 'US' in line and "Recovered" not in line and "Unassigned" not in line:
        cnt=cnt+1
        line=line.replace("\n","")
        line = line.lstrip(",")
        line = line.split(",")
        End=len(line)-1
        if len(line)>5 and SEARCH in line[6] and "0.0" not in line:
            if cnt>=1:print(line[5],line[6],line[8],line[9], line[End] )
            Total=Total+int(line[End])
            CITY.append(line[5])
            LAT.append(line[8])
            LONG.append(line[9])
            deaths.append(line[End])        
            text = str(line[2]+' '+line[1]+' '+line[3]+' '+line[4]+' '+line[5]+' '+line[6]+' '+line[7]+' '+line[8]+' '+line[9]+' '+line[10])
            TEXT.append(text)
            
print("Number of Cities: ",len(CITY)) 
print("Total Deaths: ",Total)

LA = LAT
LO = LONG

print(len(LA))
print(len(LO))

DA = np.array(deaths,dtype=np.int)
LT = np.array(LAT,dtype=np.float)
LG = np.array(LONG,dtype=np.float)
print (max(LG))
print (min(LG))
print (min(LT))
print (max(LT))

A = (min(LG))-1
B = (max(LG))+1
C = (min(LT))-1
D = (max(LT))+1

fig = plt.figure(num=None, figsize=(12,12), dpi=80, facecolor='salmon')
#fig = plt.figure()
ax = fig.gca()

#ax.set_facecolor('xkcd:green')
ax.set_facecolor(('#8eda8b'))

Sd=1
Sized=[]
for xd in deaths:
    Sd=2+(float(xd)*1)
    Sized.append(int(Sd))
    #print(int(S))
sd = np.array(Sized)

S=1
Size=[]
for x in cases:
    S=2+(float(x)*1)
    Size.append(int(S))
    #print(int(S))
s = np.array(Size)


plt.text(-119, 41, SEARCH, fontsize=26)
#plt.axis([-130,-65,20,55])
plt.axis([A,B,C,D])

ax.grid(color='lightgray', linestyle='-', linewidth=1)
plt.scatter(LG, LT, s=s, color="black")
plt.scatter(LG, LT, s=sd, color="red")
plt.grid(True)

plt.xlabel('- Longitude -\nFirst Data Record : January 21, 2020', fontsize=18)
plt.title('Using Latitude and Longitude from:\n https://github.com/CSSEGISandData/COVID-19\n Black is Confirmed Cases and the Red are Deaths', fontsize=18)
plt.ylabel('- Latitude -', fontsize=18, color="white")
filename = "images/"+SEARCH+"_"+(time.strftime('%a_%d_%b_%Y_%I_%M_%S_%p_%Z', time.gmtime())+".png")
fig.savefig(filename, facecolor=fig.get_facecolor(), edgecolor='black')
print(filename)
plt.show()

from PIL import Image
IM = Image.open(filename)
print(IM.size)
IM

!ls . -d */

!find /home/ -iname '*.mp4' > mp4.list

MP4S =[]
files = open("mp4.list").readlines()
for file in files:
    if "xvid" not in file:
        file= file.replace("\n","")
        MP4S.append(file)

print(len(MP4S))

!mkdir videoframes

from random import randint
num = randint(0,len(MP4S))

!mkdir archived-images

import cv2
from random import randint
from PIL import Image
import time
import random

def vid2img(filename, count):
    vidcap = cv2.VideoCapture(filename)
    # get total number of frames
    totalFrames = vidcap.get(cv2.CAP_PROP_FRAME_COUNT)
    randomFrameNumber=random.randint(0, totalFrames)
    # set frame position
    vidcap.set(cv2.CAP_PROP_POS_FRAMES,randomFrameNumber)
    success, image = vidcap.read()
    if success:
        print(".",end="|")
        cv2.imwrite("junk/archived-images.png", image)
    IM = Image.open("junk/archived-images.png")
    im = IM.resize((720,480))
    timestr = time.strftime("%Y%m%d-%H%M%S")
    filename = "archived-images/Sunday"+str(count)+"_"+timestr+"_.png"

    im.save(filename)
    nim = Image.open(filename)
    #print(nim.size)
    return nim

filename ="/home/jack/Desktop/dockercommands/complete-videos/2196-archived-art-images.mp4"
for count in range(0,100):
    vid2img(filename, count)
    

%%writefile VIDEOZ.py
def videoz():
    VIDEOS=["/home/jack/Desktop/dockercommands/complete-videos/2760-images-publish-archive.mp4",
    "/home/jack/Desktop/dockercommands/complete-videos/2196-archived-art-images.mp4",
    "/home/jack/Desktop/dockercommands/complete-videos/24sept-output-slow-3per-sec-jpgs.mp4",
    "/home/jack/Desktop/dockercommands/complete-videos/sep24-records-slow-3per-sec-pngs.mp4",
    "/home/jack/Desktop/dockercommands/complete-videos/slow-3per-sec.mp4",
    "/home/jack/Desktop/dockercommands/complete-videos/output_2m-28sec.mp4"]
    return VIDEOS

from VIDEOZ import videoz
MP4 = videoz()[3]
print(MP4)

!ls /home/jack/Desktop/dockercommands/image_resources/archive/archived-images.mp4

%%writefile VID2img.py
import cv2
from random import randint
from PIL import Image
import time
import random
#num = randint(0,len(MP4S))

def vid2img(count,outputpath):
    filename ="/home/jack/Desktop/dockercommands/complete-videos/24sept-output-slow-3per-sec-jpgs.mp4"
    vidcap = cv2.VideoCapture(filename)
    # get total number of frames
    totalFrames = vidcap.get(cv2.CAP_PROP_FRAME_COUNT)
    randomFrameNumber=random.randint(0, totalFrames)
    # set frame position
    vidcap.set(cv2.CAP_PROP_POS_FRAMES,randomFrameNumber)
    success, image = vidcap.read()
    print(image)
    if success:
        print(".",end="|")
        cv2.imwrite("junk/archived-images.png", image)
    IM = Image.open("junk/archived-images.png")
    im = IM.resize((720,480))
    timestr = time.strftime("%Y%m%d-%H%M%S")
    filename = outputpath+"/Sunday"+str(count)+"_"+timestr+"_.png"
    im.save(filename)
    nim = Image.open(filename)
    if count==1:print(filename)
    return nim

count =1
outputpath = "Experiment"
im = vid2img(count,outputpath)
im

from VID2img import *
count =1
outputpath = "Experiment"
im = vid2img(count,outputpath)
im

!ls junk

from VID2img import *
for count in range(0,10):
    outputpath = "junk"
    vid2img(count,outputpath)
    

import cv2
from random import randint
from PIL import Image
import time
import random
#num = randint(0,len(MP4S))
filename ="/home/jack/Desktop/dockercommands/image_resources/archive/archived-images.mp4"
vidcap = cv2.VideoCapture(filename)
# get total number of frames
totalFrames = vidcap.get(cv2.CAP_PROP_FRAME_COUNT)
randomFrameNumber=random.randint(0, totalFrames)
# set frame position
vidcap.set(cv2.CAP_PROP_POS_FRAMES,randomFrameNumber)
success, image = vidcap.read()
if success:
    print("retrieved")
    cv2.imwrite("archived-images/archived-images.png", image)
IM = Image.open("archived-images/archived-images.png")
im = IM.resize((720,480))
timestr = time.strftime("%Y%m%d-%H%M%S")
filename = "archived-images/"+timestr+"_.png"

im.save(filename)
nim = Image.open(filename)
print(nim.size)
nim

import cv2
from random import randint
from PIL import Image
import time
import random
num = randint(0,len(MP4S))
vidcap = cv2.VideoCapture(MP4S[num])
# get total number of frames
totalFrames = vidcap.get(cv2.CAP_PROP_FRAME_COUNT)
randomFrameNumber=random.randint(0, totalFrames)
# set frame position
vidcap.set(cv2.CAP_PROP_POS_FRAMES,randomFrameNumber)
success, image = vidcap.read()
if success:
    cv2.imwrite("videoframes/random_frame.jpg", image)
IM = Image.open("videoframes/random_frame.jpg")
im = IM.resize((720,480))
timestr = time.strftime("%Y%m%d-%H%M%S")
filename = "videoframes/"+timestr+"_.jpg"

im.save(filename)
nim = Image.open(filename)
print(nim.size)
nim

import cv2
from random import randint
from PIL import Image
import time
from time import sleep
for i in range(200):
    try:
        num = randint(0,len(MP4S))
        vidcap = cv2.VideoCapture(MP4S[num])
        # get total number of frames
        totalFrames = vidcap.get(cv2.CAP_PROP_FRAME_COUNT)
        randomFrameNumber=random.randint(0, totalFrames)
        # set frame position
        vidcap.set(cv2.CAP_PROP_POS_FRAMES,randomFrameNumber)
        success, image = vidcap.read()
        if success:
            cv2.imwrite("videoframes/random_frame.jpg", image)
        IM = Image.open("videoframes/random_frame.jpg")
        im = IM.resize((720,480))
        timestr = time.strftime("%Y%m%d-%H%M%S")
        filename = "videoframes/"+timestr+"_.jpg"
        im.save(filename)
        nim = Image.open(filename)
        print("-",end=".")
    except:
        pass

import glob
import os.path
FILES = []
dir = '.'
files = glob.glob(os.path.join(dir, '*.ipynb'))
for file in files:
    print (file)
    FILES.append(file)

def insert(data):
    import sqlite3
    conn = sqlite3.connect("new.db")
    conn.text_factory = str
    c = conn.cursor()
    c.execute("CREATE VIRTUAL TABLE IF NOT EXISTS PROJECT using FTS4 (input)")
    c.execute("INSERT into PROJECT values (?)", (data,))
    for row in c.execute("SELECT ROWID,* FROM PROJECT ORDER BY ROWID DESC LIMIT 1"):
        print ("\nPOST VERIFIED:\n",row[0],row[1])
    conn.commit()
    conn.close()
    return
# this works data = "this is a test"
# insert(data)
ALL =[]
# string to search in a directory of files
word = 'mask'
# uncomment below to use an imput term
#word = input("Searchterm: ")

def WORDin(word):
    for filename in FILES:
        with open(filename, 'r') as fp:
            # read all lines in a list
            lines = fp.readlines()
            for line in lines:
                # check if string present on a current line
                if line.find(word) != -1:
                    if len(line)<100:
                        #print('The term '+word+' exists in '+filename+' .\nLineNumber:', lines.index(line),line.replace("\\n",""))
                        data ='The term '+word+' exists in '+filename+' .\nLineNumber:', lines.index(line),line.replace("\\n","")
                        ALL.append(data)
                        #convert the data to a string
                        dataout = str(data).replace("\\n",'')
                        insert(dataout)
word = 'mask'
WORDin(word)
for line in ALL:
    print(line)




import os
os.chdir("/home/jack/Desktop/dockercommands/")
#!ls -d /*

!ls . -d */

!rm mp4.list

!find /home/ -iname '*.mp4' > mp4.list

MP4S =[]
files = open("mp4.list").readlines()
for file in files:
    if "xvid" not in file:
        file= file.replace("\n","")
        MP4S.append(file)

print(len(MP4S))

!mkdir videoframes

from random import randint
num = randint(0,len(MP4S)-1)


!mkdir archived-images

import cv2
from random import randint
from PIL import Image
import time
import random

def vid2img(filename, count):
    vidcap = cv2.VideoCapture(filename)
    # get total number of frames
    totalFrames = vidcap.get(cv2.CAP_PROP_FRAME_COUNT)
    randomFrameNumber=random.randint(0, totalFrames)
    # set frame position
    vidcap.set(cv2.CAP_PROP_POS_FRAMES,randomFrameNumber)
    success, image = vidcap.read()
    if success:
        print(".",end="|")
        cv2.imwrite("junk/archived-images.png", image)
    IM = Image.open("junk/archived-images.png")
    im = IM.resize((720,480))
    timestr = time.strftime("%Y%m%d-%H%M%S")
    filename = "archived-images/Wed"+str(count)+"_"+timestr+"_.png"

    im.save(filename)
    nim = Image.open(filename)
    #print(nim.size)
    return nim

filename ="/home/jack/Desktop/dockercommands/complete-videos/2196-archived-art-images.mp4"
for count in range(0,10):
    from random import randint
    num = randint(0,len(MP4S)-1)
    filename = MP4S[num]
    vid2img(filename, count)
    print (filename)
    

!ls archived-images

%%writefile VIDEOZ.py
def videoz():
    VIDEOS=["/home/jack/Desktop/dockercommands/complete-videos/2760-images-publish-archive.mp4",
    "/home/jack/Desktop/dockercommands/complete-videos/2196-archived-art-images.mp4",
    "/home/jack/Desktop/dockercommands/complete-videos/24sept-output-slow-3per-sec-jpgs.mp4",
    "/home/jack/Desktop/dockercommands/complete-videos/sep24-records-slow-3per-sec-pngs.mp4",
    "/home/jack/Desktop/dockercommands/complete-videos/slow-3per-sec.mp4",
    "/home/jack/Desktop/dockercommands/complete-videos/output_2m-28sec.mp4"]
    return VIDEOS

from VIDEOZ import videoz
MP4 = videoz()[3]
print(MP4)

!ls /home/jack/Desktop/dockercommands/image_resources/archive/archived-images.mp4

%%writefile VID2img.py
import cv2
from random import randint
from PIL import Image
import time
import random
#num = randint(0,len(MP4S))

def vid2img(count,outputpath):
    filename ="/home/jack/Desktop/dockercommands/complete-videos/24sept-output-slow-3per-sec-jpgs.mp4"
    vidcap = cv2.VideoCapture(filename)
    # get total number of frames
    totalFrames = vidcap.get(cv2.CAP_PROP_FRAME_COUNT)
    randomFrameNumber=random.randint(0, totalFrames)
    # set frame position
    vidcap.set(cv2.CAP_PROP_POS_FRAMES,randomFrameNumber)
    success, image = vidcap.read()
    print(image)
    if success:
        print(".",end="|")
        cv2.imwrite("junk/archived-images.png", image)
    IM = Image.open("junk/archived-images.png")
    im = IM.resize((720,480))
    timestr = time.strftime("%Y%m%d-%H%M%S")
    filename = outputpath+"/Sunday"+str(count)+"_"+timestr+"_.png"
    im.save(filename)
    nim = Image.open(filename)
    if count==1:print(filename)
    return nim

count =1
outputpath = "Experiment"
im = vid2img(count,outputpath)
im

from VID2img import *
count =1
outputpath = "Experiment"
im = vid2img(count,outputpath)
im

!ls junk

!ls junk

from VID2img import *
for count in range(0,10):
    outputpath = "junk/"
    vid2img(count,outputpath)
    

!mkdir /home/jack/Desktop/dockercommands/archived-images/

import cv2
from random import randint
from PIL import Image
import time
import random

num = randint(0,len(MP4S)-1)
filename = MP4S[num]
vidcap = cv2.VideoCapture(filename)
# get total number of frames
totalFrames = vidcap.get(cv2.CAP_PROP_FRAME_COUNT)
randomFrameNumber=random.randint(0, totalFrames)
# set frame position
vidcap.set(cv2.CAP_PROP_POS_FRAMES,randomFrameNumber)
success, image = vidcap.read()
if success:
    print("retrieved")
    cv2.imwrite("/home/jack/Desktop/dockercommands/archived-images/archived-images.png", image)
IM = Image.open("/home/jack/Desktop/dockercommands/archived-images/archived-images.png")
im = IM.resize((720,480))
timestr = time.strftime("%Y%m%d-%H%M%S")
filename = "/home/jack/Desktop/dockercommands/archived-images/"+timestr+"_.png"

im.save(filename)
nim = Image.open(filename)
print(nim.size)
nim

import cv2
from random import randint
from PIL import Image
import time
import random
num = randint(0,len(MP4S))
vidcap = cv2.VideoCapture(MP4S[num])
# get total number of frames
totalFrames = vidcap.get(cv2.CAP_PROP_FRAME_COUNT)
randomFrameNumber=random.randint(0, totalFrames)
# set frame position
vidcap.set(cv2.CAP_PROP_POS_FRAMES,randomFrameNumber)
success, image = vidcap.read()
if success:
    cv2.imwrite("videoframes/random_frame.jpg", image)
IM = Image.open("videoframes/random_frame.jpg")
im = IM.resize((720,480))
timestr = time.strftime("%Y%m%d-%H%M%S")
filename = "videoframes/"+timestr+"_.jpg"

im.save(filename)
nim = Image.open(filename)
print(nim.size)
nim

!ls videoframes

import cv2
from random import randint
from PIL import Image
import time
from time import sleep
for i in range(200):
    try:
        num = randint(0,len(MP4S))
        vidcap = cv2.VideoCapture(MP4S[num])
        # get total number of frames
        totalFrames = vidcap.get(cv2.CAP_PROP_FRAME_COUNT)
        randomFrameNumber=random.randint(0, totalFrames)
        # set frame position
        vidcap.set(cv2.CAP_PROP_POS_FRAMES,randomFrameNumber)
        success, image = vidcap.read()
        if success:
            cv2.imwrite("videoframes/random_frame.jpg", image)
        IM = Image.open("videoframes/random_frame.jpg")
        im = IM.resize((720,480))
        timestr = time.strftime("%Y%m%d-%H%M%S")
        filename = "videoframes/"+timestr+"_.jpg"
        im.save(filename)
        nim = Image.open(filename)
        print("-",end=".")
    except:
        pass

!ls new.db

import glob
import os.path
FILES = []
dir = '.'
files = glob.glob(os.path.join(dir, '*.ipynb'))
for file in files:
    print (file)
    FILES.append(file)

def insert(data):
    import sqlite3
    conn = sqlite3.connect("new.db")
    conn.text_factory = str
    c = conn.cursor()
    c.execute("CREATE VIRTUAL TABLE IF NOT EXISTS PROJECT using FTS4 (input)")
    c.execute("INSERT into PROJECT values (?)", (data,))
    for row in c.execute("SELECT ROWID,* FROM PROJECT ORDER BY ROWID DESC LIMIT 1"):
        print ("\nPOST VERIFIED:\n",row[0],row[1])
    conn.commit()
    conn.close()
    return
# this works data = "this is a test"
# insert(data)
ALL =[]
# string to search in a directory of files
word = 'mask'
# uncomment below to use an imput term
#word = input("Searchterm: ")

def WORDin(word):
    for filename in FILES:
        with open(filename, 'r') as fp:
            # read all lines in a list
            lines = fp.readlines()
            for line in lines:
                # check if string present on a current line
                if line.find(word) != -1:
                    if len(line)<100:
                        #print('The term '+word+' exists in '+filename+' .\nLineNumber:', lines.index(line),line.replace("\\n",""))
                        data ='The term '+word+' exists in '+filename+' .\nLineNumber:', lines.index(line),line.replace("\\n","")
                        ALL.append(data)
                        #convert the data to a string
                        dataout = str(data).replace("\\n",'')
                        insert(dataout)
word = 'mask'
WORDin(word)
for line in ALL:
    print(line)




http://www.karinkuhlmann.com/fractals-2-digital-art/fractals-2-digital-art.html

!ls -d */ >>directory.list

CHOOSE =[]
Paths = open("directory.list","r")
for path in Paths:
    path = str(path).replace("\n","")
    CHOOSE.append(path)
    print(path)

from random import randint
CHOOSE =[]
Paths = open("directory.list","r")
for path in Paths:
    path = str(path).replace("\n","")
    CHOOSE.append(path)
def usefile():
    ID = randint(0, len(CHOOSE)-1)
    DIR = CHOOSE[ID]
    return DIR

print(usefile())

#Very Good COMPOSITE ___ _ do not change
from PIL import Image, ImageChops
import time
import random
from random import randint
import os
count = 0

CHOOSE =[]
Paths = open("directory.list","r")
for path in Paths:
    path = str(path).replace("\n","")
    CHOOSE.append(path)
def usefile():
    ID = randint(0, len(CHOOSE)-1)
    DIR = CHOOSE[ID]
    return DIR

while count<400: 
    
    #path = r"image_resources/"
    path = usefile()
    base_image = random.choice([
        x for x in os.listdir(path)
        if os.path.isfile(os.path.join(path, x))
        ])
    filename0=(path+base_image)
    print(filename0)

    path0 = usefile()
    #path0 = r"testmasks/"
    base_image0 = random.choice([
        x0 for x0 in os.listdir(path0)
        if os.path.isfile(os.path.join(path0, x0))
        ])
    filename00=(path0+base_image0)
    print(filename00)

    path1 = r"binary_images/"
    base_image1 = random.choice([
        x1 for x1 in os.listdir(path1)
        if os.path.isfile(os.path.join(path1, x1))
        ])
    mask0=(path1+base_image1)

    #im = Image.open('%s' % os.path.join(os.getcwd(), s + '.png')).convert("RGB")
      
    
    im1a = Image.open(filename0).convert("RGB")
    im1a.save("tmp/01aa.jpg")
    im1b = Image.open("tmp/01aa.jpg")
    im1c = im1b.resize((720,480), Image.NEAREST)
    im1c.save("tmp/01ab.jpg")
    jpg_im1 = Image.open("tmp/01ab.jpg") 

    im02a = Image.open(filename00).convert("RGB")
    im02 = im02a.resize((720,480), Image.NEAREST)
    im02.save("tmp/01aaa.jpg")
    im02b = Image.open("tmp/01aaa.jpg").convert("RGB")
    im02b.save("tmp/01aab.jpg")
    jpg_im2 = Image.open("tmp/01aab.jpg") 
    
    im03 = Image.open(mask0)
    im03.save("tmp/01aaaa.jpg")
    jpg_im3 = Image.open("tmp/01aaaa.jpg")
    mask = jpg_im3.resize((720,480), Image.NEAREST)
    time.sleep(3)
    result1 = ImageChops.blend(jpg_im1, jpg_im2, .5)
    
    #result1 = ImageChops.composite(jpg_im1, jpg_im2, mask)
    filename = time.strftime("output/blended_"+str(count)+"%Y%m%d%H%M%S.jpg")
    result1.save(filename)
    count=count+1
   

#Very Good COMPOSITE ___ _ do not change
from PIL import Image, ImageChops
import time
import random
import os
count = 0
while count<35: 
    
    path = r"/home/jack/Desktop/deep-dream-generator/notebooks/context-free/output/"
    base_image = random.choice([
        x for x in os.listdir(path)
        if os.path.isfile(os.path.join(path, x))
        ])
    filename0=(path+base_image)

    path0 = r"/home/jack/Desktop/deep-dream-generator/notebooks/context-free/output/"
    #path0 = r"testmasks/"
    base_image0 = random.choice([
        x0 for x0 in os.listdir(path0)
        if os.path.isfile(os.path.join(path0, x0))
        ])
    filename00=(path0+base_image0)

    path1 = r"newmask/"
    base_image1 = random.choice([
        x1 for x1 in os.listdir(path1)
        if os.path.isfile(os.path.join(path1, x1))
        ])
    mask0=(path1+base_image1)

    #im = Image.open('%s' % os.path.join(os.getcwd(), s + '.png')).convert("RGB")
      
    
    im1a = Image.open(filename0).convert("RGB")
    im1a.save("tmp/01aa.jpg")
    im1 = Image.open("tmp/01aa.jpg").convert("RGB")
    imi = im1.resize((640,640), Image.NEAREST)
    im1.save("tmp/01aa2.jpg")
    jpg_im1 = Image.open("tmp/01aa2.jpg") 

    im02a = Image.open(filename00).convert("RGB")
    im02a.save("tmp/01aaa.jpg")
    im02 = Image.open("tmp/01aaa.jpg").convert("RGB")
    im02 = im02.resize((640,640), Image.NEAREST)
    im02.save("tmp/01aaa2.jpg")
    jpg_im2 = Image.open("tmp/01aaa2.jpg") 

    im03 = Image.open(mask0)
    im03.save("tmp/01aaaa.jpg")
    jpg_im3 = Image.open("tmp/01aaaa.jpg")
    mask = jpg_im3.resize((640,640), Image.NEAREST)
    time.sleep(3)
    result1 = ImageChops.blend(jpg_im1, jpg_im2, .5)
    
    #result1 = ImageChops.composite(jpg_im1, jpg_im2, mask)
    filename = time.strftime("/home/jack/Desktop/deep-dream-generator/notebooks/context-free/output/blended%Y%m%d%H%M%S.jpg")
    result1.save(filename)
    count=count+1
   

import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
import random
from random import randint
from PIL import Image
from PIL import ImageChops


square_size = 10
offset_factor = 20
darken_factor = 0.1
path = r"crawler4/"
base_image = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
    ])
filename0=(path+base_image)

image = Image.open(filename0)
size = image.size

# Create image np array
im = np.array(image, dtype=np.uint8)

# Create figure and axes
fig,ax = plt.subplots(1)

# Display the image
ax.imshow(im)

# Add random offset to tuple based on offset_factor
def add_offet(t):
    t[0] = random.randint(t[0], (t[0] + offset_factor))
    t[1] = random.randint(t[1], (t[1] + offset_factor))

    return t


# Create a Rectangle patch
for w in xrange(0, size[0], square_size):
    for h in xrange(0, size[1], square_size):
        #print str(w) + ':' + str(h)
        square_size = randint(10,30)
        offset_factor = randint(10,30)
    
        # Get the average color of the section
        rect = im[h:h+square_size, w:w+square_size]
        mean = rect.mean(axis=(0,1))

        # Convert to hex value
        face_color = '#%02x%02x%02x' % (int(mean[0]), int(mean[1]), int(mean[2]))
        edge_color = '#%02x%02x%02x' % (int(mean[0] - (mean[0] * darken_factor)), int(mean[1]  - (mean[1] * darken_factor)), int(mean[2] - (mean[2] * darken_factor)))

        # Dont draw outline with the dominant color
        z_order = 2
        if '#e' in face_color or '#f' in face_color:
            line_width = 0.0
        else:
            line_width = 0.1
            z_order = 3

        points = [add_offet([w, h]), add_offet([w + square_size, h]), add_offet([w, h + square_size])]
        triangle1 = patches.Polygon(points, edgecolor=edge_color, linewidth=line_width, facecolor=face_color, zorder=z_order)

        # Second triangle
        points2 = [add_offet([w, h + square_size]), add_offet([w + square_size, h + square_size]), add_offet([w + square_size, h])]
        triangle2 = patches.Polygon(points2, edgecolor=edge_color, linewidth=line_width, facecolor=face_color, zorder=z_order)

        # Square in background
        rec = patches.Rectangle((w,h),square_size,square_size,linewidth=0.0, edgecolor=edge_color, facecolor=face_color, zorder=1)

        # Add the patch to the Axes
        ax.add_patch(triangle1)
        ax.add_patch(triangle2)
        ax.add_patch(rec)

plt.axis('off')
plt.savefig("images/Sranger-Tri-001a.jpg", bbox_inches='tight', dpi=200)
img = Image.open("images/Sranger-Tri-001a.jpg")
nonwhite_positions = [(x,y) for x in range(img.size[0]) for y in range(img.size[1]) if img.getdata()[x+y*img.size[0]] != (255,255,255)]
rect = (min([x for x,y in nonwhite_positions]), min([y for x,y in nonwhite_positions]), max([x for x,y in nonwhite_positions]), max([y for x,y in nonwhite_positions]))
img.crop(rect).save('images/Sranger-Tri-001-crop2a.jpg')
#Create a second image
square_size = 10
offset_factor = 20
darken_factor = 0.1
#image = Image.open("images/Sranger002.jpg")

size = image.size

# Create image np array
im = np.array(image, dtype=np.uint8)

# Create figure and axes
fig,ax = plt.subplots(1)

# Display the image
ax.imshow(im)

# Add random offset to tuple based on offset_factor
def add_offet(t):
    t[0] = random.randint(t[0], (t[0] + offset_factor))
    t[1] = random.randint(t[1], (t[1] + offset_factor))

    return t


# Create a Rectangle patch
for w in xrange(0, size[0], square_size):
    for h in xrange(0, size[1], square_size):
        #print str(w) + ':' + str(h)
        square_size = randint(15,30)
        offset_factor = randint(15,30)
    
        # Get the average color of the section
        rect = im[h:h+square_size, w:w+square_size]
        mean = rect.mean(axis=(0,1))

        # Convert to hex value
        face_color = '#%02x%02x%02x' % (int(mean[0]), int(mean[1]), int(mean[2]))
        edge_color = '#%02x%02x%02x' % (int(mean[0] - (mean[0] * darken_factor)), int(mean[1]  - (mean[1] * darken_factor)), int(mean[2] - (mean[2] * darken_factor)))

        # Dont draw outline with the dominant color
        z_order = 2
        if '#e' in face_color or '#f' in face_color:
            line_width = 0.0
        else:
            #line_width = 0.1
            z_order = 3

        points = [add_offet([w, h]), add_offet([w + square_size, h]), add_offet([w, h + square_size])]
        triangle1 = patches.Polygon(points, edgecolor=edge_color, linewidth=line_width, facecolor=face_color, zorder=z_order)

        # Second triangle
        points2 = [add_offet([w, h + square_size]), add_offet([w + square_size, h + square_size]), add_offet([w + square_size, h])]
        triangle2 = patches.Polygon(points2, edgecolor=edge_color, linewidth=line_width, facecolor=face_color, zorder=z_order)

        # Square in background
        rec = patches.Rectangle((w,h),square_size,square_size,linewidth=0.0, edgecolor=edge_color, facecolor=face_color, zorder=1)

        # Add the patch to the Axes
        ax.add_patch(triangle1)
        ax.add_patch(triangle2)
        ax.add_patch(rec)

plt.axis('off')
plt.savefig("images/Sranger-Tri-001a.jpg", bbox_inches='tight', dpi=200)
img = Image.open("images/Sranger-Tri-001a.jpg")
nonwhite_positions = [(x,y) for x in range(img.size[0]) for y in range(img.size[1]) if img.getdata()[x+y*img.size[0]] != (255,255,255)]
rect = (min([x for x,y in nonwhite_positions]), min([y for x,y in nonwhite_positions]), max([x for x,y in nonwhite_positions]), max([y for x,y in nonwhite_positions]))
img.crop(rect).save('images/Sranger-Tri-001-crop2b.jpg')


img0 = Image.open("images/Sranger-Tri-001-crop2a.jpg")
img1 = Image.open("images/Sranger-Tri-001-crop2b.jpg")
blen = ImageChops.blend(img0, img1, .5)
blen.save('images/Sranger-Tri-001-crop2b.jpg')
blen

#Very Good COMPOSITE ___ _ do not change
from PIL import Image, ImageChops
import time
import random
import os
count = 0
while count<550: 
    #path = r"build/"
    path = r"crawler/"
    base_image = random.choice([
        x for x in os.listdir(path)
        if os.path.isfile(os.path.join(path, x))
        ])
    filename0=(path+base_image)

    path0 = r"crawler1/"
    #path0 = r"testmasks/"
    base_image0 = random.choice([
        x0 for x0 in os.listdir(path0)
        if os.path.isfile(os.path.join(path0, x0))
        ])
    filename00=(path0+base_image0)

    path1 = r"newmask/"
    base_image1 = random.choice([
        x1 for x1 in os.listdir(path1)
        if os.path.isfile(os.path.join(path1, x1))
        ])
    mask0=(path1+base_image1)

    im1 = Image.open(filename0).convert('RGB')
    im1 = im1.resize((640,640), Image.NEAREST)
    im1.save("tmp/01aa.jpg")
    jpg_im1 = Image.open("tmp/01aa.jpg") 

    im02 = Image.open(filename00).convert('RGB')
    im2 = im02.resize((640,640), Image.NEAREST)
    im2.save("tmp/01aaa.jpg")
    jpg_im2 = Image.open("tmp/01aaa.jpg") 

    im03 = Image.open(mask0)
    im03.save("tmp/01aaaa.jpg")
    jpg_im3 = Image.open("tmp/01aaaa.jpg") 
    im03 = jpg_im3.resize((640,640), Image.NEAREST)
    time.sleep(3)
    result1 = ImageChops.blend(jpg_im1, jpg_im2, .5)
    
    #result1 = ImageChops.composite(jpg_im1, jpg_im2, im03)
    filename = time.strftime("aug25/%Y%m%d%H%M%S.jpg")
    result1.save(filename)
    count=count+1
   

!mkdir aug25

result1.save(filename)

jpg_im1

jpg_im2

im03

from PIL import Image, ImageChops
jpg_im3 = Image.open("junk/03.jpg") 
jpg_im3

#Very Good COMPOSITE ___ _ do not change
from PIL import Image, ImageChops
import time
import random
import os
path = r"build/"
base_image = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
    ])
filename0=(path+base_image)

#path0 = r"blend/"
path0 = r"testmasks/"
base_image0 = random.choice([
    x0 for x0 in os.listdir(path0)
    if os.path.isfile(os.path.join(path0, x0))
    ])
filename00=(path0+base_image0)

path1 = r"testmasks/"
base_image1 = random.choice([
    x1 for x1 in os.listdir(path1)
    if os.path.isfile(os.path.join(path1, x1))
    ])
mask0=(path1+base_image1)

im1 = Image.open(filename0)
im1 = im1.resize((640,640), Image.NEAREST)
im1.save("junk/01.jpg")
jpg_im1 = Image.open("junk/01.jpg") 

im02 = Image.open(filename00)
im2 = im02.resize((640,640), Image.NEAREST)
im1.save("junk/02.jpg")
jpg_im2 = Image.open("junk/02.jpg") 

im03 = Image.open(mask0)
im03.save("junk/03.jpg")
jpg_im3 = Image.open("junk/03.jpg") 
im03 = jpg_im3.resize((640,640), Image.NEAREST)
  
result1 = ImageChops.composite(jpg_im1, jpg_im2, im03)
filename = time.strftime("junk/%Y%m%d%H%M%S.jpg")
#result1.save(filename)
result1

!ls ../deep-dream-generator/notebooks/STUFF/experiment

#Very Good COMPOSITE ___ _ do not change
from PIL import Image, ImageChops
import time
import random
import os

count=count+1
while count<300:
    path = r"/home/jack/Desktop/deep-dream-generator/notebooks/new/1/"
    #path = r"build/"
    base_image = random.choice([
        x for x in os.listdir(path)
        if os.path.isfile(os.path.join(path, x))
        ])
    filename0=(path+base_image)

    #path0 = r"blend/"
    path0 = r"output/"
    base_image0 = random.choice([
        x0 for x0 in os.listdir(path0)
        if os.path.isfile(os.path.join(path0, x0))
        ])
    filename00=(path0+base_image0)

    path1 = r"newmask/"
    base_image1 = random.choice([
        x1 for x1 in os.listdir(path1)
        if os.path.isfile(os.path.join(path1, x1))
        ])
    mask0=(path1+base_image1)

    im1 = Image.open(filename0)
    im1 = im1.resize((640,640), Image.NEAREST)
    im1.save("junk/01.jpg")
    jpg_im1 = Image.open("junk/01.jpg") 

    im02 = Image.open(filename00)
    im2 = im02.resize((640,640), Image.NEAREST)
    im1.save("junk/02.jpg")
    jpg_im2 = Image.open("junk/02.jpg") 

    im03 = Image.open(mask0)
    im03.save("junk/03.jpg")
    jpg_im3 = Image.open("junk/03.jpg") 
    im03 = jpg_im3.resize((640,640), Image.NEAREST)
    time.sleep(3)
    result1 = ImageChops.blend(jpg_im1, jpg_im2, .03)
    filename = time.strftime("greedy/%Y%m%d%H%M%S.jpg")
    #result1.save(filename)
    result1
    count=count+1

#Very Good COMPOSITE ___ _ do not change
from PIL import Image, ImageChops
import time
import random
import os
count=0
while count <400:
    path = r"crawler4/"
    #path = r"build/"
    base_image = random.choice([
        x for x in os.listdir(path)
        if os.path.isfile(os.path.join(path, x))
        ])
    filename0=(path+base_image)
    random.seed(5)
    time.sleep(5)
    #path0 = r"blend/"
    path0 = r"crawler4/"
    base_image0 = random.choice([
        x0 for x0 in os.listdir(path0)
        if os.path.isfile(os.path.join(path0, x0))
        ])
    filename00=(path0+base_image0)

    path1 = r"newmask/"
    base_image1 = random.choice([
        x1 for x1 in os.listdir(path1)
        if os.path.isfile(os.path.join(path1, x1))
        ])
    mask0=(path1+base_image1)

    im1 = Image.open(filename0)
    im1 = im1.resize((640,640), Image.NEAREST)
    im1.save("junk/01.png")
    jpg_im1 = Image.open("junk/01.png") 

    im02 = Image.open(filename00)
    im2 = im02.resize((640,640), Image.NEAREST)
    im1.save("junk/02.png")
    jpg_im2 = Image.open("junk/02.png") 

    im03 = Image.open(mask0)
    im03.save("junk/03.png")
    jpg_im3 = Image.open("junk/03.png") 
    im03 = jpg_im3.resize((640,640), Image.NEAREST)
  
    result1 = ImageChops.blend(jpg_im1, jpg_im2, .5)
    filename = time.strftime("crawler4/%Y%m%d%H%M%S.png")
    result1.save(filename)
    count=count+1

#Very Good COMPOSITE ___ _ do not change
from PIL import Image, ImageChops
import time
import random
import os
  

#Very Good COMPOSITE ___ _ do not change
from PIL import Image, ImageChops
import time
import random
import os
path = r"/home/jack/Desktop/deep-dream-generator/notebooks/new/1/"
#path = r"build/"
base_image = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
    ])
filename0=(path+base_image)

#path0 = r"blend/"
path0 = r"crawler4/"
base_image0 = random.choice([
    x0 for x0 in os.listdir(path0)
    if os.path.isfile(os.path.join(path0, x0))
    ])
filename00=(path0+base_image0)

path1 = r"newmask/"
base_image1 = random.choice([
    x1 for x1 in os.listdir(path1)
    if os.path.isfile(os.path.join(path1, x1))
    ])
mask0=(path1+base_image1)

im1 = Image.open(filename0)
im1 = im1.resize((640,640), Image.NEAREST)
im1.save("junk/01.png")
jpg_im1 = Image.open("junk/01.png") 

im02 = Image.open(filename00)
im2 = im02.resize((640,640), Image.NEAREST)
im1.save("junk/02.png")
jpg_im2 = Image.open("junk/02.png") 

im03 = Image.open(mask0)
im03.save("junk/03.png")
jpg_im3 = Image.open("junk/03.png") 
im03 = jpg_im3.resize((640,640), Image.NEAREST)
  
result1 = ImageChops.blend(jpg_im1, jpg_im2, .5)
filename = time.strftime("output/%Y%m%d%H%M%S.png")
result1.save(filename)
result1

result1.save(filename)

from PIL import Image, ImageChops
help(ImageChops)

#Very Good COMPOSITE ___ _ do not change
from PIL import Image, ImageChops
import time
import random
import os

path = r"build/"
base_image = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))])
filename=(path+base_image)
im1 = Image.open(filename)
im1 = im1.resize((640,640), Image.NEAREST)
im1.save("tmp/01.jpg")
jpg_im1 = Image.open("tmp/01.jpg") 




path0 = r"blend/"
#path0 = r"basic/"
base_image0 = random.choice([
    x0 for x0 in os.listdir(path0)
    if os.path.isfile(os.path.join(path0, x0))])
filename00=(path0+base_image0)
im02 = Image.open(filename00)
im2 = im02.resize((640,640), Image.NEAREST)
im1.save("tmp/02.jpg")
jpg_im2 = Image.open("tmp/02.jpg")


pathm = r"mask/"
#path0 = r"basic/"
mask01 = random.choice([
    x0 for x0 in os.listdir(pathm)
    if os.path.isfile(os.path.join(pathm, x0))])
filenameM=(pathm+mask01)
imM = Image.open(filenameM)
imMm = imM.resize((640,640), Image.NEAREST)
imMm.save("tmp/03.png")
jpg_M = Image.open("tmp/03.png") 



pathm = r"experiment/"
#path0 = r"basic/"
base_image01 = random.choice([
    x0 for x0 in os.listdir(pathm)
    if os.path.isfile(os.path.join(pathm, x0))])
filename001=(pathm+base_image01)
im03 = Image.open(filename001)
im3 = im03.resize((640,640), Image.NEAREST)
im3.save("tmp/03.jpg")
jpg_im3 = Image.open("tmp/03.jpg") 




result1 = ImageChops.lighter(jpg_im1, jpg_im2)  
result2 = ImageChops.blend(jpg_im1, result1, 0.5)
result4 = ImageChops.composite(jpg_im1, result2, jpg_M)
result3 = ImageChops.blend(jpg_im2, result2, 0.5)
#filename = time.strftime("darkimages/%Y%m%d%H%M%S.jpg")
#result1.save(filename)
result4

#Very Good COMPOSITE ___ _ do not change
from PIL import Image, ImageChops
import time
import random
import os

path = r"build/"
base_image = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))])
filename=(path+base_image)
im1 = Image.open(filename)
im1 = im1.resize((640,640), Image.NEAREST)
im1.save("tmp/01.jpg")
jpg_im1 = Image.open("tmp/01.jpg") 




path0 = r"blend/"
#path0 = r"basic/"
base_image0 = random.choice([
    x0 for x0 in os.listdir(path0)
    if os.path.isfile(os.path.join(path0, x0))])
filename00=(path0+base_image0)
im02 = Image.open(filename00)
im2 = im02.resize((640,640), Image.NEAREST)
im1.save("tmp/02.jpg")
jpg_im2 = Image.open("tmp/02.jpg")


pathm = r"testmasks/"
#path0 = r"basic/"
mask01 = random.choice([
    x0 for x0 in os.listdir(pathm)
    if os.path.isfile(os.path.join(pathm, x0))])
filenameM=(pathm+mask01)
imM = Image.open(filenameM)
imMm = imM.resize((640,640), Image.NEAREST)
imMm.save("tmp/03.png")
jpg_M = Image.open("tmp/03.png") 



pathm = r"experiment/"
#path0 = r"basic/"
base_image01 = random.choice([
    x0 for x0 in os.listdir(path01)
    if os.path.isfile(os.path.join(path01, x0))])
filename001=(path01+base_image01)
im03 = Image.open(filename001)
im3 = im03.resize((640,640), Image.NEAREST)
im3.save("tmp/03.jpg")
jpg_im3 = Image.open("tmp/03.jpg") 




result1 = ImageChops.lighter(jpg_im1, jpg_im2)  
result2 = ImageChops.blend(jpg_im1, result1, 0.5)
result4 = ImageChops.composite(jpg_im1, result2, jpg_im3)
result3 = ImageChops.blend(jpg_im2, result2, 0.5)
result5 = ImageChops.screen(result2, result3)
result6 = ImageChops.darker(result5, result5)
#filename = time.strftime("darkimages/%Y%m%d%H%M%S.jpg")
#result1.save(filename)
result6

filename = time.strftime("tmp/%Y%m%d%H%M%S.jpg")
result5.save(filename)

inv=ImageChops.invert(result5)
inv

xoffset = 5
newim= ImageChops.offset(inv, xoffset, yoffset=None)
newim

resultXX = ImageChops.blend(newim, result5, 0.5)

filename = time.strftime("tmp/%Y%m%d%H%M%S.jpg")
resultXX.save(filename)
resultXX

filename = time.strftime("tmp/%Y%m%d%H%M%S.jpg")
resultXX.save(filename)

from PIL import Image, ImageChops
import time
import random
import os
path01 = r"experiment/"
#path0 = r"basic/"
base_image01 = random.choice([
    x0 for x0 in os.listdir(path01)
    if os.path.isfile(os.path.join(path01, x0))])
print base_image01

from PIL import Image, ImageChops
import time
import random
import os
path01 = r"experiment/"
#path0 = r"basic/"
base_image01 = random.choice([
    x0 for x0 in os.listdir(path01)
    if os.path.isfile(os.path.join(path01, x0))])
filename001=(path01+base_image01)
im03 = Image.open(filename001)
im3 = im03.resize((640,640), Image.NEAREST)
im3.save("tmp/03.jpg")
jpg_im3 = Image.open("tmp/03.jpg") 
#filename = time.strftime("tmp/%Y%m%d%H%M%S.jpg")
#result5.save(filename)
inv=ImageChops.invert(jpg_im3)

xoffset = 5
newim= ImageChops.offset(inv, xoffset, yoffset=None)
newim

from PIL import Image, ImageChops
import time
import random
import os
path01 = r"experiment/"
#path0 = r"basic/"
base_image01 = random.choice([
    x0 for x0 in os.listdir(path01)
    if os.path.isfile(os.path.join(path01, x0))])
filename001=(path01+base_image01)

im03 = Image.open(filename001)
im03 = im03.convert('L') 



im3 = im03.resize((640,640), Image.NEAREST)
im3.save("tmp/03.jpg")
jpg_im3 = Image.open("tmp/03.jpg") 
#filename = time.strftime("tmp/%Y%m%d%H%M%S.jpg")
#result5.save(filename)
inv=ImageChops.invert(jpg_im3)
xoffset = 5
newim= ImageChops.offset(inv, xoffset, yoffset=None)

resultXX = ImageChops.blend(newim, inv, 0.5)
#filename = time.strftime("tmp/03.jp")

#resultXX.save(filename)

#jpg_new = resultXX.resize((640,640), Image.NEAREST)

#jpg_new
resultXX


# Working Fine 
from PIL import Image, ImageChops
import time
import random
import os
pathm = r"experiment/"
#path0 = r"basic/"
base_image01 = random.choice([
    x0 for x0 in os.listdir(path01)
    if os.path.isfile(os.path.join(path01, x0))])
filename001=(path01+base_image01)

im03 = Image.open(filename001)
im03 = im03.convert('L') 
im3 = im03.resize((640,640), Image.NEAREST)
im3.save("tmp/03.jpg")


jpg_im3 = Image.open("tmp/03.jpg") 
jpg_new = jpg_im3.resize((640,640), Image.NEAREST)

inv=ImageChops.invert(jpg_new)
xoffset = 5
newim= ImageChops.offset(inv, xoffset, yoffset=None)
result5 = newim.resize((640,640), Image.NEAREST)


resultXX = ImageChops.blend(newim, im03, 0.5)

resultXX 


# Gray scale Embossing --- Working Fine 
from PIL import Image, ImageChops
import time
import random
import os
import cv2
pathm = r"experiment/"
#path0 = r"basic/"
base_image01 = random.choice([
    x0 for x0 in os.listdir(path01)
    if os.path.isfile(os.path.join(path01, x0))])
filename001=(path01+base_image01)

im03 = Image.open(filename001)
im03 = im03.convert('L') 

im3 = im03.resize((640,640), Image.NEAREST)
im3.save("tmp/03.jpg")
im03 = cv2.imread("tmp/03.jpg")
blur = cv2.blur(im03,(2,2))
cv2.imwrite("tmp/03.jpg", blur)


jpg_im3 = Image.open("tmp/03.jpg") 
jpg_new = jpg_im3.resize((640,640), Image.NEAREST)

inv=ImageChops.invert(jpg_new)
xoffset = 5
newim= ImageChops.offset(inv, xoffset, yoffset=None)
result5 = newim.resize((640,640), Image.NEAREST)


resultXX = ImageChops.blend(newim, jpg_im3, 0.5)

resultXX 


from PIL import Image, ImageChops
import time
import random
import os
pathm = r"experiment/"
#path0 = r"basic/"
base_image01 = random.choice([
    x0 for x0 in os.listdir(path01)
    if os.path.isfile(os.path.join(path01, x0))])
filename001=(path01+base_image01)

im03 = Image.open(filename001)
im3 = im03.resize((640,640), Image.NEAREST)
im3.save("tmp/03.jpg")

jpg_im3 = Image.open("tmp/03.jpg") 
jpg_new = jpg_im3.resize((640,640), Image.NEAREST)


inv=ImageChops.invert(jpg_im3)
xoffset = 5
newim= ImageChops.offset(inv, xoffset, yoffset=None)

result5 = newim.resize((640,640), Image.NEAREST)

resultXX = ImageChops.blend(newim, result5, 0.5)

resultXX 


import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
import random
from random import randint
from PIL import Image
from PIL import ImageChops
import os

square_size = 10
offset_factor = 20
darken_factor = 0.1
path = r"basic/"
base_image = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
    ])
filename0=(path+base_image)

image = Image.open(filename0)
size = image.size

# Create image np array
im = np.array(image, dtype=np.uint8)

# Create figure and axes
fig,ax = plt.subplots(1)

# Display the image
ax.imshow(im)

# Add random offset to tuple based on offset_factor
def add_offet(t):
    t[0] = random.randint(t[0], (t[0] + offset_factor))
    t[1] = random.randint(t[1], (t[1] + offset_factor))

    return t


# Create a Rectangle patch
for w in xrange(0, size[0], square_size):
    for h in xrange(0, size[1], square_size):
        #print str(w) + ':' + str(h)
        square_size = randint(10,30)
        offset_factor = randint(10,30)
    
        # Get the average color of the section
        rect = im[h:h+square_size, w:w+square_size]
        mean = rect.mean(axis=(0,1))

        # Convert to hex value
        face_color = '#%02x%02x%02x' % (int(mean[0]), int(mean[1]), int(mean[2]))
        edge_color = '#%02x%02x%02x' % (int(mean[0] - (mean[0] * darken_factor)), int(mean[1]  - (mean[1] * darken_factor)), int(mean[2] - (mean[2] * darken_factor)))

        # Dont draw outline with the dominant color
        z_order = 2
        if '#e' in face_color or '#f' in face_color:
            line_width = 0.0
        else:
            line_width = 0.1
            z_order = 3

        points = [add_offet([w, h]), add_offet([w + square_size, h]), add_offet([w, h + square_size])]
        triangle1 = patches.Polygon(points, edgecolor=edge_color, linewidth=line_width, facecolor=face_color, zorder=z_order)

        # Second triangle
        points2 = [add_offet([w, h + square_size]), add_offet([w + square_size, h + square_size]), add_offet([w + square_size, h])]
        triangle2 = patches.Polygon(points2, edgecolor=edge_color, linewidth=line_width, facecolor=face_color, zorder=z_order)

        # Square in background
        rec = patches.Rectangle((w,h),square_size,square_size,linewidth=0.0, edgecolor=edge_color, facecolor=face_color, zorder=1)

        # Add the patch to the Axes
        ax.add_patch(triangle1)
        ax.add_patch(triangle2)
        ax.add_patch(rec)

plt.axis('off')
plt.savefig("images/Sranger-Tri-001a.jpg", bbox_inches='tight', dpi=200)

path = r"basic/"
base_image = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
    ])
filename0=(path+base_image)


img = Image.open("images/Sranger-Tri-001a.jpg")
nonwhite_positions = [(x,y) for x in range(img.size[0]) for y in range(img.size[1]) if img.getdata()[x+y*img.size[0]] != (255,255,255)]
rect = (min([x for x,y in nonwhite_positions]), min([y for x,y in nonwhite_positions]), max([x for x,y in nonwhite_positions]), max([y for x,y in nonwhite_positions]))
img.crop(rect).save('images/Sranger-Tri-001-crop2a.jpg')
#Create a second image
square_size = 10
offset_factor = 20
darken_factor = 0.1
#image = Image.open("images/Sranger002.jpg")

size = image.size

# Create image np array
im = np.array(image, dtype=np.uint8)

# Create figure and axes
fig,ax = plt.subplots(1)

# Display the image
ax.imshow(im)

# Add random offset to tuple based on offset_factor
def add_offet(t):
    t[0] = random.randint(t[0], (t[0] + offset_factor))
    t[1] = random.randint(t[1], (t[1] + offset_factor))

    return t


 

img = Image.open("images/Sranger-Tri-001a.jpg")
nonwhite_positions = [(x,y) for x in range(img.size[0]) for y in range(img.size[1]) if img.getdata()[x+y*img.size[0]] != (255,255,255)]
rect = (min([x for x,y in nonwhite_positions]), min([y for x,y in nonwhite_positions]), max([x for x,y in nonwhite_positions]), max([y for x,y in nonwhite_positions]))
img.crop(rect).save('images/Sranger-Tri-001-crop2b.jpg')

path = r"basic/"
base_image = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
    ])
filename0=(path+base_image)





im0 = Image.open("images/Sranger-Tri-001-crop2b.jpg")
img0 = im0.resize((640,640,3), Image.NEAREST)

im1 = Image.open(filename0)
img1 = im1.resize((640,640,3), Image.NEAREST)



blen = ImageChops.blend(img0, img1, .5)
blen.save('junk/Sranger-Tri-001-crop2b.jpg')
blen

#So I managed to do it, using "palette" image type, but the resulting file is not as small as I expected... 
#Here's my code in case its useful for someone else, or if someone can improve on it.

from PIL import Image

im = Image.open("tmp/03b.png")
imP = im.convert('RGB').convert('P', palette=Image.ADAPTIVE, colors=5)
imP.putpalette([
    0, 0, 0, # index 0 is black background
    0, 0, 255, # index 1 is blue
    255, 0, 0, # index 2 is red 
    ])

im2 = Image.open("tmp/03b.png")
imP2L = im2.convert('L') # need a greyscale image to create a mask
mask = Image.eval(imP2L, lambda a: 255 if a == 0 else 0)
imP.paste(2, mask) # Paste the color of index 2 using image2 as a mask
imP.save('tmp/wow-out3a.png', transparency = 0, optimize = 1) # Save and set index 0 as transparent



-

!showme tmp/wow-out3a.png

im = Image.open('tmp/wow-out3a.png')
rgb_im = im.convert('RGB')
r, g, b = rgb_im.getpixel((1, 1))

print(r, g, b)


max_width = max(image.size[0] for image in images)
max_height = max(image.size[1] for image in images)

image_sheet = Image.new("RGBA", (max_width * len(images), max_height))

for (i, image) in enumerate(images):
    image_sheet.paste(image, (
        max_width * i + (max_width - image.size[0]) / 2,
        max_height * 0 + (max_height - image.size[1]) / 2
    ))

image_sheet.save("whatever.png")
image_sheet

from PIL import Image
img = Image.new('RGB', (240,240), (255, 255, 255))
img.save("tmp/image.png", "PNG")

from math import sin

#creates a grayscale 
from PIL import Image
from math import sin, cos
img = Image.new('RGB', (256,256), (255, 255, 255))
img.save("tmp/image.png", "PNG")
image = Image.open('tmp/image.png') #open image
image = image.convert("RGBA")  #convert to RGBA
h,w = image.size
hh=0
ww=0
hl = h-h/2
wl = w-w/2
zl = (hl+5)+(wl-5)
aa = 255
i=2
while hh < h:
    ww=0
    while ww < w:
        r,g,b,a = image.getpixel((hh, ww)) #Get the rgba value at coordinates x,y
        #sin(x*y)+sin(y*z)+sin(z*x)==0
        x=ww-126
        y=hh-126
        z=ww-130
        if int(abs((cos(x**2-cos(y)-x+y**2)))*200)>60:
            co = int(abs((cos(x**2-cos(y)-x+y**2)))*200)
            image.putpixel((hh, ww), (co,0,0,aa)) #put back the modified reba values at same pixel coordinates
        else:
            image.putpixel((hh, ww), (255,255,255,aa))
        image.save("tmp/image2.png", "PNG")   
        ww = ww + 1
    hh=hh+1


image




import Image, ImageDraw

im = Image.open("lena.pgm")

draw = ImageDraw.Draw(im)

# Fill=128 creates a grey line
draw.line((0, 0) + im.size, fill=128)   
draw.line((0, im.size[1], im.size[0], 0), fill=128)
del draw

# write to stdout
im.save(sys.stdout, "PNG")

from PIL import Image
image = Image.open('tmp/wow-out3a.png') #open image
image = image.convert("RGBA")  #convert to RGBA
r,g,b,a = image.getpixel((x, y)) #Get the rgba value at coordinates x,y
A = a/100
#r,g,b,a = int(r,g,b,(a / 2)) #or you could do rgb[3] = 50 maybe? #set alpha to half somehow
image.putpixel((x,y), (r,g,b,A)) #put back the modified reba values at same pixel coordinates
image




i = "i.png"
o = "o.png"

key = (0, 0, 0, 255)

from PIL import Image as I

_i = I.open(i)
_ii = _i.load()

_o = I.new("RGBA", _i.size)
_oo = _o.load()

for x in range(0, _i.size[0]): 
    for y in range(0, _i.size[1]): 
        col = list(_ii[x, y])
        if col[0:3] == my_key_color[0:3]:
            _oo[x,y] = col[0:3]+(0,) # keep RGB, set A to 0
        else:
            _oo[x,y] = col

_o.save(o)



from skimage import io
import numpy as np

image = io.imread('http://i.stack.imgur.com/Y8UeF.jpg')

print(np.mean(image))

You might want to convert all images to float to get a value betwenn 0 and 1:

from skimage import io, img_as_float
import numpy as np

image = io.imread('http://i.stack.imgur.com/Y8UeF.jpg')
image = img_as_float(image)
print(np.mean(image))

from PIL import Image

img = Image.open('tmp/03b.png')
img = img.convert("RGBA")
datas = img.getdata()

newData = []
for item in datas:
    if item[0] == 255 and item[1] == 255 and item[2] == 255:
        newData.append((255, 255, 255, 0))
    else:
        newData.append(item)

img.putdata(newData)
img.save("tmp/img2.png", "PNG")
img

from PIL import Image, ImageChops

image_two = Image.open ("tmp/03b.png")
image_two = image_two.convert ("RGBA")

pixels = image_two.load()

for y in xrange (image_two.size[1]):
    for x in xrange (image_two.size[0]):
        if pixels[x, y][3] == 255:
            pixels[x, y] = (255, 0, 0, 255)
        else:
            pixels[x, y] = (255, 255, 255, 255)

image_two.save("tmp/image_two2.png")

from PIL import Image, ImageChops
import time
def remove_transparency(im, bg_colour=(255, 255, 255)):

    # Only process if image has transparency (http://stackoverflow.com/a/1963146)
    if im.mode in ('RGBA', 'LA') or (im.mode == 'P' and 'transparency' in im.info):

        # Need to convert to RGBA if LA format due to a bug in PIL (http://stackoverflow.com/a/1963146)
        alpha = im.convert('RGBA').split()[-1]

        # Create a new background image of our matt color.
        # Must be RGBA because paste requires both images have the same format
        # (http://stackoverflow.com/a/8720632  and  http://stackoverflow.com/a/9459208)
        bg = Image.new("RGBA", im.size, bg_colour + (255,))
        bg.paste(im, mask=alpha)
        return bg

    else:
        return im
    
im3 = Image.open('tmp/03a.png')     
nim =remove_transparency(im3, bg_colour=(255, 255, 255))

nim.save('tmp/03b.png')
nim

# Gray scale Embossing --- Working Fine 
from PIL import Image, ImageChops
import time
import random
import os
import cv2
import numpy as np
pathm = r"experiment/"
#path0 = r"basic/"
base_image01 = random.choice([
    x0 for x0 in os.listdir(path01)
    if os.path.isfile(os.path.join(path01, x0))])
filename001=(path01+base_image01)

im03 = Image.open(filename001)
im03 = im03.convert('L') 

im3 = im03.resize((640,640), Image.NEAREST)
im3.save("tmp/03.jpg")
im03 = cv2.imread("tmp/03.jpg")
blur = cv2.blur(im03,(2,2))
cv2.imwrite("tmp/03.jpg", blur)


jpg_im3 = Image.open("tmp/03.jpg") 
jpg_new = jpg_im3.resize((640,640), Image.NEAREST)

inv=ImageChops.invert(jpg_new)
xoffset = 5
newim= ImageChops.offset(inv, xoffset, yoffset=None)
result5 = newim.resize((640,640), Image.NEAREST)


resultXX = ImageChops.blend(newim, jpg_im3, 0.5)

pix = np.array(resultXX)
blurfin = cv2.blur(pix,(4,4))
cv2.imwrite("tmp/05a.jpg", blurfin)




!showme tmp/05a.jpg

# Gray scale Embossing --- Working Fine 
from PIL import Image, ImageChops
import time
import random
import os
import cv2
pathm = r"experiment/"
#path0 = r"basic/"
base_image01 = random.choice([
    x0 for x0 in os.listdir(path01)
    if os.path.isfile(os.path.join(path01, x0))])
filename001=(path01+base_image01)

im03 = Image.open(filename001)
im03 = im03.convert('L') 

im3 = im03.resize((640,640), Image.NEAREST)
im3.save("tmp/03.jpg")
im03 = cv2.imread("tmp/03.jpg")
blur = cv2.blur(im03,(2,2))
cv2.imwrite("tmp/03.jpg", blur)


jpg_im3 = Image.open("tmp/03.jpg") 
jpg_new = jpg_im3.resize((640,640), Image.NEAREST)

inv=ImageChops.invert(jpg_new)
xoffset = 5
newim= ImageChops.offset(inv, xoffset, yoffset=None)
result5 = newim.resize((640,640), Image.NEAREST)


resultXX = ImageChops.blend(newim, jpg_im3, 0.5)

resultXX 


# Working Fine 
from PIL import Image, ImageChops
import time
import random
import os
pathm = r"experiment/"
#path0 = r"basic/"
base_image01 = random.choice([
    x0 for x0 in os.listdir(path01)
    if os.path.isfile(os.path.join(path01, x0))])
filename001=(path01+base_image01)

im03 = Image.open(filename001)
im03 = im03.convert('L') 
im3 = im03.resize((640,640), Image.NEAREST)
im3.save("tmp/03.jpg")


jpg_im3 = Image.open("tmp/03.jpg") 
jpg_new = jpg_im3.resize((640,640), Image.NEAREST)

inv=ImageChops.invert(jpg_new)
xoffset = 5
newim= ImageChops.offset(inv, xoffset, yoffset=None)
result5 = newim.resize((640,640), Image.NEAREST)


resultXX = ImageChops.blend(newim, im03, 0.5)

resultXX 


from PIL import Image, ImageFont, ImageDraw, ImageEnhance

source_img = Image.open("tmp/tmp.jpg").convert("RGBA")


font = ImageFont.truetype("/home/jack/.fonts/Exo-Black.ttf", 15)
text = "TwitterBot Project"
# get text size
text_size = font.getsize(text)
# set button size + 10px margins
button_size = (text_size[0]+8, text_size[1]+8)
# create image with correct size and black background
button_img = Image.new('RGBA', button_size, "black")
# put text on button with 10px margins
button_draw = ImageDraw.Draw(button_img)
button_draw.text((4, 4), text, font=font)




# put button on source image in position (0, 0)
source_img.paste(button_img, (15,15))
# save in new file
source_img.save("junk/output.jpg", "JPEG")
source_img

image=Image.open("star_blue.png")
opacity=0.5
bands=list(self.image.split())
if len(bands)==4:
    bands[3]=bands[3].point(lambda x:x*opacity)
    new_image=Image.merge(image.mode,bands)


from PIL import Image, ImageFont, ImageDraw, ImageEnhance

source_img = Image.open("tmp/tmp.jpg").convert("RGBA")


font2 = ImageFont.truetype("/home/jack/.fonts/Exo-Black.ttf", 15)
text = "TwitterBot Project"
# get text size
text_size = font.getsize(text)
# set button size + 10px margins
button_size = (text_size[0]+8, text_size[1]+8)
# create image with correct size and black background
button_img = Image.new('RGBA', button_size, "black")
# put text on button with 10px margins
button_draw = ImageDraw.Draw(button_img)
button_draw.text((4, 4), text, font=font2)
opacity=0.5
bands=list(button_img.split())
if len(bands)==4:
    bands[3]=bands[3].point(lambda x:x*opacity)
    new_image=Image.merge(button_img.mode,bands)
# put button on source image in position (0, 0)
source_img.paste(new_image, (15,15))
# save in new file
source_img.save("junk/output.jpg", "JPEG")
source_img





import PIL
from PIL import ImageFont
from PIL import Image
from PIL import ImageDraw

width = 854
height = 480
black = (0,0,0)
text = "copyright"
white = (255,255,255)
font = ImageFont.truetype("/home/jack/.fonts/Exo-Black.ttf", 35)
img = Image.new("RGBA", (width,height),white)
draw = ImageDraw.Draw(img)
w, h = draw.textsize(text, font)
draw.text(((width-w)/2,(height-h)/2),text,black,font=font)
draw = ImageDraw.Draw(img)
#img.putalpha
img.save("junk/result2.png")
img

!showme junk/output.jpg

from PIL import Image
bg = Image.open("1.jpg")
fg = Image.open("2.jpg")
# set alpha to .7
Image.blend(bg, fg, .7).save("out.png")



image=Image.open("star_blue.png")
opacity=0.5
bands=list(self.image.split())
if len(bands)==4:
    bands[3]=bands[3].point(lambda x:x*opacity)
    new_image=Image.merge(image.mode,bands)

!pwd

!http-server /home/jack/Desktop/TENSORFLOW/models/magenta_arbitrary-image-stylization-v1-256_2/

import os
import tensorflow as tf
# Load compressed models from tensorflow_hub
os.environ['TFHUB_MODEL_LOAD_FORMAT'] = 'COMPRESSED'
import IPython.display as display

import matplotlib.pyplot as plt
import matplotlib as mpl
mpl.rcParams['figure.figsize'] = (12, 12)
mpl.rcParams['axes.grid'] = False

import numpy as np
import PIL.Image
import time
import functools

def tensor_to_image(tensor):
    tensor = tensor*255
    tensor = np.array(tensor, dtype=np.uint8)
    if np.ndim(tensor)>3:
        assert tensor.shape[0] == 1
        tensor = tensor[0]
    return PIL.Image.fromarray(tensor)
def load_img(path_to_img):
    max_dim = 512
    img = tf.io.read_file(path_to_img)
    img = tf.image.decode_image(img, channels=3)
    img = tf.image.convert_image_dtype(img, tf.float32)

    shape = tf.cast(tf.shape(img)[:-1], tf.float32)
    long_dim = max(shape)
    scale = max_dim / long_dim

    new_shape = tf.cast(shape * scale, tf.int32)

    img = tf.image.resize(img, new_shape)
    img = img[tf.newaxis, :]
    return img
def imshow(image, title=None):
    if len(image.shape) > 3:
        image = tf.squeeze(image, axis=0)

    plt.imshow(image)
    if title:
        plt.title(title)

from tensorflow.python.ops.numpy_ops import np_config
np_config.enable_numpy_behavior()
from PIL import Image
import os

def prep_content(content):
    PI = Image.open(content)
    PI = PI.resize((720,480), Image.NEAREST)
    CFilename = os.path.basename(content)
    PI.save("preped_images/Content_"+CFilename)
    Content_data="preped_images/Content_"+CFilename
    return Content_data
    
def prep_style(style):
    PI = Image.open(style)
    PI = PI.resize((720,480), Image.NEAREST)
    SFilename = os.path.basename(style)
    PI.save("preped_images/Style_"+SFilename)
    Style_data="preped_images/Style_"+SFilename
    return Style_data    


path = r"publish/"
base_image = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
])
filename0=(path+base_image)




#content = "/home/jack/Pictures/1022362.jpg"
content = "/home/jack/Desktop/TENSORFLOW/images/default-file-q4.png"

#style = "/home/jack/Pictures/JuanjoCristianitarotdeck/juanjo-cristiani-11.png"
style = "/home/jack/Pictures/0_.jpg"
#print (prep_style(style))

content_image = load_img(prep_content(content))
style_image = load_img(prep_style(style))

print(content_image.size)
print(style_image.size)
plt.subplot(1, 2, 1)
imshow(content_image, 'Content Image')

plt.subplot(1, 2, 2)
imshow(style_image, 'Style Image')


from PIL import Image
import tensorflow as tf
import tensorflow_hub as hub
import time
hub_model = hub.load('http://localhost:8080/Models/magenta_arbitrary-image-stylization-v1-256_2.tar.gz')
#hub_model = hub.load('http://localhost:8080/Models/magenta_arbitrary-image-stylization-v1-256_fp16_transfer_1.tflite')
#hub_model = hub.load("models/magenta_arbitrary-image-stylization-v1-256_2")
stylized_image = hub_model(tf.constant(content_image), tf.constant(style_image))[0]
im = tensor_to_image(stylized_image)
timestr = time.strftime("%Y%m%d-%H%M%S")
savefile = "images/"+timestr+".jpg"
im.save(savefile)
print(im.size)
im

iml = im.resize((720,480), Image.NEAREST)
iml.save("720x480/temp.jpg")
iml

from PIL import Image, ImageEnhance
im = Image.open("720x480/temp.jpg")
enhancer = ImageEnhance.Sharpness(im)
factor = 1.5
im_s_1 = enhancer.enhance(factor)
im_s_1.save('720x480/Sharpened-temp.jpg');
im_s_1

#!/home/jack/miniconda3/envs/cloned_base/bin/python
import numpy as np
import random
from random import randint
from PIL import Image, ImageDraw, ImageFont, ImageChops, ImageFilter 
import os
import sys
import markovify
import twython
from twython import Twython
import time
import shutil
from randtext import randTXT
STR = randTXT()
Hash = ["#AIart #Tensorflow #twitme #Python #100DaysOfCode\n","#tensorflow #styletransfer #PythonGraphics #PIL #PythonImageLibrary\n","#NFTartist #NFTProject #NEARnft #nearNFTs \n","#NFT #NFTs #NFTCommunity #NFTdrop #nftart\n","#CreativeCoding  #AI #genart #p5js #Generative\n","#twitme #Python #100DaysOfCode\n","#Python #100DaysOfCode #PythonBots #codefor30days\n" ]
hashnum = randint(0,len(Hash)-1)
hashs =Hash[0]
# add the hash to STR generated with randTXT()
STR = hashs
STR= STR[:180]
print(STR)
# Open background image and work out centre
x = 720//2
y = 480//2

# The text we want to add
#text = "NFT TwitterBot Project"
text = STR
# Create font
font = ImageFont.truetype('/snap/gnome-3-38-2004/99/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf', 15)

#nap=randint(10,400)
#time.sleep(nap)
'''
path = r"/home/jack/Desktop/Imagedata/4-publish-images/"
base_image = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
])'''
#filename1='images/result.png'
filename1='720x480/Sharpened-temp.jpg'

bg = Image.open(filename1).convert('RGB')
x = bg.width//2
y = bg.height//2
src_path = filename1
#dst_path = "/home/jack/Desktop/Imagedata/3-resource_images/"
#shutil.move(src_path, dst_path)

# The text we want to add
text=STR[:249]
print("len(text): ",len(text))
# Create font
font = ImageFont.truetype('/snap/gnome-3-38-2004/99/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf', 15)

# Create piece of canvas to draw text on and blur
blurred = Image.new('RGBA', bg.size)
draw = ImageDraw.Draw(blurred)
CH = randint(0,1)
if CH == 0:COLor = ["white","black"]
elif CH == 1:COLor = ["black","white"]  
draw.text(xy=(x-10,y+220), text=text, fill=COLor[0], font=font, anchor='mm')
draw.text(xy=(x-11,y+221), text=text, fill=COLor[0], font=font, anchor='mm')
draw.text(xy=(x-12,y+219), text=text, fill=COLor[0], font=font, anchor='mm')
draw.text(xy=(x-10,y+218), text=text, fill=COLor[0], font=font, anchor='mm')
blurred = blurred.filter(ImageFilter.BoxBlur(2))

# Paste soft text onto background
bg.paste(blurred,blurred)

# Draw on sharp text
draw = ImageDraw.Draw(bg)
draw.text(xy=(x-10,y+220), text=text, fill=COLor[1], font=font, anchor='mm')
postage = ["perferations.png","perferations+.png","frames.png","usa-perferations.png","usar-perferations.png","usal-perferations.png"]
Num = randint( 0, len(postage)-1)
BOARDER ="overlays/frame-lite.png"
#BOARDER ="overlays/nouveau-black-frame1.png"
#BOARDER = "overlays/"+postage[Num]
mask=Image.open(BOARDER).convert('RGBA') 
bg.paste(mask, (0,0), mask=mask)
bg.save('images/useresult.png')
#removed keys for privacy reasons
CONSUMER_KEY = 'APIkey()[0]'
CONSUMER_SECRET = 'APIkey()[1]'
ACCESS_KEY = 'APIkey()[2]'
ACCESS_SECRET = 'APIkey()[3]'

twitter = Twython(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_KEY, ACCESS_SECRET)
PATH = "images/useresult.png"
timestr = time.strftime("%Y%m%d-%H%M%S")
print (timestr+".png")

#python program to check if a directory exists
import os
path = "posted"
# Check whether the specified path exists or not
isExist = os.path.exists(path)
if not isExist:
    # Create a new directory because it does not exist
    os.makedirs(path)
    print("The new directory is created!")
shutil.copy(PATH, "posted/"+timestr+".png")
# 1 , 2, 3, 12, 5, 15, 8, 6
#photo = open('/home/jack/Desktop/deep-dream-generator/notebooks/images/'+file_list[rnd]+'.jpg','rb')

photo = open(PATH,'rb')
#photo = open("images/waves1.gif","rb")
#response = twitter.upload_media(media=photo)
#twitter.update_status(status=STR, media_ids=[response['media_id']])

im = Image.open(PATH)
im

response = twitter.upload_media(media=photo)
twitter.update_status(status=STR, media_ids=[response['media_id']])



#!/home/jack/miniconda3/envs/cloned_base/bin/python
from PIL import Image, ImageDraw, ImageFont, ImageChops, ImageFilter, ImageEnhance
from tensorflow.python.ops.numpy_ops import np_config
np_config.enable_numpy_behavior()
import random
import os
import numpy as np
from random import randint
import sys
import markovify
import twython
from twython import Twython
import time
import shutil
from randtext import randTXT
import tensorflow as tf
import tensorflow_hub as hub
def prep_content(content):
    PI = Image.open(content)
    PI = PI.resize((720,480), Image.NEAREST)
    CFilename = os.path.basename(content)
    PI.save("preped_images/Content_"+CFilename)
    Content_data="preped_images/Content_"+CFilename
    return Content_data
    
def prep_style(style):
    PI = Image.open(style)
    PI = PI.resize((720,480), Image.NEAREST)
    SFilename = os.path.basename(style)
    PI.save("preped_images/Style_"+SFilename)
    Style_data="preped_images/Style_"+SFilename
    return Style_data    


path = r"/home/jack/Desktop/Imagedata/0-original-images/"
base_image = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
])
content=(path+base_image)
print("content"+path+base_image)

#content = "/home/jack/Pictures/1022362.jpg"


path = r"/home/jack/Desktop/Imagedata/4-publish-images/"
base_image = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
])
style=(path+base_image)
print("style"+path+base_image)
#style = "/home/jack/Pictures/1022362.jpg

content_image = load_img(prep_content(content))
style_image = load_img(prep_style(style))
# A node server http-server was started in Directory before the "Models" directory
hub_model = hub.load('http://localhost:8080/Models/magenta_arbitrary-image-stylization-v1-256_2.tar.gz')
#hub_model = hub.load('http://localhost:8080/Models/magenta_arbitrary-image-stylization-v1-256_fp16_transfer_1.tflite')
stylized_image = hub_model(tf.constant(content_image), tf.constant(style_image))[0]
im = tensor_to_image(stylized_image)
timestr = time.strftime("%Y%m%d-%H%M%S")
savefile = "images/"+timestr+".jpg"
im.save(savefile)
#print(im.size)
#im
iml = im.resize((720,480), Image.NEAREST)
iml.save("720x480/temp.jpg")
#iml

im = Image.open("720x480/temp.jpg")
enhancer = ImageEnhance.Sharpness(im)
factor = 1.5
im_s_1 = enhancer.enhance(factor)
im_s_1.save('720x480/Sharpened-temp.jpg');


STR = randTXT()
Hash = ["#AIart #Tensorflow #twitme #Python #100DaysOfCode\n","#tensorflow #styletransfer #PythonGraphics #PIL #PythonImageLibrary\n","#NFTartist #NFTProject #NEARnft #nearNFTs \n","#NFT #NFTs #NFTCommunity #NFTdrop #nftart\n","#CreativeCoding  #AI #genart #p5js #Generative\n","#twitme #Python #100DaysOfCode\n","#Python #100DaysOfCode #PythonBots #codefor30days\n" ]
hashnum = randint(0,len(Hash)-1)
hashs =Hash[0]
# add the hash to STR generated with randTXT()
STR = hashs
STR= STR[:180]
print(STR)
# Open background image and work out centre
x = 720//2
y = 480//2

# The text we want to add
#text = "NFT TwitterBot Project"
text = STR
# Create font
font = ImageFont.truetype('/snap/gnome-3-38-2004/99/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf', 15)

#nap=randint(10,400)
#time.sleep(nap)
'''
path = r"/home/jack/Desktop/Imagedata/4-publish-images/"
base_image = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
])'''
#filename1='images/result.png'
filename1='720x480/Sharpened-temp.jpg'

bg = Image.open(filename1).convert('RGB')
x = bg.width//2
y = bg.height//2
src_path = filename1
#dst_path = "/home/jack/Desktop/Imagedata/3-resource_images/"
#shutil.move(src_path, dst_path)

# The text we want to add
text=STR[:249]
print("len(text): ",len(text))
# Create font
font = ImageFont.truetype('/snap/gnome-3-38-2004/99/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf', 15)

# Create piece of canvas to draw text on and blur
blurred = Image.new('RGBA', bg.size)
draw = ImageDraw.Draw(blurred)
CH = randint(0,1)
if CH == 0:COLor = ["white","black"]
elif CH == 1:COLor = ["black","white"]  
draw.text(xy=(x-10,y+220), text=text, fill=COLor[0], font=font, anchor='mm')
draw.text(xy=(x-11,y+221), text=text, fill=COLor[0], font=font, anchor='mm')
draw.text(xy=(x-12,y+219), text=text, fill=COLor[0], font=font, anchor='mm')
draw.text(xy=(x-10,y+218), text=text, fill=COLor[0], font=font, anchor='mm')
blurred = blurred.filter(ImageFilter.BoxBlur(2))

# Paste soft text onto background
bg.paste(blurred,blurred)

# Draw on sharp text
draw = ImageDraw.Draw(bg)
draw.text(xy=(x-10,y+220), text=text, fill=COLor[1], font=font, anchor='mm')
postage = ["perferations.png","perferations+.png","frames.png","usa-perferations.png","usar-perferations.png","usal-perferations.png"]
Num = randint( 0, len(postage)-1)
BOARDER ="overlays/frame-lite.png"
#BOARDER ="overlays/nouveau-black-frame1.png"
#BOARDER = "overlays/"+postage[Num]
mask=Image.open(BOARDER).convert('RGBA') 
bg.paste(mask, (0,0), mask=mask)
bg.save('images/useresult.png')
#removed keys for privacy reasons
CONSUMER_KEY = 'APIkey()[0]'
CONSUMER_SECRET = 'APIkey()[1]'
ACCESS_KEY = 'APIkey()[2]'
ACCESS_SECRET = 'APIkey()[3]'

twitter = Twython(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_KEY, ACCESS_SECRET)
PATH = "images/useresult.png"
timestr = time.strftime("%Y%m%d-%H%M%S")
#print (timestr+".png")

#python program to check if a directory exists
import os
path = "posted"
# Check whether the specified path exists or not
isExist = os.path.exists(path)
if not isExist:
    # Create a new directory because it does not exist
    os.makedirs(path)
    print("The new directory is created!")
shutil.copy(PATH, "posted/"+timestr+".png")
# 1 , 2, 3, 12, 5, 15, 8, 6
#photo = open('/home/jack/Desktop/deep-dream-generator/notebooks/images/'+file_list[rnd]+'.jpg','rb')

photo = open(PATH,'rb')
#photo = open("images/waves1.gif","rb")
#response = twitter.upload_media(media=photo)
#twitter.update_status(status=STR, media_ids=[response['media_id']])
im = Image.open(PATH)
STR0 = randTXT()
STRu= STR0[:180]
print(STRu)
im

print(STR)

response = twitter.upload_media(media=photo)
twitter.update_status(status=STRu, media_ids=[response['media_id']])

!pwd

!http-server /home/jack/Desktop/TENSORFLOW/models/magenta_arbitrary-image-stylization-v1-256_2/

import os
import tensorflow as tf
# Load compressed models from tensorflow_hub
os.environ['TFHUB_MODEL_LOAD_FORMAT'] = 'COMPRESSED'
import IPython.display as display

import matplotlib.pyplot as plt
import matplotlib as mpl
mpl.rcParams['figure.figsize'] = (12, 12)
mpl.rcParams['axes.grid'] = False

import numpy as np
import PIL.Image
import time
import functools

def tensor_to_image(tensor):
    tensor = tensor*255
    tensor = np.array(tensor, dtype=np.uint8)
    if np.ndim(tensor)>3:
        assert tensor.shape[0] == 1
        tensor = tensor[0]
    return PIL.Image.fromarray(tensor)
def load_img(path_to_img):
    max_dim = 512
    img = tf.io.read_file(path_to_img)
    img = tf.image.decode_image(img, channels=3)
    img = tf.image.convert_image_dtype(img, tf.float32)

    shape = tf.cast(tf.shape(img)[:-1], tf.float32)
    long_dim = max(shape)
    scale = max_dim / long_dim

    new_shape = tf.cast(shape * scale, tf.int32)

    img = tf.image.resize(img, new_shape)
    img = img[tf.newaxis, :]
    return img
def imshow(image, title=None):
    if len(image.shape) > 3:
        image = tf.squeeze(image, axis=0)

    plt.imshow(image)
    if title:
        plt.title(title)

from tensorflow.python.ops.numpy_ops import np_config
np_config.enable_numpy_behavior()
from PIL import Image
import random
import os

def prep_content(content):
    PI = Image.open(content)
    PI = PI.resize((720,480), Image.NEAREST)
    CFilename = os.path.basename(content)
    PI.save("preped_images/Content_"+CFilename)
    Content_data="preped_images/Content_"+CFilename
    return Content_data
    
def prep_style(style):
    PI = Image.open(style)
    PI = PI.resize((720,480), Image.NEAREST)
    SFilename = os.path.basename(style)
    PI.save("preped_images/Style_"+SFilename)
    Style_data="preped_images/Style_"+SFilename
    return Style_data    


path = r"/home/jack/Desktop/Imagedata/0-original-images/"
base_image = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
])
content=(path+base_image)
print("content"+path+base_image)

#content = "/home/jack/Pictures/1022362.jpg"
#content = "/home/jack/Desktop/TENSORFLOW/images/default-file-q4.png"

path = r"/home/jack/Desktop/Imagedata/4-publish-images/"
base_image = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
])
style=(path+base_image)
print("style"+path+base_image)
#style = "/home/jack/Pictures/JuanjoCristianitarotdeck/juanjo-cristiani-11.png"
#style = "/home/jack/Pictures/0_.jpg"
#print (prep_style(style))

content_image = load_img(prep_content(content))
style_image = load_img(prep_style(style))

print(content_image.size)
print(style_image.size)
plt.subplot(1, 2, 1)
imshow(content_image, 'Content Image')

plt.subplot(1, 2, 2)
imshow(style_image, 'Style Image')


from PIL import Image
import tensorflow as tf
import tensorflow_hub as hub
import time
hub_model = hub.load('http://localhost:8080/Models/magenta_arbitrary-image-stylization-v1-256_2.tar.gz')
#hub_model = hub.load('http://localhost:8080/Models/magenta_arbitrary-image-stylization-v1-256_fp16_transfer_1.tflite')
#hub_model = hub.load("models/magenta_arbitrary-image-stylization-v1-256_2")
stylized_image = hub_model(tf.constant(content_image), tf.constant(style_image))[0]
im = tensor_to_image(stylized_image)
timestr = time.strftime("%Y%m%d-%H%M%S")
savefile = "images/"+timestr+".jpg"
im.save(savefile)
print(im.size)
im

iml = im.resize((720,480), Image.NEAREST)
iml.save("720x480/temp.jpg")
iml

from PIL import Image, ImageEnhance
im = Image.open("720x480/temp.jpg")
enhancer = ImageEnhance.Sharpness(im)
factor = 1.5
im_s_1 = enhancer.enhance(factor)
im_s_1.save('720x480/Sharpened-temp.jpg');
im_s_1

#!/home/jack/miniconda3/envs/cloned_base/bin/python
import numpy as np
import random
from random import randint
from PIL import Image, ImageDraw, ImageFont, ImageChops, ImageFilter 
import os
import sys
import markovify
import twython
from twython import Twython
import time
import shutil
from randtext import randTXT
STR = randTXT()
Hash = ["#AIart #Tensorflow #twitme #Python #100DaysOfCode\n","#tensorflow #styletransfer #PythonGraphics #PIL #PythonImageLibrary\n","#NFTartist #NFTProject #NEARnft #nearNFTs \n","#NFT #NFTs #NFTCommunity #NFTdrop #nftart\n","#CreativeCoding  #AI #genart #p5js #Generative\n","#twitme #Python #100DaysOfCode\n","#Python #100DaysOfCode #PythonBots #codefor30days\n" ]
hashnum = randint(0,len(Hash)-1)
hashs =Hash[0]
# add the hash to STR generated with randTXT()
STR = hashs
STR= STR[:180]
print(STR)
# Open background image and work out centre
x = 720//2
y = 480//2

# The text we want to add
#text = "NFT TwitterBot Project"
text = STR
# Create font
font = ImageFont.truetype('/snap/gnome-3-38-2004/99/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf', 15)

#nap=randint(10,400)
#time.sleep(nap)
'''
path = r"/home/jack/Desktop/Imagedata/4-publish-images/"
base_image = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
])'''
#filename1='images/result.png'
filename1='720x480/Sharpened-temp.jpg'

bg = Image.open(filename1).convert('RGB')
x = bg.width//2
y = bg.height//2
src_path = filename1
#dst_path = "/home/jack/Desktop/Imagedata/3-resource_images/"
#shutil.move(src_path, dst_path)

# The text we want to add
text=STR[:249]
print("len(text): ",len(text))
# Create font
font = ImageFont.truetype('/snap/gnome-3-38-2004/99/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf', 15)

# Create piece of canvas to draw text on and blur
blurred = Image.new('RGBA', bg.size)
draw = ImageDraw.Draw(blurred)
CH = randint(0,1)
if CH == 0:COLor = ["white","black"]
elif CH == 1:COLor = ["black","white"]  
draw.text(xy=(x-10,y+220), text=text, fill=COLor[0], font=font, anchor='mm')
draw.text(xy=(x-11,y+221), text=text, fill=COLor[0], font=font, anchor='mm')
draw.text(xy=(x-12,y+219), text=text, fill=COLor[0], font=font, anchor='mm')
draw.text(xy=(x-10,y+218), text=text, fill=COLor[0], font=font, anchor='mm')
blurred = blurred.filter(ImageFilter.BoxBlur(2))

# Paste soft text onto background
bg.paste(blurred,blurred)

# Draw on sharp text
draw = ImageDraw.Draw(bg)
draw.text(xy=(x-10,y+220), text=text, fill=COLor[1], font=font, anchor='mm')
postage = ["perferations.png","perferations+.png","frames.png","usa-perferations.png","usar-perferations.png","usal-perferations.png"]
Num = randint( 0, len(postage)-1)
BOARDER ="overlays/frame-lite.png"
#BOARDER ="overlays/nouveau-black-frame1.png"
#BOARDER = "overlays/"+postage[Num]
mask=Image.open(BOARDER).convert('RGBA') 
bg.paste(mask, (0,0), mask=mask)
bg.save('images/useresult.png')
#removed keys for privacy reasons
CONSUMER_KEY = 'APIkey()[0]'
CONSUMER_SECRET = 'APIkey()[1]'
ACCESS_KEY = 'APIkey()[2]'
ACCESS_SECRET = 'APIkey()[3]'

twitter = Twython(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_KEY, ACCESS_SECRET)
PATH = "images/useresult.png"
timestr = time.strftime("%Y%m%d-%H%M%S")
print (timestr+".png")

#python program to check if a directory exists
import os
path = "posted"
# Check whether the specified path exists or not
isExist = os.path.exists(path)
if not isExist:
    # Create a new directory because it does not exist
    os.makedirs(path)
    print("The new directory is created!")
shutil.copy(PATH, "posted/"+timestr+".png")
# 1 , 2, 3, 12, 5, 15, 8, 6
#photo = open('/home/jack/Desktop/deep-dream-generator/notebooks/images/'+file_list[rnd]+'.jpg','rb')

photo = open(PATH,'rb')
#photo = open("images/waves1.gif","rb")
#response = twitter.upload_media(media=photo)
#twitter.update_status(status=STR, media_ids=[response['media_id']])

im = Image.open(PATH)
im

response = twitter.upload_media(media=photo)
twitter.update_status(status=STR, media_ids=[response['media_id']])



!ls haarcascades/haarcascade_frontalface_alt.xml

https://www.graph.cool/pricing/

import sys
sys.path.insert(0, "/home/jack/anaconda2/envs/py27/lib/python2.7/site-packages")
import cv2

%%writefile testblend.py
# ________  EXPERIMENT

"""
This opens two random images from the associated directories. Both images are resized to 
640x640. This is done in order to use the blend function. To use blend, both images must 
be the same size. The first image has a randomly created transparent region, to add 
to the effects. The blend is also a random alpha so all images created do not have an 
identical blend. All files saved are 640x640 and saved by " date-filename.png "
The purpose of these files are to create images to be pasted on the base or back 
ground collage piece.
"""
def Blend():
    import PIL
    import time
    from PIL import Image
    import random, os
    from random import randint
    import random, os
    path = r"../../GRAPHICS/gmic/640x640/"
    random_filename = random.choice([
        x for x in os.listdir(path)
        if os.path.isfile(os.path.join(path, x))
    ])

    img1 = path+"/"+random_filename
    im1=Image.open(img1)
    longer_side = max(im1.size)
    basewidth = longer_side
    img = Image.open(img1)
    wpercent = (basewidth / float(img.size[0]))
    hsize = int((float(img.size[1]) * float(wpercent)))
    img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
    half_the_width = img.size[0] / 2
    half_the_height = img.size[1] / 2
    img4 = img.crop(
        (
            half_the_width - 320,
            half_the_height - 320,
            half_the_width + 320,
            half_the_height + 320
        )
    )
    img4.save("STUFF/"+"TEMP-img5.png")
    from PIL import ImageDraw
    im = Image.open("STUFF/"+"TEMP-img5.png")

    x1=(randint(1, 150))
    x2=(randint(1, 150))
    y1=(randint(151,320))
    y2=(randint(151, 320))
    transparent_area = (x1,x2,300,500)

    mask=Image.new('L', im.size, color=255)
    draw=ImageDraw.Draw(mask) 
    draw.rectangle(transparent_area, fill=0)
    im.putalpha(mask)
    im.save("STUFF/"+"TEMP-img4.png")
    path2 = r"../../GRAPHICS/gmic/640x640/"
    #path2 = r"bugs/advertisements1800/"
    random_filename2 = random.choice([
        y for y in os.listdir(path2)
        if os.path.isfile(os.path.join(path2, y))
    ])

    img1a = path2+"/"+random_filename2
    im1a=Image.open(img1a)
    basewidth = 640
    imga = Image.open(img1a)
    wpercent = (basewidth / float(imga.size[0]))
    hsize = int((float(img.size[1]) * float(wpercent)))
    imga = imga.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
    half_the_width = imga.size[0] / 2
    half_the_height = imga.size[1] / 2
    img4a = imga.crop(
        (
            half_the_width - 320,
            half_the_height - 320,
            half_the_width + 320,
            half_the_height + 320
        )
    )
    img4a.save("STUFF/"+"TEMP-img4a.png")
    img1 = "STUFF/"+"TEMP-img4.png"
    img2 = "STUFF/"+"TEMP-img4a.png"

    from PIL import Image
    #im1=Image.open(img1)
    #im1.size # (width,height) tuple
    #im2=Image.open(img2)
    #im2.size # (width,height) tuple
    background = Image.open(img1)
    overlay = Image.open(img2)

    #background = Image.open(img2)
    background = background.convert("RGBA")
    #overlay = Image.open(img2)
    overlay = overlay.convert("RGBA")
    Alpha=(randint(1, 9))*0.1
    new_img = Image.blend(background, overlay, Alpha)

    timename = time.strftime("%Y%m%d-%H%M%S")
    #filename = timename+".png"
    filename = timename
    #new_img.save(filename,"PNG")
    saveas = "ManRay_temp/"+filename+".png"
    new_img.save(saveas,"PNG")
    return saveas

from testblend import Blend
from time import sleep
count =0
while count <50:
    Blend()
    count=count+1
    sleep(1.5)
    print count,

#1- GOOD RANDOM resize and crop
import PIL
import time
from PIL import Image
import random, os
import random, os
count = 0
while (count < 350):

    path = r"marblepaper"

    random_filename = random.choice([
        x for x in os.listdir(path)
        if os.path.isfile(os.path.join(path, x))
    ])
    img1 = path+"/"+random_filename
    im1=Image.open(img1)
    basewidth = 720
    img = Image.open(img1)
    wpercent = (basewidth / float(img.size[0]))
    hsize = int((float(img.size[1]) * float(wpercent)))
    img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
    half_the_width = img.size[0] / 2
    half_the_height = img.size[1] / 2
    img4 = img.crop(
        (
            half_the_width - 360,
            half_the_height - 240,
            half_the_width + 360,
            half_the_height + 240
        )
    )
    img4.save("TEMP/img4.png")

    path2 = r"videoframes/"
    #path2 = r"bugs/advertisements1800/"
    random_filename2 = random.choice([
        y for y in os.listdir(path2)
        if os.path.isfile(os.path.join(path2, y))
    ])

    img1a = path2+"/"+random_filename2
    im1a=Image.open(img1a)
    basewidth = 720
    imga = Image.open(img1a)
    wpercent = (basewidth / float(imga.size[0]))
    hsize = int((float(img.size[1]) * float(wpercent)))
    imga = imga.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
    half_the_width = imga.size[0] / 2
    half_the_height = imga.size[1] / 2
    img4a = imga.crop(
        (
            half_the_width - 360,
            half_the_height - 240,
            half_the_width + 360,
            half_the_height + 240
        )
    )
    img4a.save("TEMP/img4a.png")
    img1 = "TEMP/img4.png"
    img2 = "TEMP/img4a.png"

    from PIL import Image
    #im1=Image.open(img1)
    #im1.size # (width,height) tuple
    #im2=Image.open(img2)
    #im2.size # (width,height) tuple
    background = Image.open(img1)
    overlay = Image.open(img2)

    #background = Image.open(img2)
    background = background.convert("RGBA")
    #overlay = Image.open(img2)
    overlay = overlay.convert("RGBA")

    new_img = Image.blend(background, overlay, 0.5)



    new_img = new_img.convert("RGBA")


    #new = PIL.Image.new("RGB", 1040, 1040, color=1)
    white = (255,255,255)
    img_base = Image.new("RGB", [720,480], white)



    offset = (0, 0)
    new_img2 = img_base.paste(new_img, offset)




    #new_img2 = Image.blend(new_img, base_img, 1)

    timename = time.strftime("%Y%m%d-%H%M%S")
    #filename = timename+".png"
    filename = timename
    #new_img.save(filename,"PNG")

    img_base.save("ManRay/"+filename+".png","PNG")

    count = count +1
    time.sleep(1.5)
    print (count, end="-")

!mkdir ManRay

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np

from IPython.display import display, Image

from glob import glob

import PIL
images = [ PIL.Image.open(f) for f in glob('ManRay/*') ]

def img2array(im):
    if im.mode != 'RGB':
        im = im.convert(mode='RGB')
    return np.fromstring(im.tobytes(), dtype='uint8').reshape((im.size[1], im.size[0], 3))

np_images = [ img2array(im) for im in images ]

for img in np_images:
    plt.figure()
    plt.imshow(img)

#1- GOOD RANDOM resize and crop
#This is fine makes a 1040x1040 background
import PIL
import time
from PIL import Image
import random, os
import random, os
#count = 0
#while (count < 30):

    path = r"bugs/lupe/"

    random_filename = random.choice([
        x for x in os.listdir(path)
        if os.path.isfile(os.path.join(path, x))
    ])
    img1 = path+"/"+random_filename
    im1=Image.open(img1)
    basewidth = 1040
    img = Image.open(img1)
    wpercent = (basewidth / float(img.size[0]))
    hsize = int((float(img.size[1]) * float(wpercent)))
    img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
    half_the_width = img.size[0] / 2
    half_the_height = img.size[1] / 2
    img4 = img.crop(
        (
            half_the_width - 520,
            half_the_height - 520,
            half_the_width + 520,
            half_the_height + 520
        )
    )
    img4.save("TEMP-img4.png")


    path2 = r"cycle/"
    #path2 = r"bugs/advertisements1800/"
    random_filename2 = random.choice([
        y for y in os.listdir(path2)
        if os.path.isfile(os.path.join(path2, y))
    ])

    img1a = path2+"/"+random_filename2
    im1a=Image.open(img1a)
    basewidth = 1040
    imga = Image.open(img1a)
    wpercent = (basewidth / float(imga.size[0]))
    hsize = int((float(img.size[1]) * float(wpercent)))
    imga = imga.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
    half_the_width = imga.size[0] / 2
    half_the_height = imga.size[1] / 2
    img4a = imga.crop(
        (
            half_the_width - 520,
            half_the_height - 520,
            half_the_width + 520,
            half_the_height + 520
        )
    )
    img4a.save("TEMP-img4a.png")
    img1 = "TEMP-img4.png"
    img2 = "TEMP-img4a.png"

    from PIL import Image
    #im1=Image.open(img1)
    #im1.size # (width,height) tuple
    #im2=Image.open(img2)
    #im2.size # (width,height) tuple
    background = Image.open(img1)
    overlay = Image.open(img2)

    #background = Image.open(img2)
    background = background.convert("RGBA")
    #overlay = Image.open(img2)
    overlay = overlay.convert("RGBA")

    new_img = Image.blend(background, overlay, 0.5)



    new_img = new_img.convert("RGBA")


    #new = PIL.Image.new("RGB", 1040, 1040, color=1)
    white = (255,255,255)
    img_base = Image.new("RGB", [1040,1040], white)



    offset = (0, 0)
    new_img2 = img_base.paste(new_img, offset)




    #new_img2 = Image.blend(new_img, base_img, 1)

    timename = time.strftime("%Y%m%d-%H%M%S")
    #filename = timename+".png"
    filename = timename
    #new_img.save(filename,"PNG")

    img_base.save("cycle2/"+filename+".png","PNG")

    #count = count +1
    return img_base

# 2- GOOD RANDOM resize and crop  Sepia experiment
import PIL
from PIL import Image, ImageOps
import random, os
import time

import random, os

count = 0
while (count < 30):


    path = r"/home/jack/Desktop/deep-dream-generator/notebooks/test/"
    random_filename = random.choice([
        x for x in os.listdir(path)
        if os.path.isfile(os.path.join(path, x))
    ])

    img1 = path+"/"+random_filename
    im1=Image.open(img1)
    basewidth = 1040
    img = Image.open(img1)
    wpercent = (basewidth / float(img.size[0]))
    hsize = int((float(img.size[1]) * float(wpercent)))
    img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
    half_the_width = img.size[0] / 2
    half_the_height = img.size[1] / 2
    im = img.crop(
        (
            half_the_width - 520,
            half_the_height - 520,
            half_the_width + 520,
            half_the_height + 520
        )
    )




    # GOOD WORKING TURNS IMAGE SEPIA


    def make_linear_ramp(white):
        # putpalette expects [r,g,b,r,g,b,...]
        ramp = []
        r, g, b = white
        for i in range(255):
            ramp.extend((r*i/255, g*i/255, b*i/255))
        return ramp
    # make sepia ramp (tweak color as necessary)
    sepia = make_linear_ramp((255, 240, 192))

    #imgo=Image.open("newimage.png", "r")
    #im = Image.open(img1S, 'r')
    #img_w, img_h = imgo.size
    #background = Image.new('RGBA', (1440, 900), (255, 255, 255, 255))

    # convert to grayscale
    if im.mode != "L":
        im = im.convert("L")

    # optional: apply contrast enhancement here, e.g.
    im = ImageOps.autocontrast(im)

    # apply sepia palette
    im.putpalette(sepia)

    # convert back to RGB so we can save it as JPEG
    # (alternatively, save it in PNG or similar)
    #im = im.convert("RGB")

    #im.save("file.jpg")
    timename = time.strftime("%Y%m%d-%H%M%S")
    #filename = timename+".png"
    filename = timename
    #new_img.save(filename,"PNG")

    #background.save("STUFF/"+filename+".png","PNG")
    im.save("TEMP-img4.png","PNG")


    #img4.save("TEMP-img4.png")


    path2 = r"/home/jack/Desktop/deep-dream-generator/notebooks/test/"
    #path2 = r"bugs/deco/"
    random_filename2 = random.choice([
        y for y in os.listdir(path2)
        if os.path.isfile(os.path.join(path2, y))
    ])

    img1a = path2+"/"+random_filename2
    im1a=Image.open(img1a)
    basewidth = 1200
    imga = Image.open(img1a)
    wpercent = (basewidth / float(imga.size[0]))
    #hsize = int((float(img.size[1]) * float(wpercent)))
    hsize = basewidth
    imga = imga.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
    half_the_width = imga.size[0] / 2
    half_the_height = imga.size[1] / 2
    img4a = imga.crop(
        (
            half_the_width - 520,
            half_the_height - 520,
            half_the_width + 520,
            half_the_height + 520
        )
    )
    img4a.save("TEMP-img4a.png")
    img1 = "TEMP-img4.png"
    img2 = "TEMP-img4a.png"

    from PIL import Image
    #im1=Image.open(img1)
    #im1.size # (width,height) tuple
    #im2=Image.open(img2)
    #im2.size # (width,height) tuple
    background = Image.open(img1)
    overlay = Image.open(img2)

    #background = Image.open(img2)
    background = background.convert("RGBA")
    #overlay = Image.open(img2)
    overlay = overlay.convert("RGBA")

    new_img = Image.blend(background, overlay, 0.5)



    timename = time.strftime("%Y%m%d-%H%M%S")
    #filename = timename+".png"
    filename = timename
    #new_img.save(filename,"PNG")

    new_img.save("/home/jack/Desktop/deep-dream-generator/notebooks/ManRay_temp/"+filename+".png","PNG")
return new_image
count = count +1

# 4- GooD -EXPERIMENT
import PIL
from PIL import Image
from PIL import Image
import random, os
from PIL import Image
import time
import random, os
count = 0
while (count < 30):



    path = r"/home/jack/Desktop/deep-dream-generator/notebooks/test"
    random_filename = random.choice([
        x for x in os.listdir(path)
        if os.path.isfile(os.path.join(path, x))
    ])

    img1 = path+"/"+random_filename
    im1=Image.open(img1)

    basewidth = 1040
    img = Image.open(img1)
    wpercent = (basewidth / float(img.size[0]))
    #hsize = int((float(img.size[1]) * float(wpercent)))
    hsize = basewidth
    img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
    half_the_width = img.size[0] / 2
    half_the_height = img.size[1] / 2
    img4 = img.crop(
        (
            half_the_width - 520,
            half_the_height - 520,
            half_the_width + 520,
            half_the_height + 520
        )
    )
    #img4.save("TEMP-img4.png")



    path2 = "/home/jack/Desktop/deep-dream-generator/notebooks/test"
    random_filename2 = random.choice([
        y for y in os.listdir(path2)
        if os.path.isfile(os.path.join(path2, y))
    ])

    img1a = path2+"/"+random_filename2
    im1a=Image.open(img1a)
    basewidth = 1040
    imga = Image.open(img1a)
    wpercent = (basewidth / float(imga.size[0]))
    hsize = int((float(img.size[1]) * float(wpercent)))
    imga = imga.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
    #half_the_width = imga.size[0] / 2
    #half_the_height = imga.size[1] / 2
    from random import randint
    x1=(randint(1, 520-count))
    x2=(randint(1, 520-count))
    x3=(randint(x1, 1039-count))
    x4=(randint(x2, 1039-count))

    img4a = imga.crop(
        (
            x1,
            x2,
            x3,
            x4,
        )
    )
    img4a.save("TEMP-img4a.png")
    img1 = "TEMP-img4.png"
    img2 = "TEMP-img4a.png"

    from PIL import Image
    #im1=Image.open(img1)
    #im1.size # (width,height) tuple
    #im2=Image.open(img2)
    #im2.size # (width,height) tuple
    background = Image.open(img1)
    overlay = Image.open(img2)

    #background = Image.open(img2)
    background = background.convert("RGBA")
    #overlay = Image.open(img2)
    #overlay = overlay.convert("RGBA")
    overlay = overlay.convert("RGBA")

    bg_w, bg_h = background.size
    ctr1=random.randint(50, 700)
    ctr2=random.randint(50, 700)

    offset = (ctr1-200, ctr2-200)

    #image=Image.open("star_blue.png")
    #Alpha=(randint(4, 9))*0.1
    bands=list(overlay.split())
    if len(bands)==4:
        bands[3]=bands[3].point(lambda x:x*1)
        new_image=Image.merge(overlay.mode,bands)

    #new_img = Image.blend(background, overlay, 0.3)
    background.paste(new_image, offset)

    timename = time.strftime("%Y%m%d-%H%M%S")
    #filename = timename+".png"
    filename = timename
    #new_img.save(filename,"PNG")
    #background.save("STUFF/experiment/TEMP-img4a.png","PNG")
    background.save("/home/jack/Desktop/deep-dream-generator/notebooks/ManRay_temp/XXXexperiment.png","PNG")
    time.sleep(1.5)    #
count=count+1

# 4- GooD -EXPERIMENT
#KEE
import PIL
from PIL import Image
from PIL import Image
import random, os
from PIL import Image
import time
import random, os
count = 0
while (count < 30):



    path = r"bugs/spiders/"
    random_filename = random.choice([
        x for x in os.listdir(path)
        if os.path.isfile(os.path.join(path, x))
    ])

    img1 = path+"/"+random_filename
    im1=Image.open(img1)

    basewidth = 1040
    img = Image.open(img1)
    wpercent = (basewidth / float(img.size[0]))
    hsize = int((float(img.size[1]) * float(wpercent)))
    hsize = basewidth
    img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
    half_the_width = img.size[0] / 2
    half_the_height = img.size[1] / 2
    img4 = img.crop(
        (
            half_the_width - 520,
            half_the_height - 520,
            half_the_width + 520,
            half_the_height + 520
        )
    )
    img4.save("TEMP-img4.png")



    path2 = "bugs/vintage-labels/"
    random_filename2 = random.choice([
        y for y in os.listdir(path2)
        if os.path.isfile(os.path.join(path2, y))
    ])

    img1a = path2+"/"+random_filename2
    im1a=Image.open(img1a)
    
    inter= 500-(count*3)
    side=(randint(1, 70))
    sidea=(randint(1, inter))
    sideb= side+sidea
    img4a = im1a.resize((sidea,sideb), PIL.Image.ANTIALIAS)
    
    
    
    
    
    
    
    
  
    #basewidth = x1
    #imga = Image.open(img1a)
    #wpercent = (basewidth / float(imga.size[0]))
    #hsize = int((float(img.size[1]) * float(wpercent)))
    #img4a = imga.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
    #half_the_width = imga.size[0] / 2
    #half_the_height = imga.size[1] / 2
    from random import randint
    x1=(randint(1, 520-count))
    
    img4a.save("TEMP-img4a.png")
    img1 = "TEMP-img4.png"
    img2 = "TEMP-img4a.png"

    from PIL import Image
    #im1=Image.open(img1)
    #im1.size # (width,height) tuple
    #im2=Image.open(img2)
    #im2.size # (width,height) tuple
    background = Image.open(img1)
    overlay = Image.open(img2)

    #background = Image.open(img2)
    background = background.convert("RGBA")
    #overlay = Image.open(img2)
    #overlay = overlay.convert("RGBA")
    overlay = overlay.convert("RGBA")

    bg_w, bg_h = background.size
    ctr1=random.randint(1, 900)
    ctr2=random.randint(1, 900)

    offset = (ctr1-200, ctr2-200)

    #image=Image.open("star_blue.png")
    #Alpha=(randint(4, 9))*0.1
    bands=list(overlay.split())
    if len(bands)==4:
        bands[3]=bands[3].point(lambda x:x*1)
        new_image=Image.merge(overlay.mode,bands)

    #new_img = Image.blend(background, overlay, 0.3)
    background.paste(new_image, offset)

    timename = time.strftime("%Y%m%d-%H%M%S")
    #filename = timename+".png"
    filename = timename
    #new_img.save(filename,"PNG")
    #background.save("STUFF/experiment/TEMP-img4a.png","PNG")
    background.save("/home/jack/Desktop/deep-dream-generator/notebooks/ManRay_temp/experiment9.png","PNG")
    time.sleep(1.5)    #
count=count+1

# 4- GooD -EXPERIMENT
import PIL
from PIL import Image
from PIL import Image
import random, os
from PIL import Image
import time
path = r"bugs/nouveau/"
import random, os
random_filename = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
])

img1 = path+"/"+random_filename
im1=Image.open(img1)

basewidth = 1040
img = Image.open(img1)
wpercent = (basewidth / float(img.size[0]))
#hsize = int((float(img.size[1]) * float(wpercent)))
hsize = basewidth
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
half_the_width = img.size[0] / 2
half_the_height = img.size[1] / 2
img4 = img.crop(
    (
        half_the_width - 520,
        half_the_height - 520,
        half_the_width + 520,
        half_the_height + 520
    )
)
img4.save("TEMP-img4.png")



path2 = r"bugs/advertisements/"
random_filename2 = random.choice([
    y for y in os.listdir(path2)
    if os.path.isfile(os.path.join(path2, y))
])

img1a = path2+"/"+random_filename2
im1a=Image.open(img1a)
basewidth = 1040
imga = Image.open(img1a)
wpercent = (basewidth / float(imga.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
imga = imga.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
#half_the_width = imga.size[0] / 2
#half_the_height = imga.size[1] / 2
from random import randint
x1=(randint(22, 520))
x2=(randint(22, 520))
x3=(randint(x1+50, 1039))
x4=(randint(x2+50, 1039))

img4a = imga.crop(
    (
        x1,
        x2,
        x3,
        x4,
    )
)
img4a.save("TEMP-img4a.png")
img1 = "TEMP-img4.png"
img2 = "TEMP-img4a.png"

from PIL import Image
#im1=Image.open(img1)
#im1.size # (width,height) tuple
#im2=Image.open(img2)
#im2.size # (width,height) tuple
background = Image.open(img1)
overlay = Image.open(img2)

#background = Image.open(img2)
background = background.convert("RGBA")
#overlay = Image.open(img2)
#overlay = overlay.convert("RGBA")
overlay = overlay.convert("RGBA")

bg_w, bg_h = background.size
ctr1=random.randint(1, 800)
ctr2=random.randint(1, 800)






offset = (ctr1, ctr2)


#image=Image.open("star_blue.png")
Alpha=(randint(1, 9))*0.1
bands=list(overlay.split())
if len(bands)==4:
    bands[3]=bands[3].point(lambda x:x*Alpha)
    new_image=Image.merge(overlay.mode,bands)