-

NC = cv2.cvtColor(col, cv2.COLOR_BAYER_BG2BGR)

cv2.imshow(NC)

from PIL import Image
from PIL import ImageFont
from PIL import ImageDraw
from PIL import ImageEnhance
import cv2

fnt = ImageFont.truetype("/home/jack/.fonts/LuckiestGuy.ttf",35)
img1 = Image.new("RGBA", 100, 100, color=(0, 0, 0, 230)) #RGBA
dr1 = ImageDraw.Draw(img1)
dr1.text((5, 5), "some text", font=fnt)

# my source image
my_img.paste(dr1, (10, 10))
my_img.save("images/out_file.png", "PNG")

img=Image.new("RGBA", (675,640),(0,0,100))
img

from PIL import Image, ImageFont, ImageDraw
img1 = Image.new("RGBA", (675, 640), color=(0, 0, 0, 0))
dr1 = ImageDraw.Draw(img1)
fnt = ImageFont.truetype("/home/jack/.fonts/LuckiestGuy.ttf",35)
dr1.text((330, 15), "some text", font=fnt, fill=(255, 255, 0, 128))
#img1.show()
img1.save('images/test_out.png')
img1

#img = Image.open("images/hicks-mask.png")
#img = cv2.imread("images/hicks-mask.png")
from PIL import Image
from PIL import ImageDraw

im = Image.new("P", (400, 400), 0)

im.putpalette([
    0, 0, 0, # black background
    255, 0, 0, # index 1 is red
    255, 255, 0, # index 2 is yellow
    255, 153, 0, # index 3 is orange
])

d = ImageDraw.ImageDraw(im)
d.setfill(1)

d.setink(1)
d.polygon((0, 0, 0, 400, 400, 400))

d.setink(3)
d.rectangle((100, 100, 300, 300))

d.setink(2)
d.ellipse((120, 120, 280, 280))

im.save("images/pallet-out.png")
!showme images/pallet-out.png

!mkdir gifs

import cv2
import numpy as np
from PIL import Image
#cap = Image.open('images/face_300.jpg')
cap = cv2.imread('images/face_300.jpg')
#cap = cv2.imread('images/test-color.png')
frame = cap
for i in range(0,200):# Take each frame
    
    # Convert BGR to HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    cv2.imwrite("gifs/"+inc+"face-hsv.png", hsv)
    lower_red = np.array([i,0,200-i])
    upper_red = np.array([255-i,i,255])
    # Threshold the HSV image to get only blue colors
    mask = cv2.inRange(hsv, lower_red, upper_red)
    frame = cv2.inRange(hsv, lower_red, upper_red)
    # Bitwise-AND mask and original image
    res = cv2.bitwise_and(frame,frame, mask= mask)
    hsv = cv2.cvtColor(res, cv2.COLOR_BGR2HSV)
    inc=str(i)
    cv2.imwrite("gifs/"+inc+"face-frame.png", frame)
    cv2.imwrite("gifs/"+inc+"face-mask.png", mask)
    cv2.imwrite("gifs/"+inc+"face-hsv.png", hsv)
    cv2.imwrite("gifs/"+inc+"face-res.png", res)
    



import numpy as np
import cv2

img = cv2.imread('/home/jack/Desktop/dockercommands/preped_images/Content_14427orig.jpg')
height, width = img.shape[:2] 
   
img_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV) 
    
lower_green = (35,45,0,0) 
upper_green = (80, 255, 255,0) 
img_mask = cv2.inRange(img_hsv, lower_green, upper_green)
img_result = cv2.bitwise_and(img, img, mask = img_mask)[:, :, 1]

img[:, :, 0] = 0
img[:, :, 2] = 0
img[:, :, 1] = img_result

inc=str(10)
cv2.imwrite("gifs/"+inc+"img_result.png", img_result)
cv2.imwrite("gifs/"+inc+"img_hsv.png", img_hsv)


#!/usr/bin/env python3
from PIL import Image

def quantizetopalette(silf, palette, dither=False):
    """Convert an RGB or L mode image to use a given P image's palette."""

    silf.load()

    # use palette from reference image
    palette.load()
    if palette.mode != "P":
        raise ValueError("bad mode for palette image")
    if silf.mode != "RGB" and silf.mode != "L":
        raise ValueError(
            "only RGB or L mode images can be quantized to a palette"
            )
    im = silf.im.convert("P", 1 if dither else 0, palette.im)
    # the 0 above means turn OFF dithering

    # Really old versions of Pillow (before 4.x) have _new
    # under a different name
    try:
        return silf._new(im)
    except AttributeError:
        return silf._makeself(im)

# putpalette() input is a sequence of [r, g, b, r, g, b, ...]
# The data chosen for this particular answer represent
# the four gray values in a game console's palette
palettedata = [0, 0, 0, 102, 102, 102, 176, 176, 176, 255, 255, 255]
# Fill the entire palette so that no entries in Pillow's
# default palette for P images can interfere with conversion
NUM_ENTRIES_IN_PILLOW_PALETTE = 256
num_bands = len("RGB")
num_entries_in_palettedata = len(palettedata) // num_bands
palettedata.extend(palettedata[:num_bands]
                   * (NUM_ENTRIES_IN_PILLOW_PALETTE
                      - num_entries_in_palettedata))
# Create a palette image whose size does not matter
arbitrary_size = 16, 16
palimage = Image.new('P', arbitrary_size)
palimage.putpalette(palettedata)

# Perform the conversion
oldimage = Image.open("/home/jack/Desktop/dockercommands/preped_images/Content_14427orig.jpg")
newimage = quantizetopalette(oldimage, palimage, dither=False)
newimage.show()


from PIL import Image
palettedata = [0, 0, 0, 102, 102, 102, 176, 176, 176, 255, 255, 255]
palimage = Image.new('P', (16, 16))
palimage.putpalette(palettedata * 64)
oldimage = Image.open("/home/jack/Desktop/dockercommands/preped_images/Content_12804orig.jpg")
newimage = oldimage.quantize(palette=palimage,  dither=False)
newimage.show()

!ls -rant images


from skimage import data, color, io, img_as_float
import numpy as np
import matplotlib.pyplot as plt

alpha = 0.6
#img = Image.open("images/hicks-mask.png")
img = cv2.imread("images/hicks-mask.png")

#img = img_as_float(data.camera())
#rows, cols = img.shape

# Construct a colour image to superimpose
color_mask = np.zeros((rows, cols, 3))
color_mask[30:140, 30:140] = [1, 0, 0]  # Red block
color_mask[170:270, 40:120] = [0, 1, 0] # Green block
color_mask[200:350, 200:350] = [0, 0, 1] # Blue block

# Construct RGB version of grey-level image
img_color = np.dstack((img, img, img))

# Convert the input image and color mask to Hue Saturation Value (HSV)
# colorspace
img_hsv = color.rgb2hsv(img_color)
color_mask_hsv = color.rgb2hsv(color_mask)

# Replace the hue and saturation of the original image
# with that of the color mask
img_hsv[..., 0] = color_mask_hsv[..., 0]
img_hsv[..., 1] = color_mask_hsv[..., 1] * alpha

img_masked = color.hsv2rgb(img_hsv)

# Display the output
f, (ax0, ax1, ax2) = plt.subplots(1, 3,
                                  subplot_kw={'xticks': [], 'yticks': []})
ax0.imshow(img, cmap=plt.cm.gray)
ax1.imshow(color_mask)
ax2.imshow(img_masked)
plt.show()

import cv2
r = cv2.imread("images/S-hicks01.jpg")
r2 = cv2.imread("images/S-hicks02.jpg")
r3 = cv2.imread("images/waves.jpg")