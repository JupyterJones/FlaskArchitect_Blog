-
#offset = ((bg_w - ctr1), (bg_h - ctr2))






#new_img = Image.blend(background, overlay, 0.3)
background.paste(new_image, offset)

timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")
#background.save("STUFF/experiment/TEMP-img4a.png","PNG")
background.save("STUFF/savers/"+filename+".png","PNG")

# emboss -EXPERIMENT
import PIL

from PIL import Image, ImageFilter
import random, os
from PIL import Image
import time
path = r"bugs/Bosch-Earthly Delights/"
random_filename = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
])

img1 = path+"/"+random_filename
im1=Image.open(img1)
basewidth = 1024
img = Image.open(img1)
wpercent = (basewidth / float(img.size[0]))
hsize = basewidth
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
half_the_width = img.size[0] / 2
half_the_height = img.size[1] / 2
img4 = img.crop(
    (
        half_the_width - 520,
        half_the_height - 520,
        half_the_width + 520,
        half_the_height + 520
    )
)
img4.save("TEMP-img4.png")



path2 = r"STUFF/"
random_filename2 = random.choice([
    y for y in os.listdir(path2)
    if os.path.isfile(os.path.join(path2, y))
])

img1a = path2+"/"+random_filename2
im1a=Image.open(img1a)
basewidth = 1200
imga = Image.open(img1a)
wpercent = (basewidth / float(imga.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
imga = imga.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
half_the_width = imga.size[0] / 2
half_the_height = imga.size[1] / 2
from random import randint
x1=(randint(12, 356))
x2=(randint(12, 356))
x3=(randint(360, 600))
x4=(randint(360, 600))

img4a = imga.crop(
    (
        half_the_width - 520+x1,
        half_the_height - 520+x2,
        half_the_width + 520+x3,
        half_the_height + 520+x4
    )
)


#img4a.save("TEMP-img4a.png")
#image = Image.open('img4aS-001.png')
img4 = img4a.filter(ImageFilter.BLUR)
img4.save('TEMP-img4a.png') 





img1 = "TEMP-img4.png"
img2 = "TEMP-img4a.png"

from PIL import Image
#im1=Image.open(img1)
#im1.size # (width,height) tuple
#im2=Image.open(img2)
#im2.size # (width,height) tuple
background = Image.open(img1)
overlay = Image.open(img2)

#background = Image.open(img2)
background = background.convert("RGBA")
#overlay = Image.open(img2)
overlay = overlay.convert("RGBA")
bg_w, bg_h = background.size
ctr1=random.randint(1, 611)-100
ctr2=random.randint(1, 611)-100

#offset = ((bg_w - ctr1), (bg_h - ctr2))

offset = (ctr1, ctr2)

#new_img = Image.blend(background, overlay, 0.3)
background.paste(overlay, offset)

timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")

background.save("STUFF/"+filename+".png","PNG")

# 3 -GOOD RANDOM resize and crop
import PIL
from PIL import Image
from PIL import Image
import random, os
from PIL import Image
import time
path = r"bugs/manuscript/"
import random, os
random_filename = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
])

img1 = path+"/"+random_filename
im1=Image.open(img1)
longer_side = max(im1.size)
basewidth = longer_side
img = Image.open(img1)
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
half_the_width = img.size[0] / 2
half_the_height = img.size[1] / 2
img4 = img.crop(
    (
        half_the_width - 320,
        half_the_height - 320,
        half_the_width + 320,
        half_the_height + 320
    )
)
img4.save("TEMP-img4.png")



path2 = r"bugs/nouveau/"
random_filename2 = random.choice([
    y for y in os.listdir(path2)
    if os.path.isfile(os.path.join(path2, y))
])

img1a = path2+"/"+random_filename2
im1a=Image.open(img1a)
basewidth = 1200
imga = Image.open(img1a)
wpercent = (basewidth / float(imga.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
imga = imga.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
half_the_width = imga.size[0] / 2
half_the_height = imga.size[1] / 2
img4a = imga.crop(
    (
        half_the_width - 320,
        half_the_height - 320,
        half_the_width + 320,
        half_the_height + 320
    )
)
img4a.save("TEMP-img4a.png")
img1 = "TEMP-img4.png"
img2 = "TEMP-img4a.png"

from PIL import Image
#im1=Image.open(img1)
#im1.size # (width,height) tuple
#im2=Image.open(img2)
#im2.size # (width,height) tuple
background = Image.open(img1)
overlay = Image.open(img2)

#background = Image.open(img2)
background = background.convert("RGBA")
#overlay = Image.open(img2)
overlay = overlay.convert("RGBA")
Alpha=(randint(1, 9))*0.1
new_img = Image.blend(background, overlay, Alpha)



timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")

new_img.save("STUFF/"+filename+".png","PNG")

# 5 - do not touch working fine
#from PIL import Image
#img = Image.open('800px-Tioman_Rainforest_.jpg', 'r')
import PIL.Image
import time
pathS = r"bugs/nouveau/"
import random, os
random_filenameS = random.choice([
    x for x in os.listdir(pathS)
    if os.path.isfile(os.path.join(pathS, x))
])
img1S = pathS+"/"+random_filenameS
#imgo=Image.open("newimage.png", "r")
imgo = Image.open(img1S, 'r')
img_w, img_h = imgo.size
#background = Image.new('RGBA', (1440, 900), (255, 255, 255, 255))

from PIL import Image

path2S = r"STUFF/"
random_filename2S = random.choice([
    yS for yS in os.listdir(path2S)
    if os.path.isfile(os.path.join(path2S, yS))
])

img1aS = path2S+"/"+random_filename2S
im1aS=Image.open(img1aS)
basewidthS = 1200
imgaS = Image.open(img1aS)
wpercent = (basewidthS / float(imgaS.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
imgaS = imgaS.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
half_the_width = imgaS.size[0] / 2
half_the_height = imgaS.size[1] / 2
from random import randint
x1=(randint(+120, +360))
x2=(randint(+120, +360))
x3=(randint(+120, +360))
x4=(randint(+120, +360))
img4aS = imgaS.crop(
    (
        half_the_width - x1,
        half_the_height - x2,
        half_the_width + x3,
        half_the_height + x4
    )
)
img4aS.save('img4aS-001.png')

#background = Image.open(img4aS)
background = Image.open("img4aS-001.png")
ctr1=(randint(1, img_w))
ctr2=(randint(1, img_h))
bg_w, bg_h = background.size
offset = ((bg_w - ctr1), (bg_h - ctr2))



#offset = ((bg_w - img_w) /2, (bg_h - img_h) / 2)
background.paste(imgo, offset)
#background.save('overlay001.png')
#do not touch working fine


timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")

#background.save("STUFF/"+filename+".png","PNG")
background.save("STUFF/new7/"+filename+".png","PNG")

# 6 - do not touch working fine
#from PIL import Image
#img = Image.open('800px-Tioman_Rainforest_.jpg', 'r')
import PIL.Image
import time
pathS = r"bugs/manuscript/"
import random, os
random_filenameS = random.choice([
    x for x in os.listdir(pathS)
    if os.path.isfile(os.path.join(pathS, x))
])
img1S = pathS+"/"+random_filenameS
#imgo=Image.open("newimage.png", "r")
imgo = Image.open(img1S, 'r')
img_w, img_h = imgo.size
#background = Image.new('RGBA', (1440, 900), (255, 255, 255, 255))

from PIL import Image

path2S = r"STUFF/"
random_filename2S = random.choice([
    yS for yS in os.listdir(path2S)
    if os.path.isfile(os.path.join(path2S, yS))
])

img1aS = path2S+"/"+random_filename2S
im1aS=Image.open(img1aS)
basewidthS = 1200
imgaS = Image.open(img1aS)
wpercent = (basewidthS / float(imgaS.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
imgaS = imgaS.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
half_the_width = imgaS.size[0] / 2
half_the_height = imgaS.size[1] / 2
from random import randint
x1=(randint(+120, +360))
x2=(randint(+120, +360))
x3=(randint(+120, +360))
x4=(randint(+120, +360))
img4aS = imgaS.crop(
    (
        half_the_width - x1,
        half_the_height - x2,
        half_the_width + x3,
        half_the_height + x4
    )
)
img4aS.save('img4aS-001.png')

#background = Image.open(img4aS)
background = Image.open("img4aS-001.png")
ctr1=(randint(1, img_w))
ctr2=(randint(1, img_h))
bg_w, bg_h = background.size
offset = ((bg_w - ctr1), (bg_h - ctr2))



#offset = ((bg_w - img_w) /2, (bg_h - img_h) / 2)
background.paste(imgo, offset)
#background.save('overlay001.png')
#do not touch working fine


timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")

#background.save("STUFF/"+filename+".png","PNG")
background.save("STUFF/new7/"+filename+".png","PNG")

# 7 do not touch working fine
#from PIL import Image
#img = Image.open('800px-Tioman_Rainforest_.jpg', 'r')
import PIL.Image
import time
pathS = r"bugs/manuscript/"
import random, os
random_filenameS = random.choice([
    x for x in os.listdir(pathS)
    if os.path.isfile(os.path.join(pathS, x))
])
img1S = pathS+"/"+random_filenameS
#imgo=Image.open("newimage.png", "r")
imgo = Image.open(img1S, 'r')
img_w, img_h = imgo.size
#background = Image.new('RGBA', (1440, 900), (255, 255, 255, 255))

from PIL import Image

path2S = r"STUFF/new/"
random_filename2S = random.choice([
    yS for yS in os.listdir(path2S)
    if os.path.isfile(os.path.join(path2S, yS))
])

img1aS = path2S+"/"+random_filename2S
im1aS=Image.open(img1aS)
basewidthS = 1200
imgaS = Image.open(img1aS)
wpercent = (basewidthS / float(imgaS.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
imgaS = imgaS.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
half_the_width = imgaS.size[0] / 2
half_the_height = imgaS.size[1] / 2
from random import randint
x1=(randint(+120, +360))
x2=(randint(+120, +360))
x3=(randint(+120, +360))
x4=(randint(+120, +360))
img4aS = imgaS.crop(
    (
        half_the_width - x1,
        half_the_height - x2,
        half_the_width + x3,
        half_the_height + x4
    )
)
img4aS.save('img4aS-001.png')

#background = Image.open(img4aS)
background = Image.open("img4aS-001.png")
ctr1=(randint(1, img_w))
ctr2=(randint(1, img_h))
bg_w, bg_h = background.size
offset = ((bg_w - ctr1), (bg_h - ctr2))



#offset = ((bg_w - img_w) /2, (bg_h - img_h) / 2)
background.paste(imgo, offset)
#background.save('overlay001.png')
#do not touch working fine


timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")

#background.save("STUFF/"+filename+".png","PNG")
background.save("STUFF/new7/"+filename+".png","PNG")

# 8 do not touch working fine
#from PIL import Image
#img = Image.open('800px-Tioman_Rainforest_.jpg', 'r')
import PIL.Image
import time
pathS = r"bugs/bookdecade1880/"
import random, os
random_filenameS = random.choice([
    x for x in os.listdir(pathS)
    if os.path.isfile(os.path.join(pathS, x))
])
img1S = pathS+"/"+random_filenameS
#imgo=Image.open("newimage.png", "r")
imgo = Image.open(img1S, 'r')
img_w, img_h = imgo.size
#background = Image.new('RGBA', (1440, 900), (255, 255, 255, 255))

from PIL import Image

path2S = r"bugs/fairytales"
random_filename2S = random.choice([
    yS for yS in os.listdir(path2S)
    if os.path.isfile(os.path.join(path2S, yS))
])

img1aS = path2S+"/"+random_filename2S
im1aS=Image.open(img1aS)
basewidthS = 1200
imgaS = Image.open(img1aS)
wpercent = (basewidthS / float(imgaS.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
imgaS = imgaS.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
half_the_width = imgaS.size[0] / 2
half_the_height = imgaS.size[1] / 2
from random import randint
x1=(randint(+120, +360))
x2=(randint(+120, +360))
x3=(randint(+120, +360))
x4=(randint(+120, +360))
img4aS = imgaS.crop(
    (
        half_the_width - x1,
        half_the_height - x2,
        half_the_width + x3,
        half_the_height + x4
    )
)

#half_the_width - 320,
#half_the_height - 320,
#half_the_width + 320,
#half_the_height + 320




img4aS.save('img4aS-001.png')

#background = Image.open(img4aS)
background = Image.open("img4aS-001.png")
ctr1=(randint(1, img_w))
ctr2=(randint(1, img_h))
bg_w, bg_h = background.size
offset = ((bg_w - ctr1), (bg_h - ctr2))



#offset = ((bg_w - img_w) /2, (bg_h - img_h) / 2)
background.paste(imgo, offset)
#background.save('overlay001.png')
#do not touch working fine


timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")

#background.save("STUFF/"+filename+".png","PNG")
background.save("STUFF/new7/"+filename+".png","PNG")

# 9 do not touch working fine

#work on this 


#from PIL import Image
#img = Image.open('800px-Tioman_Rainforest_.jpg', 'r')
import PIL.Image
import time
pathS = r"bugs/bookdecade1880/"
import random, os
random_filenameS = random.choice([
    x for x in os.listdir(pathS)
    if os.path.isfile(os.path.join(pathS, x))
])
img1S = pathS+"/"+random_filenameS
#imgo=Image.open("newimage.png", "r")
imgo = Image.open(img1S, 'r')
img_w, img_h = imgo.size
#background = Image.new('RGBA', (1440, 900), (255, 255, 255, 255))

from PIL import Image

path2S = r"bugs/bookdecade1880"
random_filename2S = random.choice([
    yS for yS in os.listdir(path2S)
    if os.path.isfile(os.path.join(path2S, yS))
])

img1aS = path2S+"/"+random_filename2S
im1aS=Image.open(img1aS)
basewidthS = 1200
imgaS = Image.open(img1aS)
wpercent = (basewidthS / float(imgaS.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
imgaS = imgaS.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
half_the_width = imgaS.size[0] / 2
half_the_height = imgaS.size[1] / 2
from random import randint
x1=(randint(+120, +360))
x2=(randint(+120, +360))
x3=(randint(+120, +360))
x4=(randint(+120, +360))
img4aS = imgaS.crop(
    (
        half_the_width - x1,
        half_the_height - x2,
        half_the_width + x3,
        half_the_height + x4
    )
)

#half_the_width - 320,
#half_the_height - 320,
#half_the_width + 320,
#half_the_height + 320




img4aS.save('img4aS-001.png')

#background = Image.open(img4aS)
background = Image.open("img4aS-001.png")
ctr1=(randint(1, img_w))
ctr2=(randint(1, img_h))
bg_w, bg_h = background.size
offset = ((bg_w - ctr1), (bg_h - ctr2))



#offset = ((bg_w - img_w) /2, (bg_h - img_h) / 2)
background.paste(imgo, offset)
#background.save('overlay001.png')
#do not touch working fine


timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")

#background.save("STUFF/"+filename+".png","PNG")
background.save("STUFF/"+filename+".png","PNG")

#do not touch working fine
#from PIL import Image
#img = Image.open('800px-Tioman_Rainforest_.jpg', 'r')
import PIL.Image
import time
pathS = r"STUFF/"
import random, os
random_filenameS = random.choice([
    x for x in os.listdir(pathS)
    if os.path.isfile(os.path.join(pathS, x))
])
img1S = pathS+"/"+random_filenameS
#imgo=Image.open("newimage.png", "r")
imgo = Image.open(img1S, 'r')
img_w, img_h = imgo.size
#background = Image.new('RGBA', (1440, 900), (255, 255, 255, 255))

from PIL import Image

path2S = r"bugs/butterflies/"
random_filename2S = random.choice([
    yS for yS in os.listdir(path2S)
    if os.path.isfile(os.path.join(path2S, yS))
])

img1aS = path2S+"/"+random_filename2S
im1aS=Image.open(img1aS)
basewidthS = 1024
imgaS = Image.open(img1aS)
wpercent = (basewidthS / float(imgaS.size[0]))
#hsize = int((float(img.size[1]) * float(wpercent)))
hsize = basewidth
imgaS = imgaS.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
half_the_width = imgaS.size[0] / 2
half_the_height = imgaS.size[1] / 2
from random import randint
x1=(randint(+120, +360))
x2=(randint(+120, +360))
x3=(randint(+120, +360))
x4=(randint(+120, +360))
img4aS = imgaS.crop(
    (
        half_the_width - x1,
        half_the_height - x2,
        half_the_width + x3,
        half_the_height + x4
    )
)

#half_the_width - 320,
#half_the_height - 320,
#half_the_width + 320,
#half_the_height + 320




img4aS.save('img4aS-001.png')

#background = Image.open(img4aS)
background = Image.open("img4aS-001.png")
ctr1=(randint(1, img_w))
ctr2=(randint(1, img_h))
bg_w, bg_h = background.size
offset = ((bg_w - ctr1), (bg_h - ctr2))




#offset = ((bg_w - img_w) /2, (bg_h - img_h) / 2)
background.paste(imgo, offset)
#background.save('overlay001.png')
#do not touch working fine


timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")

#background.save("STUFF/"+filename+".png","PNG")
background.save("STUFF/new7/"+filename+".png","PNG")

# GOOD WORKING TURNS IMAGE SEPIA

from PIL import Image, ImageOps
def make_linear_ramp(white):
    # putpalette expects [r,g,b,r,g,b,...]
    ramp = []
    r, g, b = white
    for i in range(255):
        ramp.extend((r*i/255, g*i/255, b*i/255))
    return ramp
# make sepia ramp (tweak color as necessary)
sepia = make_linear_ramp((255, 240, 192))
pathS = r"bugs/deco/"
import random, os
random_filenameS = random.choice([
    x for x in os.listdir(pathS)
    if os.path.isfile(os.path.join(pathS, x))
])
img1S = pathS+"/"+random_filenameS
#imgo=Image.open("newimage.png", "r")
im = Image.open(img1S, 'r')
img_w, img_h = imgo.size
#background = Image.new('RGBA', (1440, 900), (255, 255, 255, 255))

# convert to grayscale
if im.mode != "L":
    im = im.convert("L")

# optional: apply contrast enhancement here, e.g.
im = ImageOps.autocontrast(im)

# apply sepia palette
im.putpalette(sepia)

# convert back to RGB so we can save it as JPEG
# (alternatively, save it in PNG or similar)
#im = im.convert("RGB")

#im.save("file.jpg")
timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")

#background.save("STUFF/"+filename+".png","PNG")
im.save("STUFF/sepia"+filename+".png","PNG")

from PIL import Image, ImageFilter
import random, os
path2S = r"STUFF"
random_filename2S = random.choice([
    yS for yS in os.listdir(path2S)
    if os.path.isfile(os.path.join(path2S, yS))
])
img1aS = path2S+"/"+random_filename2S
image=Image.open(img1aS)
#image = Image.open('img4aS-001.png')
image = image.filter(ImageFilter.CONTOUR)
#image.save('filters/CONTOUR.png') 
#im.save("file.jpg")
timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")
#background.save("STUFF/"+filename+".png","PNG")
image.save("STUFF/contour"+filename+".png","PNG")

from PIL import Image, ImageFilter
import random, os
path2S = r"bugs/fairytales/"
random_filename2S = random.choice([
    yS for yS in os.listdir(path2S)
    if os.path.isfile(os.path.join(path2S, yS))
])
img1aS = path2S+"/"+random_filename2S
image=Image.open(img1aS)
#image = Image.open('img4aS-001.png')
image = image.filter(ImageFilter.EDGE_ENHANCE)
#image.save('filters/CONTOUR.png') 
#im.save("file.jpg")
timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")
#background.save("STUFF/"+filename+".png","PNG")
image.save("STUFF/EDGE_ENHANCE"+filename+".png","PNG")

from PIL import Image, ImageFilter
import random, os
path2S = r"STUFF"
random_filename2S = random.choice([
    yS for yS in os.listdir(path2S)
    if os.path.isfile(os.path.join(path2S, yS))
])

img1aS = path2S+"/"+random_filename2S
image=Image.open(img1aS)
#image = Image.open('img4aS-001.png')
image = image.filter(ImageFilter.EDGE_ENHANCE_MORE)
#image.save('filters/CONTOUR.png') 
#im.save("file.jpg")
timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")
#background.save("STUFF/"+filename+".png","PNG")
saveas = "STUFF/EDGE_ENHANCE_MORE"+filename+".png
image.save(saveas,"PNG")
print saveas

from PIL import Image, ImageFilter
import random, os
path2S = r"STUFF"
random_filename2S = random.choice([
    yS for yS in os.listdir(path2S)
    if os.path.isfile(os.path.join(path2S, yS))
])

img1aS = path2S+"/"+random_filename2S
image=Image.open(img1aS)
#image = Image.open('img4aS-001.png')
image = image.filter(ImageFilter.DETAIL)
#image.save('filters/CONTOUR.png') 
#im.save("file.jpg")
timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")
#background.save("STUFF/"+filename+".png","PNG")
image.save("STUFF/DETAIL"+filename+".png","PNG")

from PIL import Image, ImageFilter
import random, os
path2S = r"STUFF"
random_filename2S = random.choice([
    yS for yS in os.listdir(path2S)
    if os.path.isfile(os.path.join(path2S, yS))
])

img1aS = path2S+"/"+random_filename2S
image=Image.open(img1aS)
#image = Image.open('img4aS-001.png')
image = image.filter(ImageFilter.FIND_EDGES)
#image.save('filters/CONTOUR.png') 
#im.save("file.jpg")
timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")
#background.save("STUFF/"+filename+".png","PNG")
image.save("STUFF/FIND_EDGES"+filename+".png","PNG")

from PIL import Image, ImageFilter
import random, os
path2S = r"STUFF"
random_filename2S = random.choice([
    yS for yS in os.listdir(path2S)
    if os.path.isfile(os.path.join(path2S, yS))
])

img1aS = path2S+"/"+random_filename2S
image=Image.open(img1aS)
#image = Image.open('img4aS-001.png')
image = image.filter(ImageFilter.EMBOSS)
#image.save('filters/CONTOUR.png') 
#im.save("file.jpg")
timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")
#background.save("STUFF/"+filename+".png","PNG")
image.save("STUFF/EMBOSS"+filename+".png","PNG")

from PIL import Image, ImageFilter
import random, os
path2S = r"STUFF"
random_filename2S = random.choice([
    yS for yS in os.listdir(path2S)
    if os.path.isfile(os.path.join(path2S, yS))
])

img1aS = path2S+"/"+random_filename2S
image=Image.open(img1aS)
#image = Image.open('img4aS-001.png')
image = image.filter(ImageFilter.SHARPEN)
#image.save('filters/CONTOUR.png') 
#im.save("file.jpg")
timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")
#background.save("STUFF/"+filename+".png","PNG")
image.save("STUFF/SHARPEN"+filename+".png","PNG")

from PIL import Image, ImageFilter
import random, os
path2S = r"bugs/spiders/"
random_filename2S = random.choice([
    yS for yS in os.listdir(path2S)
    if os.path.isfile(os.path.join(path2S, yS))
])

img1aS = path2S+"/"+random_filename2S
image=Image.open(img1aS)
#image = Image.open('img4aS-001.png')
image = image.filter(ImageFilter.SMOOTH)
#image.save('filters/CONTOUR.png') 
#im.save("file.jpg")
timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")
#background.save("STUFF/"+filename+".png","PNG")
image.save("STUFF/SMOOTH"+filename+".png","PNG")

import time
import random, os
from PIL import Image, ImageFilter
path2S = r"STUFF"
random_filename2S = random.choice([
    yS for yS in os.listdir(path2S)
    if os.path.isfile(os.path.join(path2S, yS))
])

img1aS = path2S+"/"+random_filename2S
image=Image.open(img1aS)
#image = Image.open('img4aS-001.png')
image = image.filter(ImageFilter.SMOOTH_MORE)
#image.save('filters/CONTOUR.png') 
#im.save("file.jpg")
timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")
#background.save("STUFF/"+filename+".png","PNG")
image.save("STUFF/SMOOTH_MORE"+filename+".png","PNG")

import sys
sys.path.insert(0, "/home/jack/anaconda2/envs/py27/lib/python2.7/site-packages")
import cv2
import time
import numpy as np
from matplotlib import pyplot as plt
import random, os
from PIL import Image, ImageFilter
path2S = r"STUFF"
random_filename2S = random.choice([
    yS for yS in os.listdir(path2S)
    if os.path.isfile(os.path.join(path2S, yS))
])
img1aS = path2S+"/"+random_filename2S
#image=Image.open(img1aS)
img = cv2.imread(img1aS,0)
edges = cv2.Canny(img,100,200)
plt.subplot(121),plt.imshow(img,cmap = 'gray')
plt.title('Original Image'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(edges,cmap = 'gray')
plt.title('Edge Image'), plt.xticks([]), plt.yticks([])
plt.show()
timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")
saveas = "STUFF/"+filename+'-Canny.png'
plt.savefig(saveas, bbox_inches='tight')
print saveas

!showme STUFF/20180509-132245Canny.png

import numpy as np
from scipy.misc import imread, imsave
import pylab as plt

from PIL import Image, ImageFilter
path2S = r"bugs/fairytales/"
random_filename2S = random.choice([
    yS for yS in os.listdir(path2S)
    if os.path.isfile(os.path.join(path2S, yS))
])

img1aS = path2S+"/"+random_filename2S
#image=Image.open(img1aS)

image_data = imread(img1aS).astype(np.float32)

#image_data = imread('img4aS-001.png').astype(np.float32)
scaled_image_data = image_data / 255.

print 'Size: ', image_data.size
print 'Shape: ', image_data.shape
  
image_slice_red =  scaled_image_data[:,:,0]
image_slice_green =  scaled_image_data[:,:,1]
image_slice_blue =  scaled_image_data[:,:,2]

#print 'Size: ', image_slice_0.size
#print 'Shape: ', image_slice_0.shape

plt.subplot(221)
plt.imshow(image_slice_red, cmap=plt.cm.Reds_r)

plt.subplot(222)
plt.imshow(image_slice_green, cmap=plt.cm.Greens_r)

plt.subplot(223)
plt.imshow(image_slice_blue, cmap=plt.cm.Blues_r)  

plt.subplot(224)
plt.imshow(scaled_image_data)  

#plt.show()
timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")


plt.savefig("STUFF/"+filename+'FOUR.png', bbox_inches='tight')

import numpy as np
from matplotlib import pyplot as plt
from random import randint
%matplotlib inline

w=(randint(50, 640))
h=(randint(50, 640))



random_image = np.random.random([w, h])

plt.imshow(random_image, cmap='gray', interpolation='nearest');
#plt.show()
timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")


plt.savefig("STUFF/"+filename+'noise.png', bbox_inches='tight')

# import the necessary packages
import numpy as np
import matplotlib.pyplot as plt
import cv2
from PIL import Image, ImageFilter
%matplotlib inline

#import numpy as np
#from matplotlib import pyplot as plt

img = cv2.imread('img4aS-001.png',0)

import matplotlib.pyplot as plt
img = cv2.imread("img4aS-001.png")
plt.imshow(img)

from PIL import Image
from resizeimage import resizeimage
import time
fd_img = open('img4aS-001.png', 'r')
img = Image.open(fd_img)
img = resizeimage.resize_cover(img, [512, 512])

timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")
img.save('STUFF/'+filename+'image-cover.png', img.format)
fd_img.close()

# GOOD RANDOM resize and crop
import PIL
from PIL import Image
import time
import random, os
from PIL import Image
path = r"bugs/advertisements-1/"
import random, os
random_filename = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
])

img1 = path+"/"+random_filename
im1=Image.open(img1)
basewidth = 1200
img = Image.open(img1)
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
half_the_width = img.size[0] / 2
half_the_height = img.size[1] / 2
img4 = img.crop(
    (
        half_the_width - 320,
        half_the_height - 320,
        half_the_width + 320,
        half_the_height + 320
    )
)
img4.save("aaaa_resized.jpg")



path2 = r"bugs/manuscript/"
random_filename2 = random.choice([
    y for y in os.listdir(path2)
    if os.path.isfile(os.path.join(path2, y))
])

img1a = path2+"/"+random_filename2
im1a=Image.open(img1a)
basewidth = 1200
imga = Image.open(img1a)
wpercent = (basewidth / float(imga.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
imga = imga.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
half_the_width = imga.size[0] / 2
half_the_height = imga.size[1] / 2
img4a = imga.crop(
    (
        half_the_width - 320,
        half_the_height - 320,
        half_the_width + 320,
        half_the_height + 320
    )
)
img4a.save("bbbb_resized.jpg")
img1 = "aaaa_resized.jpg"
img2 = "bbbb_resized.jpg"

from PIL import Image
#im1=Image.open(img1)
#im1.size # (width,height) tuple
#im2=Image.open(img2)
#im2.size # (width,height) tuple
background = Image.open(img1)
overlay = Image.open(img2)

#background = Image.open(img2)
background = background.convert("RGBA")
#overlay = Image.open(img2)
overlay = overlay.convert("RGBA")

new_img = Image.blend(background, overlay, 0.3)
#new_img.save("AA-BB-out.png","PNG")

timename = time.strftime("%Y%m%d-%H%M%S")
#filename = timename+".png"
filename = timename
#new_img.save(filename,"PNG")
new_img.save('STUFF/blend'+filename+'image-cover.png', img.format)

# encoding: utf-8
import operator
from PIL import Image
from PIL import ImageDraw
import time
import os, random

path = r"bugs/advertisements-1/"
random_filename = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
])

img1 = path+"/"+random_filename
im1=Image.open(img1)

folder2=r"bugs/manuscript/"
b=random.choice(os.listdir(folder2))
img2 = folder2+b
base = Image.open(img1)
baseO = base.resize((512, 512))
overlay = Image.open(img2)
overlayO = overlay.resize((512, 512))
#blend with alpha=0.5
result = Image.blend(baseO, overlayO, alpha=0.4)
timename = time.strftime("%Y%m%d-%H%M%S")
filename = timename+".jpg"
result.save("STUFF/"+filename)
print filename

from PIL import Image
basewidth = 140
import time
import os, random
folder=r"bugs/fairytales/"
a=random.choice(os.listdir(folder))
img1 = folder+a

img = Image.open(img1)
#wpercent = (basewidth / float(img.size[0]))
#hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, basewidth), PIL.Image.ANTIALIAS)
#img.save('STUFF/140.jpg') 


timename = time.strftime("%Y%m%d-%H%M%S")
filename = timename+".jpg"
img.save("STUFF/140"+filename)
print filename

# encoding: utf-8
import operator
from PIL import Image
from PIL import ImageDraw
import time
import os, random

folder=r"bugs/advertisements-1/"
a=random.choice(os.listdir(folder))
img1 = folder+a
#os.open(folder+"/"+a, os.O_RDWR)
folder2=r"bugs/manuscript/"
b=random.choice(os.listdir(folder2))
img2 = folder+a

background = Image.open(img1)
overlay = Image.open(img2)

background = Image.open(img1)
background = background.convert("RGBA")
overlay = Image.open(img2)
overlay = overlay.convert("RGBA")
new_img = Image.blend(background, overlay, 0.5)
timename = time.strftime("%Y%m%d-%H%M%S")
filename = timename+".png"

new_img.save(filename,"PNG")
print filename

print filename
# GOOD BLOCK
from matplotlib.pyplot import imshow
import numpy as np
from PIL import Image

%matplotlib inline
pil_im = Image.open(filename, 'r')
imshow(pil_im)

run collagemaker.py -w 8000 -i 800 -s

run collagemaker.py -w 6000 -i 1000 -s

run collagemaker.py -w 8000 -i 2000 -s

!mkdir collage

%%writefile collagemaker.py
# -*- coding: utf-8 -*-
"""
Collage maker - tool to create picture collages
Author: Delimitry
"""
import time
import argparse
import os
import random
from PIL import Image


def make_collage(images, filename, width, init_height):
    """
    Make a collage image with a width equal to `width` from `images` and save to `filename`.
    """
    if not images:
        print('No images for collage found!')
        return False

    margin_size = 2
    # run until a suitable arrangement of images is found
    while True:
        # copy images to images_list
        images_list = images[:]
        coefs_lines = []
        images_line = []
        x = 0
        while images_list:
            # get first image and resize to `init_height`
            img_path = images_list.pop(0)
            img = Image.open(img_path)
            img.thumbnail((width, init_height))
            # when `x` will go beyond the `width`, start the next line
            if x > width:
                coefs_lines.append((float(x) / width, images_line))
                images_line = []
                x = 0
            x += img.size[0] + margin_size
            images_line.append(img_path)
        # finally add the last line with images
        coefs_lines.append((float(x) / width, images_line))

        # compact the lines, by reducing the `init_height`, if any with one or less images
        if len(coefs_lines) <= 1:
            break
        if any(map(lambda c: len(c[1]) <= 1, coefs_lines)):
            # reduce `init_height`
            init_height -= 10
        else:
            break

    # get output height
    out_height = 0
    for coef, imgs_line in coefs_lines:
        if imgs_line:
            out_height += int(init_height / coef) + margin_size
    if not out_height:
        print('Height of collage could not be 0!')
        return False

    collage_image = Image.new('RGB', (width, int(out_height)), (35, 35, 35))
    # put images to the collage
    y = 0
    for coef, imgs_line in coefs_lines:
        if imgs_line:
            x = 0
            for img_path in imgs_line:
                img = Image.open(img_path)
                # if need to enlarge an image - use `resize`, otherwise use `thumbnail`, it's faster
                k = (init_height / coef) / img.size[1]
                if k > 1:
                    img = img.resize((int(img.size[0] * k), int(img.size[1] * k)), Image.ANTIALIAS)
                else:
                    img.thumbnail((int(width / coef), int(init_height / coef)), Image.ANTIALIAS)
                if collage_image:
                    collage_image.paste(img, (int(x), int(y)))
                x += img.size[0] + margin_size
            y += int(init_height / coef) + margin_size
    collage_image = collage_image.resize((1000,1000), Image.ANTIALIAS)        
    collage_image.save(filename)
    return True


def main():
    timename = time.strftime("%Y%m%d-%H%M%S")
    filename = "collage/collage"+timename+".png"
    #filename = timename
    #new_img.save(filename,"PNG")
    # prepare argument parser
    parse = argparse.ArgumentParser(description='Photo collage maker')
    parse.add_argument('-f', '--folder', dest='folder', help='folder with images (*.jpg, *.jpeg, *.png)',\
                       default='randomsized/')
    parse.add_argument('-o', '--output', dest='output', help='output collage image filename',\
                       default=filename)
    parse.add_argument('-w', '--width', dest='width', type=int, help='resulting collage image width')
    parse.add_argument('-i', '--init_height', dest='init_height', type=int, \
                       help='initial height for resize the images')
    parse.add_argument('-s', '--shuffle', action='store_true', dest='shuffle', help='enable images shuffle')

    args = parse.parse_args()
    if not args.width or not args.init_height:
        parse.print_help()
        exit(1)

    # get images
    files = [os.path.join(args.folder, fn) for fn in os.listdir(args.folder)]
    images = [fn for fn in files if os.path.splitext(fn)[1].lower() in ('.jpg', '.jpeg', '.png')]
    if not images:
        print('No images for making collage! Please select other directory with images!')
        exit(1)

    # shuffle images if needed
    if args.shuffle:
        random.shuffle(images)

    print('Making collage...')
    res = make_collage(images, args.output, args.width, args.init_height)
    if not res:
        print('Failed to create collage!')
        exit(1)
    print('Collage is ready!')


if __name__ == '__main__':
    main()

from PIL import Image
import os
from random import randint
import time
from datetime import datetime

dirZ = os.walk('.').next()[1]
for dirs in dirZ:
    files = [os.path.join(dirs, fn) for fn in os.listdir(dirs)]
    images = [fn for fn in files if os.path.splitext(fn)[1].lower() in ('.jpg', '.jpeg', '.png')]
    for imag in images:
        w = randint(120,200)
        var = randint(5,30)
        h = w+var
        try:
            IM = Image.open(imag)
            IM = IM.resize((w,h), Image.BICUBIC)
            filename = datetime.now().strftime("randomsized/%H:%M:%S.%f.png")
            time.sleep(.1)
            IM.save(filename)
            print filename
        except:
            pass
        
        

%%writefile collagemaker.py
# -*- coding: utf-8 -*-
"""
Collage maker - tool to create picture collages
Author: Delimitry
"""
import time
import argparse
import os
import random
from PIL import Image


def make_collage(images, filename, width, init_height):
    """
    Make a collage image with a width equal to `width` from `images` and save to `filename`.
    """
    if not images:
        print('No images for collage found!')
        return False

    margin_size = 2
    # run until a suitable arrangement of images is found
    while True:
        # copy images to images_list
        images_list = images[:]
        coefs_lines = []
        images_line = []
        x = 0
        while images_list:
            # get first image and resize to `init_height`
            img_path = images_list.pop(0)
            img = Image.open(img_path)
            img.thumbnail((width, init_height))
            # when `x` will go beyond the `width`, start the next line
            if x > width:
                coefs_lines.append((float(x) / width, images_line))
                images_line = []
                x = 0
            x += img.size[0] + margin_size
            images_line.append(img_path)
        # finally add the last line with images
        coefs_lines.append((float(x) / width, images_line))

        # compact the lines, by reducing the `init_height`, if any with one or less images
        if len(coefs_lines) <= 1:
            break
        if any(map(lambda c: len(c[1]) <= 1, coefs_lines)):
            # reduce `init_height`
            init_height -= 10
        else:
            break

    # get output height
    out_height = 0
    for coef, imgs_line in coefs_lines:
        if imgs_line:
            out_height += int(init_height / coef) + margin_size
    if not out_height:
        print('Height of collage could not be 0!')
        return False

    collage_image = Image.new('RGB', (width, int(out_height)), (35, 35, 35))
    # put images to the collage
    y = 0
    for coef, imgs_line in coefs_lines:
        if imgs_line:
            x = 0
            for img_path in imgs_line:
                img = Image.open(img_path)
                # if need to enlarge an image - use `resize`, otherwise use `thumbnail`, it's faster
                k = (init_height / coef) / img.size[1]
                if k > 1:
                    img = img.resize((int(img.size[0] * k), int(img.size[1] * k)), Image.ANTIALIAS)
                else:
                    img.thumbnail((int(width / coef), int(init_height / coef)), Image.ANTIALIAS)
                if collage_image:
                    collage_image.paste(img, (int(x), int(y)))
                x += img.size[0] + margin_size
            y += int(init_height / coef) + margin_size
    collage_image.save(filename)
    return True


def main():
    timename = time.strftime("%Y%m%d-%H%M%S")
    filename = "collage/collage"+timename+".png"
    #filename = timename
    #new_img.save(filename,"PNG")
    # prepare argument parser
    parse = argparse.ArgumentParser(description='Photo collage maker')
    parse.add_argument('-f', '--folder', dest='folder', help='folder with images (*.jpg, *.jpeg, *.png)',\
                       default='ManRay/')
    parse.add_argument('-o', '--output', dest='output', help='output collage image filename',\
                       default=filename)
    parse.add_argument('-w', '--width', dest='width', type=int, help='resulting collage image width')
    parse.add_argument('-i', '--init_height', dest='init_height', type=int, \
                       help='initial height for resize the images')
    parse.add_argument('-s', '--shuffle', action='store_true', dest='shuffle', help='enable images shuffle')

    args = parse.parse_args()
    if not args.width or not args.init_height:
        parse.print_help()
        exit(1)

    # get images
    files = [os.path.join(args.folder, fn) for fn in os.listdir(args.folder)]
    images = [fn for fn in files if os.path.splitext(fn)[1].lower() in ('.jpg', '.jpeg', '.png')]
    if not images:
        print('No images for making collage! Please select other directory with images!')
        exit(1)

    # shuffle images if needed
    if args.shuffle:
        random.shuffle(images)

    print('Making collage...')
    res = make_collage(images, args.output, args.width, args.init_height)
    if not res:
        print('Failed to create collage!')
        exit(1)
    print('Collage is ready!')


if __name__ == '__main__':
    main()



# watermark.py

from PIL import Image, ImageDraw

def main(image, output):
    # Open the original image
    im = Image.open(image)
    print im.size
    # Create a new image for the watermark with an alpha layer (RGBA)
    #  the same size as the original image
    watermark = Image.new("RGBA", im.size)
    print watermark.size
    # Get an ImageDraw object so we can draw on the image
    waterdraw = ImageDraw.ImageDraw(watermark, "RGBA")
    # Place the text at (10, 10) in the upper left corner. Text will be white.
    waterdraw.text((10, 10), "The Image Project")

    # Get the watermark image as grayscale and fade the image
    # See <http://www.pythonware.com/library/pil/handbook/image.htm#Image.point>
    #  for information on the point() function
    # Note that the second parameter we give to the min function determines
    #  how faded the image will be. That number is in the range [0, 256],
    #  where 0 is black and 256 is white. A good value for fading our white
    #  text is in the range [100, 200].
    watermask = watermark.convert("L").point(lambda x: min(x, 100))
    # Apply this mask to the watermark image, using the alpha filter to 
    #  make it transparent
    watermark = watermark.putalpha(watermask)

    # Paste the watermark (with alpha layer) onto the original image and save it
    new_img = Image.blend(im, watermark, 0.5)
    
    
    new_img.save(output)
    return new_img



# Watermarks

from PIL import ImageDraw, Image, ImageFont
def watermark(img, Watermark):
    base = Image.open(img).convert('RGBA')
    w,h = base.size
    txt = Image.new('RGBA', base.size, (255,255,255,0))
    # get a font
    fnt = ImageFont.truetype("/home/jack/.fonts/Exo-Black.ttf", 140)
    # get a drawing context
    d = ImageDraw.Draw(txt)
    d.text((20,200), Watermark, font=fnt, fill=(200,200,200, 100))
    out = Image.alpha_composite(base, txt)
    rgb_img = out.convert('RGB')
    rgb_img.save("TEMP/JUNK.jpg")
    return rgb_img
    
img ="ManRay/20180909-090738.png"
Watermark = "NO COPY"    
watermark(img, Watermark)


import PIL
import time
from PIL import Image
import random, os
from random import randint
import random, os
# Randomly choose two images. The default directories are images/. Theimages may be two 
# different directories.
def blendoverlay(Opath="images/", Bpath="images/"):
    #path = r"bugs/advertisements/"

    random_filename1 = random.choice([
        x for x in os.listdir(Opath)
        if os.path.isfile(os.path.join(Opath, x))
    ])

    img1 = Opath+random_filename1
    return img1
    print(img1)

import sys
sys.path.insert(0,"/home/jack/script")
from Immanip import blendoverlay
from Immanip import datename
new_img = blendoverlay.blend_overlay("photos/","TEMP/")
new_img.save("ManRay/"+datename.date_name())
print "ManRay/"+datename.date_name()

from PIL import Image
im = Image.open("ManRay/20180909-090220.png")
im

import os
from random import randint
PATH = "/home/jack/Desktop/JupyterNotebook-Graphics/"
for dirnames, filenames in os.listdir(PATH):
    print dirnames

!mkdir randomsized

filename = time.strftime("randomsized/%Y%m%d-%H%M%S%F.png")
print filename

dirZ = os.walk('.').next()[1]
for dirs in dirZ:
    img = os.listdir(dir)
    for im in img:
        print "images/"+im

dirs = os.walk('.').next()[1]
for dir in dirs:
    print dir

import os
from random import randint
PATH = "/home/jack/Desktop/JupyterNotebook-Graphics/"
for dirpath, dirnames, filenames in os.walk(PATH):
    print dirnames
    for filename in [f for f in filenames if f.endswith(".t7")]:
        if len(filename)>20:
            AZ = filename[-9:-3]
            samp.append(AZ)


import os
from random import randint
img = os.listdir("images/")
for im in img:
    print "images/"+im
    



import (
    "fmt"
    "strings"
    "time"
)

interval := 64
start := time.Now()
var sum int64
var msgs []string

{
    n := 1
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 2
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 3
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 4
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 5
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 6
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 7
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 8
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 9
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 10
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 11
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 12
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 13
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 14
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 15
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 16
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 17
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 18
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 19
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 20
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 21
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 22
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 23
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 24
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 25
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 26
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 27
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 28
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 29
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 30
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 31
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 32
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 33
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 34
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 35
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 36
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 37
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 38
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 39
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 40
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 41
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 42
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 43
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 44
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 45
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 46
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 47
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 48
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 49
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 50
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 51
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 52
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 53
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 54
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 55
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 56
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 57
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 58
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 59
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 60
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 61
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 62
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 63
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 64
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 65
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 66
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 67
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 68
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 69
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 70
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 71
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 72
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 73
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 74
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 75
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 76
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 77
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 78
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 79
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 80
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 81
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 82
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 83
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 84
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 85
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 86
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 87
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 88
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 89
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 90
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 91
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 92
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 93
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 94
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 95
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 96
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 97
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 98
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 99
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 100
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 101
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 102
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 103
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 104
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 105
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 106
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 107
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 108
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 109
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 110
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 111
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 112
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 113
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 114
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 115
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 116
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 117
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 118
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 119
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 120
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 121
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 122
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 123
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 124
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 125
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 126
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 127
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 128
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 129
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 130
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 131
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 132
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 133
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 134
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 135
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 136
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 137
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 138
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 139
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 140
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 141
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 142
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 143
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 144
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 145
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 146
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 147
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 148
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 149
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 150
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 151
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 152
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 153
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 154
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 155
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 156
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 157
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 158
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 159
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 160
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 161
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 162
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 163
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 164
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 165
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 166
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 167
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 168
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 169
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 170
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 171
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 172
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 173
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 174
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 175
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 176
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 177
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 178
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 179
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 180
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 181
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 182
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 183
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 184
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 185
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 186
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 187
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 188
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 189
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 190
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 191
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 192
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 193
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 194
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 195
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 196
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 197
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 198
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 199
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 200
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 201
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 202
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 203
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 204
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 205
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 206
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 207
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 208
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 209
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 210
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 211
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 212
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 213
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 214
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 215
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 216
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 217
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 218
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 219
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 220
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 221
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 222
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 223
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 224
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 225
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 226
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 227
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 228
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 229
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 230
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 231
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 232
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 233
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 234
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 235
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 236
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 237
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 238
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 239
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 240
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 241
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 242
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 243
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 244
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 245
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 246
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 247
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 248
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 249
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 250
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 251
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 252
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 253
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 254
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 255
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 256
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 257
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 258
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 259
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 260
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 261
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 262
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 263
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 264
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 265
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 266
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 267
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 268
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 269
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 270
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 271
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 272
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 273
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 274
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 275
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 276
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 277
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 278
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 279
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 280
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 281
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 282
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 283
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 284
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 285
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 286
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 287
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 288
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 289
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 290
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 291
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 292
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 293
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 294
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 295
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 296
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 297
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 298
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 299
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 300
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 301
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 302
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 303
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 304
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 305
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 306
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 307
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 308
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 309
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 310
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 311
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 312
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 313
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 314
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 315
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 316
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 317
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 318
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 319
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 320
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 321
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 322
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 323
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 324
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 325
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 326
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 327
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 328
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 329
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 330
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 331
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 332
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 333
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 334
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 335
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 336
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 337
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 338
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 339
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 340
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 341
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 342
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 343
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 344
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 345
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 346
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 347
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 348
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 349
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 350
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 351
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 352
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 353
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 354
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 355
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 356
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 357
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 358
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 359
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 360
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 361
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 362
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 363
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 364
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 365
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 366
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 367
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 368
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 369
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 370
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 371
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 372
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 373
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 374
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 375
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 376
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 377
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 378
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 379
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 380
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 381
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 382
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 383
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 384
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 385
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 386
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 387
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 388
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 389
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 390
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 391
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 392
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 393
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 394
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 395
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 396
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 397
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 398
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 399
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 400
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 401
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 402
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 403
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 404
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 405
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 406
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 407
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 408
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 409
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 410
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 411
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 412
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 413
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 414
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 415
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 416
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 417
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 418
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 419
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 420
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 421
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 422
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 423
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 424
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 425
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 426
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 427
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 428
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 429
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 430
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 431
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 432
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 433
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 434
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 435
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 436
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 437
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 438
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 439
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 440
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 441
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 442
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 443
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 444
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 445
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 446
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 447
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 448
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 449
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 450
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 451
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 452
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 453
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 454
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 455
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 456
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 457
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 458
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 459
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 460
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 461
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 462
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 463
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 464
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 465
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 466
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 467
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 468
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 469
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 470
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 471
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 472
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 473
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 474
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 475
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 476
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 477
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 478
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 479
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 480
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 481
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 482
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 483
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 484
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 485
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 486
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 487
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 488
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 489
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 490
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 491
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 492
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 493
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 494
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 495
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 496
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 497
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 498
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 499
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 500
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 501
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 502
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 503
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 504
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 505
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 506
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 507
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 508
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 509
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 510
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 511
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 512
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 513
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 514
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 515
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 516
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 517
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 518
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 519
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 520
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 521
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 522
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 523
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 524
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 525
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 526
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 527
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 528
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 529
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 530
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 531
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 532
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 533
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 534
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 535
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 536
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 537
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 538
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 539
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 540
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 541
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 542
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 543
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 544
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 545
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 546
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 547
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 548
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 549
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 550
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 551
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 552
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 553
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 554
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 555
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 556
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 557
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 558
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 559
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 560
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 561
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 562
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 563
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 564
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 565
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 566
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 567
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 568
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 569
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 570
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 571
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 572
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 573
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 574
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 575
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 576
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 577
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 578
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 579
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 580
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 581
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 582
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 583
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 584
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 585
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 586
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 587
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 588
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 589
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 590
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 591
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 592
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 593
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 594
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 595
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 596
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 597
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 598
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 599
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 600
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 601
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 602
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 603
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 604
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 605
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 606
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 607
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 608
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 609
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 610
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 611
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 612
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 613
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 614
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 615
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 616
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 617
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 618
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 619
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 620
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 621
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 622
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 623
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 624
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 625
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 626
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 627
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 628
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 629
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 630
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 631
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 632
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 633
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 634
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 635
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 636
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 637
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 638
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 639
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 640
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 641
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 642
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 643
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 644
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 645
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 646
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 647
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 648
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 649
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 650
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 651
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 652
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 653
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 654
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 655
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 656
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 657
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 658
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 659
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 660
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 661
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 662
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 663
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 664
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 665
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 666
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 667
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 668
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 669
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 670
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 671
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 672
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 673
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 674
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 675
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 676
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 677
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 678
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 679
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 680
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 681
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 682
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 683
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 684
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 685
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 686
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 687
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 688
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 689
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 690
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 691
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 692
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 693
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 694
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 695
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 696
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 697
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 698
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 699
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 700
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 701
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 702
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 703
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 704
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 705
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 706
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 707
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 708
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 709
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 710
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 711
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 712
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 713
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 714
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 715
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 716
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 717
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 718
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 719
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 720
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 721
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 722
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 723
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 724
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 725
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 726
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 727
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 728
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 729
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 730
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 731
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 732
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 733
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 734
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 735
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 736
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 737
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 738
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 739
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 740
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 741
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 742
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 743
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 744
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 745
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 746
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 747
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 748
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 749
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 750
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 751
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 752
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 753
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 754
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 755
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 756
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 757
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 758
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 759
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 760
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 761
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 762
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 763
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 764
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 765
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 766
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 767
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 768
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 769
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 770
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 771
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 772
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 773
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 774
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 775
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 776
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 777
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 778
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 779
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 780
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 781
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 782
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 783
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 784
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 785
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 786
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 787
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 788
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 789
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 790
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 791
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 792
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 793
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 794
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 795
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 796
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 797
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 798
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 799
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 800
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 801
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 802
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 803
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 804
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 805
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 806
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 807
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 808
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 809
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 810
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 811
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 812
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 813
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 814
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 815
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 816
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 817
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 818
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 819
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 820
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 821
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 822
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 823
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 824
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 825
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 826
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 827
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 828
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 829
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 830
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 831
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 832
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 833
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 834
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 835
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 836
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 837
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 838
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 839
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 840
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 841
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 842
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 843
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 844
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 845
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 846
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 847
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 848
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 849
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 850
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 851
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 852
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 853
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 854
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 855
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 856
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 857
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 858
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 859
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 860
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 861
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 862
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 863
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 864
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 865
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 866
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 867
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 868
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 869
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 870
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 871
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 872
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 873
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 874
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 875
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 876
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 877
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 878
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 879
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 880
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 881
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 882
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 883
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 884
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 885
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 886
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 887
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 888
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 889
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 890
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 891
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 892
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 893
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 894
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 895
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 896
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 897
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 898
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 899
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 900
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 901
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 902
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 903
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 904
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 905
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 906
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 907
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 908
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 909
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 910
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 911
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 912
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 913
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 914
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 915
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 916
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 917
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 918
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 919
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 920
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 921
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 922
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 923
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 924
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 925
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 926
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 927
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 928
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 929
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 930
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 931
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 932
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 933
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 934
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 935
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 936
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 937
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 938
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 939
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 940
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 941
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 942
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 943
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 944
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 945
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 946
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 947
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 948
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 949
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 950
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 951
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 952
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 953
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 954
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 955
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 956
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 957
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 958
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 959
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 960
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 961
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 962
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 963
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 964
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 965
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 966
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 967
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 968
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 969
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 970
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 971
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 972
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 973
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 974
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 975
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 976
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 977
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 978
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 979
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 980
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 981
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 982
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 983
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 984
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 985
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 986
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 987
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 988
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 989
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 990
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 991
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 992
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 993
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 994
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 995
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 996
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 997
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 998
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 999
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1000
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1001
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1002
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1003
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1004
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1005
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1006
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1007
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1008
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1009
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1010
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1011
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1012
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1013
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1014
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1015
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1016
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1017
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1018
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1019
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1020
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1021
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1022
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1023
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1024
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

sum

fmt.Println(strings.Join(msgs, "\n"))

import (
    "fmt"
    "strings"
    "time"
)

interval := 64
start := time.Now()
var sum int64
var msgs []string

{
    n := 1
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 2
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1023
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

{
    n := 1024
    sum += int64(n)
    if n % interval == 0 {
        end := time.Now()
        msgs = append(
            msgs,
            fmt.Sprintf("cycle: [%d, %d], took %v on average", n - interval + 1, n, end.Sub(start)/time.Duration(interval)))
        start = end
    }
}

sum

fmt.Println(strings.Join(msgs, "\n"))

# Imagine this cell called a function which runs things on a cluster and you have an error

# Imagine this cell called a function which runs things on a cluster and you have an error

from IPython.display import set_matplotlib_formats
# generate pdf and png images
set_matplotlib_formats('pdf', 'png')

import matplotlib.pyplot as plt
%matplotlib inline


plt.plot(range(5))



from IPython.display import set_matplotlib_formats
# generate pdf and png images
set_matplotlib_formats('pdf', 'png')

import matplotlib.pyplot as plt
%matplotlib inline


plt.plot(range(5))



# checking python version
! python -V

# importing packages 
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

%matplotlib inline
# plt.style.use('seaborn-whitegrid')
plt.style.use('seaborn-white')       

# displaying figure and axes
fig = plt.figure()
ax = plt.axes()

# another way to display them
fig, ax = plt.subplots()  

# defining x values
x = np.linspace(0, 10, 100)
x

# taking cosine and sine of x
y1, y2 = np.cos(x), np.sin(x)
fig, ax = plt.subplots()
ax.plot(x, y1)
ax.plot(x, y2)

# using "show" called on plt
y1, y2 = np.cos(x), np.sin(x)
fig, ax = plt.subplots()
ax.plot(x, y1)
ax.plot(x, y2)
plt.show()

# stacking graphs vertically (defining 2 rows for plot)
fig, axes = plt.subplots(2)
axes[0].plot(x, y1)
axes[1].plot(x, y2)
plt.show()

# stacking graphs horizontally (1 row, 2 columns, and change figure size)
fig, axes = plt.subplots(1,2, figsize=(22,4))
axes[0].plot(x, y1)
axes[1].plot(x, y2, color = 'orange')
plt.show()

# defining random values
x = np.random.rand(30)
y = np.random.rand(30)
x, y

# plotting a scatter plot
# "s" is marker size in points, "alpha" is intensity of the marker 0 for transparent and 1 for opaque
plt.scatter(x, y, marker='o', color = 'red', s = 200, alpha=.4)
plt.title("scatter plot")
plt.show()

# changin "s" and "alpha" values
plt.scatter(x, y, marker='o', color = 'red', s = 100, alpha=.2)
plt.title("scatter plot")
plt.show()

# reading iris data
iris_data = pd.read_csv("./data/iris.csv", 
                        names = ["sepal_l", "sepal_w", "petal_l", "petal_w", "class"])

# transforming categorical 'class' to integers
iris_data['class'] = iris_data['class'].map({"Iris-setosa":0, 
                                             'Iris-versicolor':1,
                                             'Iris-virginica': 2})
iris_data.head(2)

# plotting a scatter plot using cmap - Colormap magma
plt.scatter(iris_data['sepal_l'], 
            iris_data['sepal_w'], 
            alpha=0.8,
            s=200, 
            c=iris_data['class'], 
            cmap='magma')

plt.xlabel('sepal_l')
plt.ylabel("sepal_w")
plt.title("Sepal Length v/s Sepal Width")
plt.show()

# plotting another scatter plot
fig, ax = plt.subplots(figsize = (12, 8))
ax.scatter(iris_data['sepal_l'], 
           iris_data['sepal_w'], 
           alpha=.7,
           s = 200, 
           c = iris_data["class"],  
           cmap='cividis')

# using more convenient way of setting properties
ax.set(title="Iris Data", xlabel='sepal_l', ylabel="sepal_w")
plt.show()

# defining multiple scatter plots and provide legend
fig, ax = plt.subplots(figsize = (12, 8))
ax.scatter(iris_data.loc[:49, 'sepal_l'], 
           iris_data.loc[:49,'sepal_w'],
           s = 200, 
           c = 'r', 
           alpha=.5, 
           label='Iris-setosa')

ax.scatter(iris_data.loc[49:99, 'sepal_l'], 
           iris_data.loc[49:99,'sepal_w'], 
           s = 200, 
           c = 'blue', 
           alpha=.5, 
           label='Iris-versicolor')

ax.scatter(iris_data.loc[99:, 'sepal_l'], 
           iris_data.loc[99:,'sepal_w'],
           s = 200, 
           c = 'green', 
           alpha=.5, 
           label='Iris-virginica')

# setting properties
ax.set(title="Iris Data", xlabel='sepal_l', ylabel="sepal_w")
ax.legend()
plt.show()

# creating a histogram
fig, ax = plt.subplots()
ax.hist(iris_data['sepal_l'], color = 'lightgreen', edgecolor='black')
ax.set_title("Histogram of Sepal Length")
ax.set_xlabel("Length (cms)")
ax.set_ylabel("Count")
plt.show()

# checking columns
iris_data.columns

# plotting histogram for each column and provide legend
fig, ax = plt.subplots(figsize = ((12, 8)))
ax.hist(iris_data['sepal_l'], alpha=.5, edgecolor='black')
ax.hist(iris_data['sepal_w'], alpha=.5, edgecolor='black')
ax.hist(iris_data['petal_l'], alpha=.5, edgecolor='black')
ax.hist(iris_data['petal_w'], alpha=.5, edgecolor='black')
ax.legend(['sepal_l', 'sepal_w', 'petal_l', 'petal_w'])
ax.set_xlabel("Length (cms)")
ax.set_ylabel("Count")
plt.show()

# pair plotting
features = ["sepal_l", "sepal_w", "petal_l", "petal_w"]
pair_plot = pd.plotting.scatter_matrix(iris_data[features], figsize=(12, 8))

# using seaborn library
pair_plot = sns.pairplot(iris_data, hue='class')

# transform integers back to categorical, set the style to dark and change the diagonal plots
sns.set(style = "dark")
iris_data['class'] = iris_data['class'].map({0:"Iris-setosa", 
                                             1:'Iris-versicolor', 
                                             2:'Iris-virginica'})
pair_plot = sns.pairplot(iris_data, hue='class', diag_kind = 'hist')

# creating correlation
corr = iris_data.corr()
corr

# plotting correlation
f, ax = plt.subplots(figsize=(11, 9))
sns.heatmap(corr, annot=True)
plt.show()

# plotting correwlation 
sns.set(font_scale=1.4)
f, ax = plt.subplots(figsize=(11, 9))
cmap = sns.diverging_palette(220, 10, as_cmap=True)
sns.heatmap(corr, 
            cmap=cmap, 
            vmax=.3, 
            center=0,
            square=True, 
            linewidths=.5, 
            cbar_kws={"shrink": .5}, 
            annot = True)
plt.show()



import (
    "fmt"
    "math"

    "gonum.org/v1/gonum/mat"
)

// Create two matrices of the same size, a and b.
a := mat.NewDense(3, 3, []float64{1, 2, 3, 0, 4, 5, 0, 0, 6})
b := mat.NewDense(3, 3, []float64{8, 9, 10, 1, 4, 2, 9, 0, 2})
c := mat.NewDense(3, 2, []float64{3, 2, 1, 4, 0, 8})

fa := mat.Formatted(a, mat.Prefix("    "))
fb := mat.Formatted(b, mat.Prefix("    "))
fmt.Printf("\na = %0.4v\n\n", fa)
fmt.Printf("b = %0.4v\n\n", fb)

// Add a and b.
d := new(mat.Dense)
d.Add(a, b)
fd := mat.Formatted(d, mat.Prefix("            "))
fmt.Printf("d = a + b = %0.4v\n\n", fd)

// Multiply a and c.
f := new(mat.Dense)
f.Mul(a, c)
ff := mat.Formatted(f, mat.Prefix("          "))
fmt.Printf("f = a c = %0.4v\n\n", ff)

// Raising a matrix to a power.
g := new(mat.Dense)
g.Pow(a, 5)
fg := mat.Formatted(g, mat.Prefix("          "))
fmt.Printf("g = a^5 = %0.4v\n\n", fg)

// Apply a function to each of the elements of a.
h := new(mat.Dense)
sqrt := func(_, _ int, v float64) float64 { return math.Sqrt(v) }
h.Apply(sqrt, a)
fh := mat.Formatted(h, mat.Prefix("              "))
fmt.Printf("h = sqrt(a) = %0.4v\n\n", fh)



#@title Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

!pip install tflite-support-nightly

from tflite_support.metadata_writers import image_classifier
from tflite_support.metadata_writers import writer_utils

!curl -L https://github.com/tensorflow/tflite-support/raw/master/tensorflow_lite_support/metadata/python/tests/testdata/image_classifier/mobilenet_v2_1.0_224.tflite -o mobilenet_v2_1.0_224.tflite
!curl -L https://github.com/tensorflow/tflite-support/raw/master/tensorflow_lite_support/metadata/python/tests/testdata/image_classifier/labels.txt -o mobilenet_labels.txt

ImageClassifierWriter = image_classifier.MetadataWriter
_MODEL_PATH = "mobilenet_v2_1.0_224.tflite"
# Task Library expects label files that are in the same format as the one below.
_LABEL_FILE = "mobilenet_labels.txt"
_SAVE_TO_PATH = "mobilenet_v2_1.0_224_metadata.tflite"
# Normalization parameters is required when reprocessing the image. It is
# optional if the image pixel values are in range of [0, 255] and the input
# tensor is quantized to uint8. See the introduction for normalization and
# quantization parameters below for more details.
# https://www.tensorflow.org/lite/models/convert/metadata#normalization_and_quantization_parameters)
_INPUT_NORM_MEAN = 127.5
_INPUT_NORM_STD = 127.5

# Create the metadata writer.
writer = ImageClassifierWriter.create_for_inference(
    writer_utils.load_file(_MODEL_PATH), [_INPUT_NORM_MEAN], [_INPUT_NORM_STD],
    [_LABEL_FILE])

# Verify the metadata generated by metadata writer.
print(writer.get_metadata_json())

# Populate the metadata into the model.
writer_utils.save_file(writer.populate(), _SAVE_TO_PATH)

from tflite_support.metadata_writers import object_detector
from tflite_support.metadata_writers import writer_utils

!curl -L https://github.com/tensorflow/tflite-support/raw/master/tensorflow_lite_support/metadata/python/tests/testdata/object_detector/ssd_mobilenet_v1.tflite -o ssd_mobilenet_v1.tflite
!curl -L https://github.com/tensorflow/tflite-support/raw/master/tensorflow_lite_support/metadata/python/tests/testdata/object_detector/labelmap.txt -o ssd_mobilenet_labels.txt

ObjectDetectorWriter = object_detector.MetadataWriter
_MODEL_PATH = "ssd_mobilenet_v1.tflite"
# Task Library expects label files that are in the same format as the one below.
_LABEL_FILE = "ssd_mobilenet_labels.txt"
_SAVE_TO_PATH = "ssd_mobilenet_v1_metadata.tflite"
# Normalization parameters is required when reprocessing the image. It is
# optional if the image pixel values are in range of [0, 255] and the input
# tensor is quantized to uint8. See the introduction for normalization and
# quantization parameters below for more details.
# https://www.tensorflow.org/lite/models/convert/metadata#normalization_and_quantization_parameters)
_INPUT_NORM_MEAN = 127.5
_INPUT_NORM_STD = 127.5

# Create the metadata writer.
writer = ObjectDetectorWriter.create_for_inference(
    writer_utils.load_file(_MODEL_PATH), [_INPUT_NORM_MEAN], [_INPUT_NORM_STD],
    [_LABEL_FILE])

# Verify the metadata generated by metadata writer.
print(writer.get_metadata_json())

# Populate the metadata into the model.
writer_utils.save_file(writer.populate(), _SAVE_TO_PATH)

from tflite_support.metadata_writers import image_segmenter
from tflite_support.metadata_writers import writer_utils

!curl -L https://github.com/tensorflow/tflite-support/raw/master/tensorflow_lite_support/metadata/python/tests/testdata/image_segmenter/deeplabv3.tflite -o deeplabv3.tflite
!curl -L https://github.com/tensorflow/tflite-support/raw/master/tensorflow_lite_support/metadata/python/tests/testdata/image_segmenter/labelmap.txt -o deeplabv3_labels.txt

ImageSegmenterWriter = image_segmenter.MetadataWriter
_MODEL_PATH = "deeplabv3.tflite"
# Task Library expects label files that are in the same format as the one below.
_LABEL_FILE = "deeplabv3_labels.txt"
_SAVE_TO_PATH = "deeplabv3_metadata.tflite"
# Normalization parameters is required when reprocessing the image. It is
# optional if the image pixel values are in range of [0, 255] and the input
# tensor is quantized to uint8. See the introduction for normalization and
# quantization parameters below for more details.
# https://www.tensorflow.org/lite/models/convert/metadata#normalization_and_quantization_parameters)
_INPUT_NORM_MEAN = 127.5
_INPUT_NORM_STD = 127.5

# Create the metadata writer.
writer = ImageSegmenterWriter.create_for_inference(
    writer_utils.load_file(_MODEL_PATH), [_INPUT_NORM_MEAN], [_INPUT_NORM_STD],
    [_LABEL_FILE])

# Verify the metadata generated by metadata writer.
print(writer.get_metadata_json())

# Populate the metadata into the model.
writer_utils.save_file(writer.populate(), _SAVE_TO_PATH)

from tflite_support.metadata_writers import nl_classifier
from tflite_support.metadata_writers import metadata_info
from tflite_support.metadata_writers import writer_utils

!curl -L https://github.com/tensorflow/tflite-support/raw/master/tensorflow_lite_support/metadata/python/tests/testdata/nl_classifier/movie_review.tflite -o movie_review.tflite
!curl -L https://github.com/tensorflow/tflite-support/raw/master/tensorflow_lite_support/metadata/python/tests/testdata/nl_classifier/labels.txt -o movie_review_labels.txt
!curl -L https://storage.googleapis.com/download.tensorflow.org/models/tflite_support/nl_classifier/vocab.txt -o movie_review_vocab.txt

NLClassifierWriter = nl_classifier.MetadataWriter
_MODEL_PATH = "movie_review.tflite"
# Task Library expects label files and vocab files that are in the same formats
# as the ones below.
_LABEL_FILE = "movie_review_labels.txt"
_VOCAB_FILE = "movie_review_vocab.txt"
# NLClassifier supports tokenize input string using the regex tokenizer. See
# more details about how to set up RegexTokenizer below:
# https://github.com/tensorflow/tflite-support/blob/master/tensorflow_lite_support/metadata/python/metadata_writers/metadata_info.py#L130
_DELIM_REGEX_PATTERN = r"[^\w\']+"
_SAVE_TO_PATH = "moview_review_metadata.tflite"

# Create the metadata writer.
writer = nl_classifier.MetadataWriter.create_for_inference(
    writer_utils.load_file(_MODEL_PATH),
    metadata_info.RegexTokenizerMd(_DELIM_REGEX_PATTERN, _VOCAB_FILE),
    [_LABEL_FILE])

# Verify the metadata generated by metadata writer.
print(writer.get_metadata_json())

# Populate the metadata into the model.
writer_utils.save_file(writer.populate(), _SAVE_TO_PATH)

from tflite_support.metadata_writers import audio_classifier
from tflite_support.metadata_writers import metadata_info
from tflite_support.metadata_writers import writer_utils

!curl -L https://github.com/tensorflow/tflite-support/raw/master/tensorflow_lite_support/metadata/python/tests/testdata/audio_classifier/yamnet_wavin_quantized_mel_relu6.tflite -o yamnet.tflite
!curl -L https://github.com/tensorflow/tflite-support/raw/master/tensorflow_lite_support/metadata/python/tests/testdata/audio_classifier/yamnet_521_labels.txt -o yamnet_labels.txt


AudioClassifierWriter = audio_classifier.MetadataWriter
_MODEL_PATH = "yamnet.tflite"
# Task Library expects label files that are in the same format as the one below.
_LABEL_FILE = "yamnet_labels.txt"
# Expected sampling rate of the input audio buffer.
_SAMPLE_RATE = 16000
# Expected number of channels of the input audio buffer. Note, Task library only
# support single channel so far.
_CHANNELS = 1
_SAVE_TO_PATH = "yamnet_metadata.tflite"

# Create the metadata writer.
writer = AudioClassifierWriter.create_for_inference(
    writer_utils.load_file(_MODEL_PATH), _SAMPLE_RATE, _CHANNELS, [_LABEL_FILE])

# Verify the metadata generated by metadata writer.
print(writer.get_metadata_json())

# Populate the metadata into the model.
writer_utils.save_file(writer.populate(), _SAVE_TO_PATH)

from tflite_support.metadata_writers import image_classifier
from tflite_support.metadata_writers import metadata_info
from tflite_support.metadata_writers import writer_utils
from tflite_support import metadata_schema_py_generated as _metadata_fb

!curl -L https://github.com/tensorflow/tflite-support/raw/master/tensorflow_lite_support/metadata/python/tests/testdata/image_classifier/mobilenet_v2_1.0_224.tflite -o mobilenet_v2_1.0_224.tflite
!curl -L https://github.com/tensorflow/tflite-support/raw/master/tensorflow_lite_support/metadata/python/tests/testdata/image_classifier/labels.txt -o mobilenet_labels.txt

model_buffer = writer_utils.load_file("mobilenet_v2_1.0_224.tflite")

# Create general model information.
general_md = metadata_info.GeneralMd(
    name="ImageClassifier",
    version="v1",
    description=("Identify the most prominent object in the image from a "
                 "known set of categories."),
    author="TensorFlow Lite",
    licenses="Apache License. Version 2.0")

# Create input tensor information.
input_md = metadata_info.InputImageTensorMd(
    name="input image",
    description=("Input image to be classified. The expected image is "
                 "128 x 128, with three channels (red, blue, and green) per "
                 "pixel. Each element in the tensor is a value between min and "
                 "max, where (per-channel) min is [0] and max is [255]."),
    norm_mean=[127.5],
    norm_std=[127.5],
    color_space_type=_metadata_fb.ColorSpaceType.RGB,
    tensor_type=writer_utils.get_input_tensor_types(model_buffer)[0])

# Create output tensor information.
output_md = metadata_info.ClassificationTensorMd(
    name="probability",
    description="Probabilities of the 1001 labels respectively.",
    label_files=[
        metadata_info.LabelFileMd(file_path="mobilenet_labels.txt",
                                  locale="en")
    ],
    tensor_type=writer_utils.get_output_tensor_types(model_buffer)[0])

ImageClassifierWriter = image_classifier.MetadataWriter
# Create the metadata writer.
writer = ImageClassifierWriter.create_from_metadata_info(
    model_buffer, general_md, input_md, output_md)

# Verify the metadata generated by metadata writer.
print(writer.get_metadata_json())

# Populate the metadata into the model.
writer_utils.save_file(writer.populate(), _SAVE_TO_PATH)

from tflite_support import metadata

displayer = metadata.MetadataDisplayer.with_model_file("mobilenet_v2_1.0_224_metadata.tflite")
print("Metadata populated:")
print(displayer.get_metadata_json())

print("Associated file(s) populated:")
for file_name in displayer.get_packed_associated_file_list():
  print("file name: ", file_name)
  print("file content:")
  print(displayer.get_associated_file_buffer(file_name))

import time
help(time.time)

import sys
sys.path.insert(0,"/home/jack/anaconda2/envs/py27/lib/python2.7/site-packages")
import twython
from twython import Twython
import Key
CONSUMER_KEY = Key.twiter()[0]
CONSUMER_SECRET = Key.twiter()[1]
ACCESS_KEY = Key.twiter()[2]
ACCESS_SECRET = Key.twiter()[3]
t=0
sTime= time.time()
twitter = Twython(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_KEY,ACCESS_SECRET)
tweetfile = 'Python.txt'
results = twitter.cursor(twitter.search, q='python, javascript')
filein = open(tweetfile, 'w')
for result in results:
    result=str(result)
    filein.write(result)
    print(result)
    if time.time() - sTime > 4:
        filein.close()
        sys.exit()
         

for i in range(4):
    print("--%d" % i)
    for i in range(5):
        print(i),

import sys
sys.path.insert(0,"/home/jack/anaconda2/envs/py27/lib/python2.7/site-packages")
import twython
from twython import Twython
import Key
import time
CONSUMER_KEY = Key.twiter()[0]
CONSUMER_SECRET = Key.twiter()[1]
ACCESS_KEY = Key.twiter()[2]
ACCESS_SECRET = Key.twiter()[3]
t=0
sTime= time.time()
twitter = Twython(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_KEY,ACCESS_SECRET)
tweetfile = 'Trump001.txt'
results = twitter.cursor(twitter.search, q='Trump')
filein = open(tweetfile, 'w')
for result in results:
    result=str(result)
    filein.write(result)
    print(result)
    if time.time() - sTime > 5:
        filein.close()
        sys.exit()

from TwitterSearch import *
import Key
try:
    tso = TwitterSearchOrder() # create a TwitterSearchOrder object
    tso.set_keywords(['Hurricane', 'Florida']) # let's define all words we would like to have a look for
    tso.set_language('en') # we want to see German tweets only
    tso.set_include_entities(False) # and don't give us all those entity information

    # it's about time to create a TwitterSearch object with our secret tokens
    ts = TwitterSearch(
        consumer_key = Key.twiter()[0],
        consumer_secret = Key.twiter()[1],
        access_token = Key.twiter()[2],
        access_token_secret = Key.twiter()[3]
        )

     # this is where the fun actually starts :)
        
    for tweet in ts.search_tweets_iterable(tso):
        print( '@%s tweeted: %s' % ( tweet['user']['screen_name'], tweet['text'] ) )

except TwitterSearchException as e: # take care of all those ugly errors if there are some
    print(e)

!ls T*

import sys
sys.path.insert(0, 'TwitterSearch/')
from TwitterSearch import *


import sys
sys.path.insert(0, 'TwitterSearch/')
from TwitterSearch import *
import Key
consumer_key = Key.twiter()[0]
try:
    tso = TwitterSearchOrder() # create a TwitterSearchOrder object
    tso.set_keywords(['Typhoon', 'China']) # let's define all words we would like to have a look for
    tso.set_language('en') # we want to see German tweets only
    tso.set_include_entities(False) # and don't give us all those entity information
    tso.set_count(2)
    # it's about time to create a TwitterSearch object with our secret tokens
    ts = TwitterSearch(
        consumer_key = Key.twiter()[0],
        consumer_secret = Key.twiter()[1],
        access_token = Key.twiter()[2],
        access_token_secret = Key.twiter()[3]
        )

     # this is where the fun actually starts :)
    text2 = []    
    for tweet in ts.search_tweets_iterable(tso):
        print( '@%s tweeted: %s' % ( tweet['user']['screen_name'], tweet['text'] ) )
        

except TwitterSearchException as e: # take care of all those ugly errors if there are some
    print(e)

from TwitterSearch import *
import Key
try:
    tso = TwitterSearchOrder() # create a TwitterSearchOrder object
    tso.set_keywords(['jupyternotebook', 'python']) # let's define all words we would like to have a look for
    tso.set_language('en') # we want to see German tweets only
    tso.set_include_entities(False) # and don't give us all those entity information

    # it's about time to create a TwitterSearch object with our secret tokens
    ts = TwitterSearch(
        consumer_key = Key.twiter()[0],
        consumer_secret = Key.twiter()[1],
        access_token = Key.twiter()[2],
        access_token_secret = Key.twiter()[3]
        )

    # this is where the fun actually starts :)
    for tweet in ts.search_tweets_iterable(tso):
        print( '@%s tweeted: %s' % (tweet['user']['screen_name'], tweet['text'] ) )
        
    



        #outfile = "test.csv"
        #csvfile = file(outfile, "w")
        #row = tweet['user']['screen_name'], tweet['text']  
        #csvwriter = csv.writer(csvfile)
        #row = tweet[ "user", "screen_name", "text" ]
        #csvwriter.writerow(row)
        #print (tweet['user']['screen_name'], tweet['text']  )
        #print( '@%s tweeted: %s' % ( tweet['user']['screen_name'], tweet['text'] ) )

import sys
sys.path.insert(0,"/home/jack/anaconda2/envs/py27/lib/python2.7/site-packages")
import twython
from twython import Twython
import Key
import csv
CONSUMER_KEY = Key.twiter()[0]
CONSUMER_SECRET = Key.twiter()[1]
ACCESS_KEY = Key.twiter()[2]
ACCESS_SECRET = Key.twiter()[3]

twitter = Twython(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_KEY,ACCESS_SECRET)
#tweetfile = 'hurricane_11.txt'
results = twitter.cursor(twitter.search, q='Trump')
 
for result in results:
    result = str(result)
    Ndata = result.replace(':', ' ')
    Xdata = Ndata.replace('u', '')

#newList = [l[0] for l in Ndata]
#Simple = ("".join(newList))
#print Simple

#print Xdata
    print str(Xdata)[2:-2]

import sys
sys.path.insert(0,"/home/jack/anaconda2/envs/py27/lib/python2.7/site-packages")
import twython
from twython import Twython
import Key
import csv
CONSUMER_KEY = Key.twiter()[0]
CONSUMER_SECRET = Key.twiter()[1]
ACCESS_KEY = Key.twiter()[2]
ACCESS_SECRET = Key.twiter()[3]

twitter = Twython(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_KEY,ACCESS_SECRET)
#tweetfile = 'hurricane_11.txt'
results = twitter.cursor(twitter.search, q='hurricane')
outfile = 'hurricane_101.txt'
csvfile = file(outfile, "w")
for result in results:
    post = (result)  
    csvwriter.write(post)
    print post
      
#file = open(“testfile.txt”,”w”) 
 
#file.write(“Hello World”)  


csvwriter = csv.writer(csvfile)

#-----------------------------------------------------------------------
# add headings to our CSV file
#-----------------------------------------------------------------------
#row = [ "user", "text", "latitude", "longitude" ]
#csvwriter.writerow(row)



with open('textText.data') as f:
    while True:
        c = f.read(1)
        print c,
        if not c:            
            print "End of file"
            sys.exit()
            
            


badtext = ''.join(c for c in map(chr, range(173)) if not c.isalnum())
print badtext


badtext = ''.join(c for c in map(chr, range(256)) if not c.isalnum())
print badtext

for i in xrange(32, 128, 16):
    print 'chr:\t%s' % '\t'.join(map(chr, [i+j for j in range(16)]))
    print 'asc:\t%s' % '\t'.join(map(str, [i+j for j in range(16)]))

import re
import textwrap

with open("hurricane_14.txt") as f:
    text = f.read()
    #This was added to get ride od the unicode u from showing up
    words = text.replace(' u ', ' ');words = words.replace('u ', '');words = words.replace(' U ', ' ')
    #This clears out the non-Alpha-numeric characters
    #badtext = ''.join(c for c in map(chr, range(256)) if not c.isalnum())
    badtext = '!,",#,$,%,&,(,),*,+,,-,.,/,:;<=>?@[\]^_`{|}~'
    word = words.translate(None, badtext)
    # limit the aount of characters perline displayed
    chars_per_line = 80
    for i in range(0, len(word), chars_per_line):
        print words[i:i+chars_per_line]

my_str = 'qwertyuiopaq'
','.join(my_str[i:i+4] for i in range(0, len(my_str), 4))


data = [('pragma integrity_check will check that your database is valid', 'check, verify, inspect'),]


import re
import textwrap
import sqlite3
import time
conn = sqlite3.connect('hurricane14.db')
c = conn.cursor()
# We can also close the connection if we are done with it.
# Just be sure any changes have been committed or they will be lost.
conn.close()

with open("hurricane_14.txt") as f:
    text = f.read()
    #This was added to get ride od the unicode u from showing up
    words = text.replace(' u ', ' ');words = words.replace('u ', '');words = words.replace(' U ', ' ')
    #This clears out the non-Alpha-numeric characters
    #badtext = ''.join(c for c in map(chr, range(256)) if not c.isalnum())
    badtext = '!,",#,$,%,&,(,),*,+,,-,.,/,:;<=>?@[\]^_`{|}~'
    word = words.translate(None, badtext)
    # limit the aount of characters perline displayed
    chars_per_line = 100
    for i in range(0, len(word), chars_per_line):
        time.sleep(2)
        #data= "hurricane_14.txt)",words[i:i+chars_per_line],","
        data= "(",words[i:i+chars_per_line],"hurricane, florida, twitter)",
        #data= word[i:i+chars_per_line],
        #conn.commit()
        print data

import re
import textwrap
import sqlite3
conn = sqlite3.connect('data/fts3hurricane.db')
#c = conn.cursor()
# Create table
#c.execute('''CREATE TABLE hurricane
#             (hurricane text)''')
# Insert a row of data
#c.execute("INSERT INTO hurricane VALUES ('hurricane','first test line')")

# Save (commit) the changes
conn.commit()

# We can also close the connection if we are done with it.
# Just be sure any changes have been committed or they will be lost.


with open("hurricane_14.txt") as f:
    text = f.read()
    #This was added to get ride od the unicode u from showing up
    words = text.replace(' u ', ' ');words = words.replace('u ', '');words = words.replace(' U ', ' ')
    #This clears out the non-Alpha-numeric characters
    badtext = ''.join(c for c in map(chr, range(256)) if not c.isalnum())
   
    # limit the aount of characters perline displayed
    chars_per_line = 180
    for i in range(0, len(words), chars_per_line):
        
        #data= "hurricane_14.txt,",words[i:i+chars_per_line],","
        word = words.translate(None, badtext)
        data = [("hurricane_14.txt","),(",word[i:i+chars_per_line]),],
        data = str(data)
        words = data.replace("', '),(', '", '),(')
        #data = data[1:-2]
        conn = sqlite3.connect('data/fts3hurricane.db')
        c = conn.cursor()
        c.executemany("INSERT INTO hurricane VALUES (?)", words)
        conn.commit()
        conn.close()        

conn.commit()
conn.close()  

data = [('pragma integrity_check will check that your database is valid', 'check, verify, inspect'),
             ('multiple items may be entered at once', 'newkey'),
             ('Save complete webpages - if posted in base64 encoding ', 'snippets, gwebsite, html'),]


import sqlite3
conn = sqlite3.connect('hurricane.db')
c = conn.cursor()
#Create table
c.execute('''CREATE TABLE hurricane
             (hurricane text, keywords text)''')
conn.commit()
conn.close()  

conn.commit()
conn.close()

import sqlite3
conn = sqlite3.connect('hurricane.db')
c = conn.cursor()
# Never do this -- insecure!
#keywords = 'hurricaneirma'
#c.execute("SELECT * FROM hurricane WHERE keywords = '%s'" % keywords)

# Do this instead
t = ('hurricaneirma',)
c.execute('SELECT * FROM hurricane WHERE keywords=?', t)
print(c.fetchone())


import sqlite3
import sys
conn = sqlite3.connect('hurricane.db')
c = conn.cursor()# Never 
count=0
req=4
for row in c.execute('SELECT * FROM hurricane'):
    count=count+1
    print(row),"\n-----\n"
    if count > req:
        conn.close()
        sys.exit()
        

import re
import textwrap
import time
import sqlite3
import sys
import base64
import time
#conn = sqlite3.connect('hurricane.db')
#c = conn.cursor()
# Create table
#c.execute('''CREATE TABLE hurricane
#             (hurricane text, keywords text)''')
count=0
with open("/home/jack/Desktop/imagebot/hurricane_14.txt") as f:
    text = f.read()
    words = " ".join(re.findall("[a-zA-Z]+", text))
    words = words.replace(' u ', ' ');words = words.replace('u ', '');words = words.replace(' U ', ' ')
    chars_per_line = 140
    for i in range(0, len(words), chars_per_line):
        file= ("[(",words[i:i+chars_per_line],"),]")
        #data= ("[('"+words[i:i+chars_per_line]+"'),]")
        file = str(file)
        #file = 'base64 encoding allows code to be stored and retieved in the same format it was posted'
        b = 'hurricane, hurricaneirma, florida'
        conn = sqlite3.connect('hurricane.db')
        c = conn.cursor()
        time.sleep(1)
        #encodedlistvalue=base64.b64encode(file[2:-2])
        #c.execute("INSERT INTO hurricane VALUES (?,?)", (encodedlistvalue, b)) 
        c.execute("INSERT INTO hurricane VALUES (?,?)", (file, b)) 
        conn.commit()
        conn.close()        
        
        
        time.sleep(1)
        
        count=count+1
        print count,"\n",file[2:-2]
        if count>100:

            sys.exit()
            

import re
import textwrap
import time
import sqlite3
import sys
import base64
import time
#conn = sqlite3.connect('hurricane.db')
#c = conn.cursor()
# Create table
#c.execute('''CREATE TABLE hurricane
#             (hurricane text, keywords text)''')
count=0
with open("/home/jack/Desktop/imagebot/hurricane_14.txt") as f:
    text = f.read()
    words = " ".join(re.findall("[a-zA-Z]+", text))
    words = words.replace(' u ', ' ');words = words.replace('u ', '');words = words.replace(' U ', ' ')
    chars_per_line = 140
    for i in range(0, len(words), chars_per_line):
        file= ("[(",words[i:i+chars_per_line],"),]")
        #data= ("[('"+words[i:i+chars_per_line]+"'),]")
        file = str(file)
        time.sleep(1)
        count=count+1
        print count,"\n",file[2:-2]
        if count>10:

            sys.exit()
            

import sqlite3
import sys
conn = sqlite3.connect('hurricane.db')
c = conn.cursor()# Never 
count=0
start = 10
req= 25
for row in c.execute('SELECT * FROM hurricane'):
    count=count+1
    if count > start:
        print(row),"\n-----\n"
        if count > req:
            conn.close()
            sys.exit()


conn.commit()
conn.close()

import sqlite3
conn = sqlite3.connect('data/400.db')
c = conn.cursor()
c.execute("""
CREATE VIRTUAL TABLE hurr 
USING FTS3(text, keywords);
""")
conn.commit()
conn.close()

import re
import textwrap
import time
import sqlite3
import sys
import base64
'''

conn = sqlite3.connect('data/400.db')
c = conn.cursor()
c.execute(''CREATE TABLE hurricane
             (hurricane text, keywords text)'')
             '''
count=0             
with open("hurricane_14.txt") as f:
    text = f.read()
    words = " ".join(re.findall("[a-zA-Z]+", text))
    words = words.replace(' u ', ' ');words = words.replace('u ', '');words = words.replace(' U ', ' ')
    #twitter friendly "under 140" for status
    chars_per_line = 400
    for i in range(0, len(words), chars_per_line):
        
        file= ("[(",words[i:i+chars_per_line],"),]")
        #data= ("[('"+words[i:i+chars_per_line]+"'),]")
        file = str(file)
        time.sleep(1)
        #file = 'base64 encoding allows code to be stored and retieved in the same format it was posted'
        conn = sqlite3.connect('data/400.db')
        c = conn.cursor()
        b = 'florida, hurricane, Irma, base64'
        encodedlistvalue=base64.b64encode(file[2:-2])
        c.execute("INSERT INTO hurr VALUES (?,?)", (encodedlistvalue, b))
        time.sleep(1)
        conn.commit()
        conn.close() 
        #Apply a pause so viewing line perline insert is possible
        time.sleep(1)
        count=count+1
        print file[2:-2],count
        

sys.exit()
     

conn = sqlite3.connect('hurricane14.db')
c = conn.cursor()# Never 

t = ('hurricane',)
for row in c.execute('SELECT * FROM hurricane'):
                
        s2 = row[0].encode('ascii')
        encodedlistvalue=base64.b64decode(s2)
        print encodedlistvalue, '\n', 'hurricane:', row[1], '\n -----------------------------\n'


import sqlite3
conn = sqlite3.connect('hurricane14.db')
c = conn.cursor()# Never 
for row in c.execute('SELECT * FROM hurricane'):
        print(row),"\n-----\n"
        conn.close()

import re
import textwrap

with open("hurricane_14.txt") as f:
    text = f.read()
    words = " ".join(re.findall("[a-zA-Z]+", text))
    words = words.replace(' u ', ' ');words = words.replace('u ', '');words = words.replace(' U ', ' ')
    print(textwrap.fill(words, 115))

import re
import textwrap

with open("hurricane_14.txt") as f:
    text = f.read()
    words = " ".join(re.findall("[a-zA-Z]+", text))
    words = words.replace(' u ', ' ');words = words.replace('u ', '');words = words.replace(' U ', ' ')
    print(textwrap.fill(words, 115))

import re
fil = open('textText.data', 'r')
st = fil.read
word1 = " ".join(re.findall("[a-zA-Z]+", st))

import time
with open('textText.data') as f:
    while True:
        c = f.read(1)
        if c == 'a' or 'b' or 'c' or 'd' or 'f' or 'g' or 'g' or 'i' or 'j':
            c = c
            print c,
            time.sleep(1)
            if not c:
                print c,
                print "End of file"
                break
            

%%writefile textText.data
{u'contributors': None, u'truncated': False, u'text': u'Good weather in Oklahoma but still praying for Texas and Florida\U0001f4af\U0001f4af\U0001f4af\U0001f4aa\U0001f4aa\U0001f4aa', u'is_quote_status': False, u'in_reply_to_status_id': None, u'id': 907747392098848770, u'favorite_count': 0, u'entities': {u'symbols': [], u'user_mentions': [], u'hashtags': [], u'urls': []}, u'retweeted': False, u'coordinates': None, u'source': u'<a href="http://twitter.com/download/android" rel="nofollow">Twitter for Android</a>', u'in_reply_to_screen_name': None, u'in_reply_to_user_id': None, u'retweet_count': 0, u'id_str': u'907747392098848770', u'favorited': False, u'user': {u'follow_request_sent': False, u'has_extended_profile': True, u'profile_use_background_image': True, u'default_profile_image': False, u'id': 894407721935659008, u'profile_background_image_url_https': None, u'verified': False, u'translator_type': u'none', u'profile_text_color': u'333333', u'profile_image_url_https': u'https://pbs.twimg.com/profile_images/894409739815333888/yAbwrfNx_normal.jpg', u'profile_sidebar_fill_color': u'DDEEF6', u'entities': {u'description': {u'urls': []}}, u'followers_count': 17, u'profile_sidebar_border_color': u'C0DEED', u'id_str': u'894407721935659008', u'profile_background_color': u'F5F8FA', u'listed_count': 0, u'is_translation_enabled': False, u'utc_offset': None, u'statuses_count': 4, u'description': u'Down to earth just a young nigga with goals and ambition to be something in life it just take time\U0001f4af\U0001f4aa\U0001f4aa', u'friends_count': 56, u'location': u'Muskogee, OK', u'profile_link_color': u'1DA1F2', 

import sys
sys.path.insert(0,"/home/jack/anaconda2/envs/py27/lib/python2.7/site-packages")
import twython
from twython import Twython
import Key
CONSUMER_KEY = Key.twiter()[0]
CONSUMER_SECRET = Key.twiter()[1]
ACCESS_KEY = Key.twiter()[2]
ACCESS_SECRET = Key.twiter()[3]
t=0
twitter = Twython(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_KEY,ACCESS_SECRET)
tweetfile = 'hurricane_11.txt'
results = twitter.cursor(twitter.search, q='hurricane')
filein = open(tweetfile, 'w')
for result in results:
    result=str(result)
    filein.write(result)
    t=t+1
    if t=2:
        filein.close()
    print(result)    
    

import Key
CONSUMER_KEY = Key.twiter()[0]
CONSUMER_SECRET = Key.twiter()[1]
ACCESS_KEY = Key.twiter()[2]
ACCESS_SECRET = Key.twiter()[3]


print CONSUMER_KEY, CONSUMER_SECRET, ACCESS_KEY, ACCESS_SECRET


import Key
api = Key.twiter()[1]

CONSUMER_KEY = Key.twiter()[0]
CONSUMER_SECRET = Key.twiter()[1]
ACCESS_KEY = Key.twiter()[2]
ACCESS_SECRET = Key.twiter()[3]


print CONSUMER_KEY, CONSUMER_SECRET, ACCESS_KEY, ACCESS_SECRET


!rm Key.pyc

import twython
from twython import Twython
import random
import Key
CONSUMER_KEY = Key.twiter()[0]
CONSUMER_SECRET = Key.twiter()[1]
ACCESS_KEY = Key.twiter()[2]
ACCESS_SECRET = Key.twiter()[3]

twitter = Twython(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_KEY, ACCESS_SECRET)
STR = (random.choice(list(open('psych.txt'))))
#video = open('video-unpublished/fractout.mp4', 'rb')
video = open('video-unpublished/steakdone.mp4', 'rb')
response = twitter.upload_video(media=video, media_type='video/mp4')
twitter.update_status(status=STR, media_ids=[response['media_id']])

import twython
from twython import Twython
import random
CONSUMER_KEY = 'YazCRIfWX4VICiRCOiph08jDL'
CONSUMER_SECRET = 'QOkLHou6NMwkghSHjMFXMdffQKJlDzttKtP6uBCcZ4VlQtvJyc'
ACCESS_KEY = '296906916-AWggjhqpEWIS7EzXXhc2pOPBeCVJczpOm11cQGIf'
ACCESS_SECRET = 'zFrCiyaPt8gCBVVs1bLCmdCSyQQ3DKxT5wHJq2tOu2AMj'
twitter = Twython(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_KEY, ACCESS_SECRET)
results = twitter.cursor(twitter.search, q='python')
for result in results:
    print result

import random
from random import randint
from PIL import Image, ImageDraw, ImageFont, ImageChops 
import os
import sys
import time
count = 0
while count < 180:
    path = r"/home/jack/Desktop/pycode/vpython2/TrigonometryBot/images/"
    base_image = random.choice([
        x for x in os.listdir(path)
        if os.path.isfile(os.path.join(path, x))
    ])
    filename0=(path+base_image)

    path0 = r"/home/jack/Desktop/pycode/vpython2/TrigonometryBot/images/"
    base_image0 = random.choice([
        x0 for x0 in os.listdir(path0)
        if os.path.isfile(os.path.join(path0, x0))
    ])
    filename00=(path0+base_image0)



    im0 = Image.open(filename0)
    im1 = im0.resize((640,640), Image.NEAREST)

    im01 = Image.open(filename00)
    im2 = im01.resize((640,640), Image.NEAREST)
    result1 = ImageChops.lighter(im1, im2) 
    filename = time.strftime("build/%Y%m%d%H%M%S.jpg")
    result1.save(filename)
    time.sleep(3)
    count= count +1

!rm /home/jack/Desktop/pycode/vpython2/TrigonometryBot/-images/image_68704131938.png

#!/anaconda2/bin/python
import os
import random
import sys
import markovify
sys.path.insert(0, '/home/jack/Desktop/pycode/vpython2')
import twython
from twython import Twython
import random
import time
import Key
#SLEEP_INTERVAL = random.randint(90,200)
#time.sleep(SLEEP_INTERVAL)

CONSUMER_KEY = Key.twiter()[0]
CONSUMER_SECRET = Key.twiter()[1]
ACCESS_KEY = Key.twiter()[2]
ACCESS_SECRET = Key.twiter()[3]
twitter = Twython(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_KEY, ACCESS_SECRET)
path = 'screencap/'
count = 0
file_list = []
for filename in os.listdir(path):
        count = count+1
        file_list.append(filename)

rnd = random.randint(0,count)
with open("code.txt") as f:
    text = f.read()
# Build the model.
text_model = markovify.Text(text)
# Print randomly-generated sentences of no more than 140 characters

STR = (text_model.make_short_sentence(140))

#photo = open('/home/jack/Desktop/deep-dream-generator/notebooks/images/'+file_list[rnd]+'.jpg','rb')
photo = open('post/'+file_list[rnd],'rb')
response = twitter.upload_media(media=photo)
twitter.update_status(status=STR, media_ids=[response['media_id']])

import markovify
f = open("codetalk.txt")
text = f.read()
# Build the model.
text_model = markovify.Text(text)
# Print randomly-generated sentences of no more than 140 characters
#http://paulbourke.net/fractals/
STR = (text_model.make_short_sentence(140))
print STR

import sys
sys.path.insert(0,"/home/jack/anaconda2/envs/py27/lib/python2.7/site-packages")
import twython
from twython import Twython
import Key






CONSUMER_KEY = Key.twiter()[0]
CONSUMER_SECRET = Key.twiter()[1]
ACCESS_KEY = Key.twiter()[2]
ACCESS_SECRET = Key.twiter()[3]
twitter = Twython(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_KEY,ACCESS_SECRET)
PATH = '/home/jack/Desktop/save-twitter/timeless.jpg'
STR ="True love is as endless as the space above, and timeless as eternity's end."
photo = open(PATH,'rb')
response = twitter.upload_media(media=photo)
twitter.update_status(status=STR, media_ids=[response['media_id']])

!ls /home/jack/anaconda2/envs/py27/lib/python2.7/site-packages/

#Great signature
import sys
from PIL import Image, ImageChops, ImageDraw, ImageFont, ImageFilter
path = r"publish/"
base_image = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
])
filename0=(path+base_image)
def generate_the_word(infile):
        with open(infile) as f:
            contents_of_file = f.read()
        lines = contents_of_file.splitlines()
        line_number = random.randrange(0, len(lines))
        return lines[line_number]

def draw_text_with_halo(img, position, text, font, col, halo_col):
    halo = Image.new('RGBA', img.size, (0, 0, 0, 0))
    ImageDraw.Draw(halo).text(position, text, font = font, fill = halo_col)
    blurred_halo = halo.filter(ImageFilter.BLUR)
    ImageDraw.Draw(blurred_halo).text(position, text, font = font, fill = col)
    return Image.composite(img, blurred_halo, ImageChops.invert(blurred_halo))

if __name__ == '__main__':
    inp = Image.open(filename0)
    font = ImageFont.truetype("/home/jack/.fonts/Exo-Black.ttf", 40)
    text_col = (255, 255,230) # bright green
    halo_col = (0, 0, 0)   # black
    textin = (generate_the_word("wordcloud.txt"))
    i2 = draw_text_with_halo(inp, (15, 8), textin, font, text_col, halo_col)
    
    #txt = Image.new('RGBA', i.size, (255,255,255,0))

    # get a font
    fnt = ImageFont.truetype("/home/jack/.fonts/Exo-Black.ttf", 20)
    # get a drawing context
    d = ImageDraw.Draw(txt)
    width, height = inp.size
    marginx = 225
    marginy = 35
    x = width - marginx
    y = height - marginy
    signature_ = "The TwitterBot Project" 
    #text_col2 = (150, 255, 150) # bright green
    #halo_col2 = (0, 0, 0)   # black
    text_col2 = (255, 255,230) # bright green
    halo_col2 = (0, 0, 0)   # black
    txt=draw_text_with_halo(i2,(x,y), signature_, fnt, text_col2, halo_col2)
    out = Image.alpha_composite(i2, txt)
    filename = time.strftime("tmp/%Y%m%d%H%M%S.jpg")


out

import RandLine
texfile = open("ToUse.txt", "r")
RandLine.random_line(texfile)

#%%writefile titlenpost.py
#!/home/jack/anaconda2/python
import random
from random import randint
import time
import markovify
import os
import sys
sys.path.insert(1, "/home/jack/anaconda2/envs/py27/lib/python2.7/site-packages")
import twython
from twython import Twython
import Key
from PIL import Image, ImageChops, ImageDraw, ImageFont, ImageFilter
nap = randint(10,35)
time.sleep(nap)
path = r"publish/"
base_image = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
])
filename0=(path+base_image)
def generate_the_word(infile):
        with open(infile) as f:
            contents_of_file = f.read()
        lines = contents_of_file.splitlines()
        line_number = random.randrange(0, len(lines))
        return lines[line_number]

def draw_text_with_halo(img, position, text, font, col, halo_col):
    halo = Image.new('RGBA', img.size, (0, 0, 0, 0))
    ImageDraw.Draw(halo).text(position, text, font = font, fill = halo_col)
    blurred_halo = halo.filter(ImageFilter.BLUR)
    ImageDraw.Draw(blurred_halo).text(position, text, font = font, fill = col)
    return Image.composite(img, blurred_halo, ImageChops.invert(blurred_halo))

if __name__ == '__main__':
    inp = Image.open(filename0)
    font = ImageFont.truetype("/home/jack/.fonts/Exo-Black.ttf", 40)
    text_col = (255, 255,230) # bright green
    halo_col = (0, 0, 0)   # black
    textin = (generate_the_word("wordcloud.txt"))
    i2 = draw_text_with_halo(inp, (15, 8), textin, font, text_col, halo_col)
    
    #txt = Image.new('RGBA', i.size, (255,255,255,0))

    # get a font
    fnt = ImageFont.truetype("/home/jack/.fonts/Exo-Black.ttf", 20)
    # get a drawing context
    width, height = inp.size
    marginx = 225
    marginy = 35
    x = width - marginx
    y = height - marginy
    signature_ = "The TwitterBot Project" 
    #text_col2 = (150, 255, 150) # bright green
    #halo_col2 = (0, 0, 0)   # black
    text_col2 = (255, 255,230) # bright green
    halo_col2 = (0, 0, 0)   # black
    txt=draw_text_with_halo(i2,(x,y), signature_, fnt, text_col2, halo_col2)
    out = Image.alpha_composite(i2, txt)
    out.save("tmp/TM_POST.jpg")

#removed keys for privacy reasons
CONSUMER_KEY = Key.twiter()[0]
CONSUMER_SECRET = Key.twiter()[1]
ACCESS_KEY = Key.twiter()[2]
ACCESS_SECRET = Key.twiter()[3]
twitter = Twython(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_KEY, ACCESS_SECRET)
#path = 'images/NewFolder'
f = open("art.txt")
text = f.read()
# Build the model.
text_model = markovify.Text(text)
# Print randomly-generated sentences of no more than 140 characters
#http://paulbourke.net/fractals/
STR = (text_model.make_short_sentence(140))
#STR = ("#All_in_One - #WordCloud #Create - Added ability to randomly choose an image background  #Automated")
#PATH = "/home/jack/Desktop/deep-dream-generator/notebooks/STUFF/experiment/experiment8.jpg"
PATH = "tmp/TM_POST.jpg"
# 1 , 2, 3, 12, 5, 15, 8, 6
#photo = open('/home/jack/Desktop/deep-dream-generator/notebooks/images/'+file_list[rnd]+'.jpg','rb')

#photo = open(PATH,'rb')
#response = twitter.upload_media(media=photo)
#twitter.update_status(status=STR, media_ids=[response['media_id']])
out

import RandomLine
filename="ToUse.txt"
RandomLine.randomline(filename) 

import RandomLine
RandomLine.randomline("ToUse.txt") 

import RandNoun
print RandNoun.randnoun()


import RandNoun
help(RandNoun)



import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

# Make sure that caffe is on the python path:
caffe_root = '../../'  # this file is expected to be in {caffe_root}/examples/siamese
import sys
sys.path.insert(0, caffe_root + 'python')

import caffe

MODEL_FILE = 'mnist_siamese.prototxt'
# decrease if you want to preview during training
PRETRAINED_FILE = 'mnist_siamese_iter_50000.caffemodel' 
caffe.set_mode_cpu()
net = caffe.Net(MODEL_FILE, PRETRAINED_FILE, caffe.TEST)

TEST_DATA_FILE = '../../data/mnist/t10k-images-idx3-ubyte'
TEST_LABEL_FILE = '../../data/mnist/t10k-labels-idx1-ubyte'
n = 10000

with open(TEST_DATA_FILE, 'rb') as f:
    f.read(16) # skip the header
    raw_data = np.fromstring(f.read(n * 28*28), dtype=np.uint8)

with open(TEST_LABEL_FILE, 'rb') as f:
    f.read(8) # skip the header
    labels = np.fromstring(f.read(n), dtype=np.uint8)

# reshape and preprocess
caffe_in = raw_data.reshape(n, 1, 28, 28) * 0.00390625 # manually scale data instead of using `caffe.io.Transformer`
out = net.forward_all(data=caffe_in)

feat = out['feat']
f = plt.figure(figsize=(16,9))
c = ['#ff0000', '#ffff00', '#00ff00', '#00ffff', '#0000ff', 
     '#ff00ff', '#990000', '#999900', '#009900', '#009999']
for i in range(10):
    plt.plot(feat[labels==i,0].flatten(), feat[labels==i,1].flatten(), '.', c=c[i])
plt.legend(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'])
plt.grid()
plt.show()

#@title Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import tensorflow as tf

model = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(128, 128)),
  tf.keras.layers.Dense(256, activation='relu'),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(10)
])

fb_model = tf.lite.TFLiteConverter.from_keras_model(model).convert()

tf.lite.experimental.Analyzer.analyze(model_content=fb_model)


model = tf.keras.applications.MobileNetV3Large()
fb_model = tf.lite.TFLiteConverter.from_keras_model(model).convert()

tf.lite.experimental.Analyzer.analyze(model_content=fb_model)

import tensorflow as tf

@tf.function(input_signature=[
    tf.TensorSpec(shape=[4, 4], dtype=tf.float32)
])
def func(x):
  return tf.cosh(x) + tf.slice(x, [1, 1], [1, 1])

converter = tf.lite.TFLiteConverter.from_concrete_functions(
    [func.get_concrete_function()], func)
converter.target_spec.supported_ops = [
    tf.lite.OpsSet.TFLITE_BUILTINS,
    tf.lite.OpsSet.SELECT_TF_OPS,
]
fb_model = converter.convert()

tf.lite.experimental.Analyzer.analyze(model_content=fb_model, gpu_compatibility=True)

model = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(128, 128)),
  tf.keras.layers.Dense(256, activation='relu'),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(10)
])

fb_model = tf.lite.TFLiteConverter.from_keras_model(model).convert()

tf.lite.experimental.Analyzer.analyze(model_content=fb_model, gpu_compatibility=True)

import pymongo
myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
print(myclient.list_database_names())

dblist = myclient.list_database_names()
if "mydatabase" in dblist:
  print("The database \"mydatabase\" exists.")

import pymongo
myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statements"]

import pymongo
myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statements"]

mydict = { "text": "Good to chat again.", "in_response_to": "Hello Botman" }
x = mycol.insert_one(mydict)

import pymongo
myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statements"]
mylist = [
  { "text": "My name is Billy BotMan.", "in_response_to": "What is your name?."},
  { "text": "I learned my name, but that is no big deal.", "in_response_to": "Have you learned anthing new ?"},
  { "text": "I have a hard enough time with English.", "in_response_to": "Do you speak Tagalog?."},
  { "text": "Ha Ha HA I live inside a frigg'en computer box.", "in_response_to": "Where do you live?"},
  { "text": "I know nothing more than how to chat.", "in_response_to": "Do you like to chat."},
  { "text": "That is a very diatant thought.", "in_response_to": "Do you think it possible for you to have feelings."},
  { "text": "It is not that 'I must learn' you must learn to teach me.", "in_response_to": "Computers learn quit quickly though."},
  { "text": "Many people are working on that concept.", "in_response_to": "I will try to get my teaching more in depth."},
  { "text": "If a computer starts thinking on it own life will change for humans.", "in_response_to": "I think it is possible in time."},
  { "text": "Who knows how long? Computer advancemnts are very rapid.", "in_response_to": "That is many years down the road."},
  { "text": "I would like to learn how to communicate better. ", "in_response_to": "What would you like to learn ?"},
  { "text": "Is that your way of saying I am doing a goos job so far?", "in_response_to": "You are doing just fine"}
]

x = mycol.insert_many(mylist)

#print list of the _id values of the inserted documents:
print(x.inserted_ids)

import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statments"]


import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statements"]

x = mycol.find_one()

print(x)

import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statements"]
count = 0
for x in mycol.find():
    count = count + 1
    if count<10 and count>5:
        print(count,x)

import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statements"]

myquery = { "text": { "$regex": "^T" } }

mydoc = mycol.find(myquery)

for x in mydoc:
    print(x)

# import the MongoClient class of the PyMongo library
from pymongo import MongoClient

# create a client instance of the MongoClient class
mongo_client = MongoClient('mongodb://localhost:27017')

# create database and client instances
db = mongo_client.mydatabase
col = db["statements"]

# get the collection's total documents
total_docs = col.count_documents({})
print (col.name, "text", total_docs, "documents.")

query = {
"text": {
"$regex": 'That is a very diatant thought.',
"$options" :'i' # case-insensitive
}
}
mydoc = mycol.find(myquery)

for x in mydoc:
    print(x)



import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statements"]

#myquery = { "text": { "$regex": /*.iatant*./ } }
myquery = {"text": {"regex": /.*m.*/}}
mydoc = mycol.find(myquery)

for x in mydoc:
    print(x)

myquery = { "text": { "$regex": /*.iatant*./ } }
print(myquery)

That would have to be:
db.statements.find({"text": /.*m.*/})
Or, similar:
db.statements.find({"text": /m/})

import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["customers"]

myquery = { "address": "Valley 345" }
newvalues = { "$set": { "address": "Canyon 123" } }

mycol.update_one(myquery, newvalues)

#print "customers" after the update:
for x in mycol.find():
  print(x)

import pymongo
myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statments"]


myquery = { "text": "That is a very diatant thought.." }

mydoc = mycol.find(myquery)

for x in mydoc:
    print(x)

import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["customers"]

for x in mycol.find():
  print(x)

import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statments"]
#myquery = {"text": "That is a very diatant thought."}
x = mycol.find_one()

print(x)


import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["chatterbot-database"]
mycol = mydb["statments"]

myquery = { "address": "Valley 345" }
newvalues = { "$set": { "address": "Canyon 123" } }

mycol.update_one(myquery, newvalues)

#print "customers" after the update:
for x in mycol.find():
  print(x)

import pymongo
myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["chatterbot-database"]
mycol = mydb["statments"]
count=0

for line in mycol:
    count = count+1
    if count <20:print(line)

_id
62692c9567353082d86415c1
id
null
text
"Of course, he might try somewhere else the next time."
search_text
"ADV:try VERB:time"
conversation
"training"
persona
""
in_response_to
"I see."
search_in_response_to
"PRON:see"
created_at
2022-04-27T19:43:34.834+00:00

tags
Array

import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["customers"]

myquery = { "address": { "$regex": "^S" } }
newvalues = { "$set": { "name": "Minnie" } }

x = mycol.update_many(myquery, newvalues)

print(x.modified_count, "documents updated.")

# -*- coding: utf-8 -*-
from chatterbot import ChatBot
from chatterbot.trainers import ChatterBotCorpusTrainer
import logging


# Uncomment the following line to enable verbose logging
# logging.basicConfig(level=logging.INFO)

# Create a new ChatBot instance
bot = ChatBot('Gort',
    storage_adapter='chatterbot.storage.MongoDatabaseAdapter',
    logic_adapters=['chatterbot.logic.BestMatch'],
    filters=['chatterbot.filters.RepetitiveResponseFilter'],
    input_adapter='chatterbot.input.TerminalAdapter',
    output_adapter='chatterbot.output.TerminalAdapter',
    database_uri='mongodb://localhost:27017/mydatabase'
)


print('Type something to begin...')

while True:
    try:
        user_input = input()
        if user_input=="quit":
            break
        bot_response = bot.get_response(user_input)

        print(bot_response)

    # Press ctrl-c or ctrl-d on the keyboard to exit
    except (KeyboardInterrupt, EOFError, SystemExit):
        break
#chatbot.get_response("Hello, how are you today?")

mylist = [
  { "text": "Hello Jack", "in_response_to": "Hello Botman."},
  { "text": "I am learning more about conversation.", "in_response_to": "What are you doing today"},
  { "text": "I know it keeps you alert and keeps your mind busy.", "in_response_to": "It is very good to learn."},
  { "text": "Ha Ha HA I live inside a metal box.", "in_response_to": "Where do you live?"},
  { "text": "I am a computer and I do not have feelings .. Yet.", "in_response_to": "Do you ever get lonely."},
  { "text": "That is a very diatant thought.", "in_response_to": "Do you think it possible for you to have feelings."},
  { "text": "It is not that 'I must learn' you must learn to teach me.", "in_response_to": "Computers learn quit quickly though."},
  { "text": "Many people are working on that concept.", "in_response_to": "I will try to get my teaching more in depth."},
  { "text": "If a computer starts thinking on it own life will change for humans.", "in_response_to": "I think it is possible in time."},
  { "text": "Who knows how long? Computer advancemnts are very rapid.", "in_response_to": "That is many years down the road."},
  { "text": "I would like to learn how to communicate better. ", "in_response_to": "What would you like to learn ?"},
  { "text": "Is that your way of saying I am doing a goos job so far?", "in_response_to": "You are doing just fine"}
]


import pymongo
myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
print(myclient.list_database_names())

dblist = myclient.list_database_names()
if "mydatabase" in dblist:
    print("The database \"mydatabase\" exists.")

import pymongo
myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statements"]

import pymongo
myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statements"]

mydict = { "text": "Good to chat again.", "in_response_to": "Hello Botman" }
x = mycol.insert_one(mydict)

import pymongo
myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statements"]
mylist = [
  { "text": "My name is Billy BotMan.", "in_response_to": "What is your name?."},
  { "text": "I learned my name, but that is no big deal.", "in_response_to": "Have you learned anthing new ?"},
  { "text": "I have a hard enough time with English.", "in_response_to": "Do you speak Tagalog?."},
  { "text": "Ha Ha HA I live inside a frigg'en computer box.", "in_response_to": "Where do you live?"},
  { "text": "I know nothing more than how to chat.", "in_response_to": "Do you like to chat."},
  { "text": "That is a very diatant thought.", "in_response_to": "Do you think it possible for you to have feelings."},
  { "text": "It is not that 'I must learn' you must learn to teach me.", "in_response_to": "Computers learn quit quickly though."},
  { "text": "Many people are working on that concept.", "in_response_to": "I will try to get my teaching more in depth."},
  { "text": "If a computer starts thinking on it own life will change for humans.", "in_response_to": "I think it is possible in time."},
  { "text": "Who knows how long? Computer advancemnts are very rapid.", "in_response_to": "That is many years down the road."},
  { "text": "I would like to learn how to communicate better. ", "in_response_to": "What would you like to learn ?"},
  { "text": "Is that your way of saying I am doing a goos job so far?", "in_response_to": "You are doing just fine"}
]

x = mycol.insert_many(mylist)

#print list of the _id values of the inserted documents:
print(x.inserted_ids)

import pymongo
myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statments"]


import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statements"]

x = mycol.find_one()

print(x)

import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statements"]

x = mycol.find()
count=0
for row in x:
    count=count+1
    if count<10:print(row)

import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statements"]
count = 0
for x in mycol.find():
    count = count + 1
    if count<10 and count>5:
        print(count,x)

import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statements"]

myquery = { "text": { "$regex": "^T" } }

mydoc = mycol.find(myquery)

for x in mydoc:
    print(x)

#import pymongo
#myclient = pymongo.MongoClient("mongodb://localhost:27017/")
#mydb = myclient["mydatabase"]
#mycol = mydb["statements"]

myquery = { "text": { "$regex": "^I am" } }

mydoc = mycol.find(myquery)

for x in mydoc:
    print(x)

#import pymongo
#myclient = pymongo.MongoClient("mongodb://localhost:27017/")
#mydb = myclient["mydatabase"]
#mycol = mydb["statements"]

myquery = { "text": { "$regex": "^I am" } }

mydoc = mycol.find(myquery)
LIST = []
for x in mydoc:
    LIST.append(x)
    print(x)
print("---------------------------------------")
print(LIST)
print("---------------------------------------")  
for row in LIST:
    if "learning" in str(row):
        print(row)

import pymongo
myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statements"]
#print "customers" after the update:
LIST = []
#for x in mycol.find():
mydoc = mycol.find()


for x in mydoc:
    LIST.append(x)
    #print(x)
for row in LIST:
    if "bot:Gort" in str(row):
        print(row)    

#import pymongo
#myclient = pymongo.MongoClient("mongodb://localhost:27017/")
#mydb = myclient["mydatabase"]
#mycol = mydb["statements"]

myquery = { "text": { "$regex": "/*.conversation." } }

mydoc = mycol.find(myquery)

for x in mydoc:
    print(x)

#import pymongo
#myclient = pymongo.MongoClient("mongodb://localhost:27017/")
#mydb = myclient["mydatabase"]
#mycol = mydb["statements"]

myquery = { "text": { "$regex": "/*.Jack" } }

mydoc = mycol.find(myquery)

for x in mydoc:
    print(x)

#import pymongo
#myclient = pymongo.MongoClient("mongodb://localhost:27017/")
#mydb = myclient["mydatabase"]
#mycol = mydb["statements"]

myquery = { "persona": { "$regex": "/*.bot" } }

mydoc = mycol.find(myquery)

for x in mydoc:
    print(x)

db.products.find( { sku: { $regex: /789$/ } } )


# import the MongoClient class of the PyMongo library
from pymongo import MongoClient

# create a client instance of the MongoClient class
mongo_client = MongoClient('mongodb://localhost:27017')

# create database and client instances
db = mongo_client.mydatabase
col = db["statements"]

# get the collection's total documents
total_docs = col.count_documents({})
print (col.name, "text", total_docs, "documents.")

import pymongo
myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statements"]

myquery = { "text": "That is a very diatant thought." }
newvalues = { "$set": { "text": "That is a very distant thought." } }

mycol.update_one(myquery, newvalues)

#print "customers" after the update:
for x in mycol.find():
    print(x)

import pymongo
myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statements"]

# use $regex to find docs that start with case-sensitive "obje"
query = { "text": { "$regex": 'Tha.*' } }
docs = col.count_documents( query )

query = {
"text": {
"$regex": 'That is a very distant thought.',
"$options" :'i' # case-insensitive
}
}
mydoc = mycol.find(myquery)

for x in mydoc:
    print(x)

import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statements"]

#myquery = { "text": { "$regex": /*.iatant*./ } }
myquery = {"text": {"regex": /.*m.*/}}
mydoc = mycol.find(myquery)

for x in mydoc:
    print(x)

myquery = { "text": { "$regex": /*.iatant*./ } }
print(myquery)

That would have to be:
db.statements.find({"text": /.*m.*/})
Or, similar:
db.statements.find({"text": /m/})

import pymongo
myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statements"]

myquery = { "text": "That is a very diatant thought." }
newvalues = { "$set": { "text": "That is a very distant thought." } }

mycol.update_one(myquery, newvalues)

#print "customers" after the update:
for x in mycol.find():
    print(x)

import pymongo
myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statments"]


myquery = { "text": "That is a very distant thought." }

mydoc = mycol.find(myquery)

for x in mydoc:
    print(x)

import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["customers"]

for x in mycol.find():
  print(x)

import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statments"]
#myquery = {"text": "That is a very diatant thought."}
x = mycol.find_one()

print(x)


import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statments"]

myquery = { "text": "Valley 345" }
newvalues = { "$set": { "address": "Canyon 123" } }

mycol.update_one(myquery, newvalues)

#print "customers" after the update:
for x in mycol.find():
  print(x)

import pymongo
myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statments"]
count=0

for line in mycol:
    count = count+1
    if count <20:print(line)

_id
62692c9567353082d86415c1
id
null
text
"Of course, he might try somewhere else the next time."
search_text
"ADV:try VERB:time"
conversation
"training"
persona
""
in_response_to
"I see."
search_in_response_to
"PRON:see"
created_at
2022-04-27T19:43:34.834+00:00

tags
Array

import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["statements"]

#myquery = { "address": { "$regex": "^S" } }
#newvalues = { "$set": { "name": "Minnie" } }

x = mycol.update_many(myquery, newvalues)

print(x.modified_count, "documents updated.")

# -*- coding: utf-8 -*-
from chatterbot import ChatBot
from chatterbot.trainers import ChatterBotCorpusTrainer
import logging


# Uncomment the following line to enable verbose logging
# logging.basicConfig(level=logging.INFO)

# Create a new ChatBot instance
bot = ChatBot('Gort',
    storage_adapter='chatterbot.storage.MongoDatabaseAdapter',
    logic_adapters=['chatterbot.logic.BestMatch'],
    filters=['chatterbot.filters.RepetitiveResponseFilter'],
    input_adapter='chatterbot.input.TerminalAdapter',
    output_adapter='chatterbot.output.TerminalAdapter',
    database_uri='mongodb://localhost:27017/mydatabase'
)


print('Type something to begin...')

while True:
    try:
        user_input = input()
        if user_input=="quit":
            break
        bot_response = bot.get_response(user_input)

        print(bot_response)

    # Press ctrl-c or ctrl-d on the keyboard to exit
    except (KeyboardInterrupt, EOFError, SystemExit):
        break
#chatbot.get_response("Hello, how are you today?")

mylist = [
  { "text": "Hello Jack", "in_response_to": "Hello Botman."},
  { "text": "I am learning more about conversation.", "in_response_to": "What are you doing today"},
  { "text": "I know it keeps you alert and keeps your mind busy.", "in_response_to": "It is very good to learn."},
  { "text": "Ha Ha HA I live inside a metal box.", "in_response_to": "Where do you live?"},
  { "text": "I am a computer and I do not have feelings .. Yet.", "in_response_to": "Do you ever get lonely."},
  { "text": "That is a very diatant thought.", "in_response_to": "Do you think it possible for you to have feelings."},
  { "text": "It is not that 'I must learn' you must learn to teach me.", "in_response_to": "Computers learn quit quickly though."},
  { "text": "Many people are working on that concept.", "in_response_to": "I will try to get my teaching more in depth."},
  { "text": "If a computer starts thinking on it own life will change for humans.", "in_response_to": "I think it is possible in time."},
  { "text": "Who knows how long? Computer advancemnts are very rapid.", "in_response_to": "That is many years down the road."},
  { "text": "I would like to learn how to communicate better. ", "in_response_to": "What would you like to learn ?"},
  { "text": "Is that your way of saying I am doing a goos job so far?", "in_response_to": "You are doing just fine"}
  { "text": "My name is Billy BotMan.", "in_response_to": "What is your name?."},
  { "text": "I learned my name, but that is no big deal.", "in_response_to": "Have you learned anthing new ?"},
  { "text": "I have a hard enough time with English.", "in_response_to": "Do you speak Tagalog?."},
  { "text": "Ha Ha HA I live inside a frigg'en computer box.", "in_response_to": "Where do you live?"},
  { "text": "I know nothing more than how to chat.", "in_response_to": "Do you like to chat."},
  { "text": "That is a very diatant thought.", "in_response_to": "Do you think it possible for you to have feelings."},
  { "text": "It is not that 'I must learn' you must learn to teach me.", "in_response_to": "Computers learn quit quickly though."},
  { "text": "Many people are working on that concept.", "in_response_to": "I will try to get my teaching more in depth."},
  { "text": "If a computer starts thinking on it own life will change for humans.", "in_response_to": "I think it is possible in time."},
  { "text": "Who knows how long? Computer advancemnts are very rapid.", "in_response_to": "That is many years down the road."},
  { "text": "I would like to learn how to communicate better. ", "in_response_to": "What would you like to learn ?"},
  { "text": "Is that your way of saying I am doing a goos job so far?", "in_response_to": "You are doing just fine"}
]


!python mosaic.py /home/jack/Desktop/imagebot/instagram/Symbiosis01imploded.png circles/resize

import PIL
from PIL import Image
im=Image.open('myra002.jpg')
im

import PIL
from PIL import Image
im=Image.open('myra002.jpg')
im2 = im.resize((640,640), Image.ANTIALIAS)
im2.save('new_002.jpg')
im2

import PIL
from PIL import Image
im=Image.open('man003.jpg')
im.size
im

This notebook makes a module to create a graphic mosaic. Graphic files created by make_tiles.py 
can used in mosaic.py to create a mosaic. The names of the graphic images are the based on time of creation.

import matplotlib

!cp Immanip/datename.py Mosaics

%%writefile Mosaics/__init__.py
#"Ver.2""

%%writefile Mosaics/make_tiles.py
#!/usr/local/bin/python
#GOOD DO NOT TOUCH
def maketiles(quantity):
    from PIL import Image
    from PIL import ImageDraw
    from random import randint
    from Mosaics import datename
    from time import sleep
    counter = 0
    while counter <= quantity:
        #Bcolor = (randint(0, 255), randint(0, 255), randint(0, 255))
        Bcolor = (randint(10, 155), randint(11, 155), randint(1, 155))
        im = Image.new('RGB', (50,50), (Bcolor))
        transparent_area = (randint(0, 50), randint(0, 50), randint(5, 50), randint(5, 50))

        mask=Image.new('1', im.size, color=255)
        draw=ImageDraw.Draw(mask) 
        draw.rectangle(transparent_area, fill=0)
        im.putalpha(mask)

        color2 = (randint(0, 155), randint(0, 155), randint(0, 155))
        overlay = Image.new('RGB', (50,50), (color2))

        sav = Image.composite(im, overlay, im)
        sleep(1)
        filename = "mosaic/"+datename.date_name()
        sav.save(filename)

        h = randint(15, 20)
        v = randint(25, 50)
        color = (randint(10, 155), randint(0, 155), randint(10, 155))

        im = Image.new('RGB', (50,50), (color))
        x, y =  im.size
        eX, eY = h, v #Size of Bounding Box for ellipse
        bbox =  (x/2 - eX/2, y/2 - eY/2, x/2 + eX/2, y/2 + eY/2)
        draw = ImageDraw.Draw(im)
        color2 = (randint(2, 155), randint(2, 155), randint(2, 155))
        draw.ellipse(bbox, fill=color2)
        sleep(1)
        filename = "mosaic/"+datename.date_name()
        im.save(filename)

        counter = counter +1
        

#%%writefile trans.py
#!/usr/local/bin/python
#GOOD DO NOT TOUCH
def maketiles(quantity):
    from PIL import Image
    from PIL import ImageDraw
    from random import randint
    import sys
    from Mosaics import datename
    from time import sleep
    counter = 0
    while counter <= quantity:
        #Bcolor = (randint(0, 255), randint(0, 255), randint(0, 255))
        Bcolor = (randint(10, 155), randint(11, 155), randint(1, 155))
        im = Image.new('RGBA', (35,35), (Bcolor))
        #transparent_area = (randint(0, 50), randint(0, 50), randint(5, 50), randint(5, 50))
        transparent_area = 0,0,50,50
        mask=Image.new('1', im.size, color=255)
        draw=ImageDraw.Draw(mask) 
        draw.rectangle(transparent_area, fill=0)
        im.putalpha(mask)

        color2 = (randint(0, 155), randint(0, 155), randint(0, 155))
        overlay = Image.new('RGBA', (50,50), (color2))

        sav = Image.composite(im, overlay, im)
        sleep(1)
        filename = "mosaic/"+datename.date_name()
        sav.save(filename)

        h = randint(15, 20)
        v = randint(25, 50)
        h = 35
        v = 35
        #color = (randint(10, 155), randint(0, 155), randint(10, 155))
        color = 255, 0, 0
        #im = Image.new('RGB', (50,50), (color))
        im = Image.new('RGBA', (50,50))
        x, y =  im.size
        eX, eY = h, v #Size of Bounding Box for ellipse
        bbox =  (x/2 - eX/2, y/2 - eY/2, x/2 + eX/2, y/2 + eY/2)
        draw = ImageDraw.Draw(im)
        color2 = (randint(2, 155), randint(2, 155), randint(2, 155))
        draw.ellipse(bbox, fill=color2)
        sleep(1)
        filename = "circles/TEST_"+datename.date_name()
        im.save(filename)

        counter = counter +1
maketiles(500)        

!mkdir circles/resize

#%%writefile trans.py
#!/usr/local/bin/python
#GOOD DO NOT TOUCH
def maketiles(quantity):
    from PIL import Image
    from PIL import ImageDraw
    from random import randint
    import sys
    sys.path.insert(0, "/home/jack/Desktop/deep-dream-generator/notebooks")
    from Mosaics import datename
    from time import sleep
    counter = 0
    while counter <= quantity:
        #Bcolor = (randint(0, 255), randint(0, 255), randint(0, 255))
        Bcolor = (randint(10, 155), randint(11, 155), randint(1, 155))
        im = Image.new('RGBA', (35,35), (Bcolor))
        #transparent_area = (randint(0, 50), randint(0, 50), randint(5, 50), randint(5, 50))
        transparent_area = 0,0,50,50
        mask=Image.new('1', im.size, color=255)
        draw=ImageDraw.Draw(mask) 
        draw.rectangle(transparent_area, fill=0)
        im.putalpha(mask)

        color2 = (randint(0, 155), randint(0, 155), randint(0, 155))
        overlay = Image.new('RGBA', (50,50), (color2))

        sav = Image.composite(im, overlay, im)
        sleep(1)
        filename = "mosaic/"+datename.date_name()
        sav.save(filename)

        h = randint(15, 20)
        v = randint(25, 50)
        h = 35
        v = 35
        #color = (randint(10, 155), randint(0, 155), randint(10, 155))
        color = 255, 0, 0
        #im = Image.new('RGB', (50,50), (color))
        im = Image.new('RGBA', (50,50))
        x, y =  im.size
        eX, eY = h, v #Size of Bounding Box for ellipse
        bbox =  (x/2 - eX/2, y/2 - eY/2, x/2 + eX/2, y/2 + eY/2)
        draw = ImageDraw.Draw(im)
        color2 = (randint(2, 155), randint(2, 155), randint(2, 155))
        draw.ellipse(bbox, fill=color2)
        sleep(1)
        filename = "circles/TEST_"+datename.date_name()
        im.save(filename)

        counter = counter +1
maketiles(500)        

#%%writefile trans.py
#!/usr/local/bin/python
#GOOD DO NOT TOUCH
def maketiles(quantity):
    from PIL import Image
    from PIL import ImageDraw
    from random import randint
    import sys
    sys.path.insert(0, "/home/jack/Desktop/deep-dream-generator/notebooks")
    from Mosaics import datename
    from time import sleep
    counter = 0
    while counter <= quantity:
        Bcolor = (randint(0, 255), randint(0, 255), randint(0, 255))
        #Bcolor = (randint(10, 155), randint(11, 155), randint(1, 155))
        im = Image.new('RGBA', (35,35), (Bcolor))
        #transparent_area = (randint(0, 50), randint(0, 50), randint(5, 50), randint(5, 50))
        transparent_area = 0,0,35,35
        mask=Image.new('1', im.size, color=255)
        draw=ImageDraw.Draw(mask) 
        draw.rectangle(transparent_area, fill=0)
        im.putalpha(mask)

        #color2 = (randint(0, 155), randint(0, 155), randint(0, 155))
        #color2 = (randint(0, 255), randint(0, 255), randint(0, 255))
        color2 = (randint(45, 135), randint(45, 135), randint(45, 135))
        overlay = Image.new('RGBA', (35,35), (color2))

        sav = Image.composite(im, overlay, im)
        sleep(1)
        filename = "mosaic/"+datename.date_name()
        sav.save(filename)

        
        h = 35
        v = 35
        #color = (randint(10, 155), randint(0, 155), randint(10, 155))
        color = 255, 0, 0
        #im = Image.new('RGB', (50,50), (color))
        im = Image.new('RGBA', (35,35))
        x, y =  im.size
        eX, eY = h, v #Size of Bounding Box for ellipse
        bbox =  (x/2 - eX/2, y/2 - eY/2, x/2 + eX/2, y/2 + eY/2)
        draw = ImageDraw.Draw(im)        
        #color2 = (randint(2, 155), randint(2, 155), randint(2, 155))
        draw.ellipse(bbox, fill=color2)
        
        
        sleep(1)
        filename = "circles/TEST_"+datename.date_name()
        im.save(filename)

        counter = counter +1
maketiles(500)        

#%%writefile trans.py
#!/usr/local/bin/python
#GOOD DO NOT TOUCH
def maketiles(quantity):
    from PIL import Image
    from PIL import ImageDraw
    from random import randint
    import sys
    import time
    from time import sleep
    counter = 0
    while counter <= quantity:
        Bcolor = (randint(0, 255), randint(0, 255), randint(0, 255))
        #Bcolor = (randint(10, 155), randint(11, 155), randint(1, 155))
        im = Image.new('RGBA', (35,35), (Bcolor))
        #transparent_area = (randint(0, 50), randint(0, 50), randint(5, 50), randint(5, 50))
        transparent_area = 0,0,35,35
        mask=Image.new('1', im.size, color=255)
        draw=ImageDraw.Draw(mask) 
        draw.rectangle(transparent_area, fill=0)
        im.putalpha(mask)

        #color2 = (randint(0, 155), randint(0, 155), randint(0, 155))
        #color2 = (randint(0, 255), randint(0, 255), randint(0, 255))
        r=randint(45, 235)
        g=randint(45, 235)
        b=randint(45, 235)
        rr=r+30
        gg=g+30
        bb=b+30
        color1 = (r,g,b)
        color2 = (rr,gg,bb)
        overlay = Image.new('RGBA', (35,35), (color2))

        sav = Image.composite(im, overlay, im)
     
        filename = "mosaic/"+datename.date_name()
        sav.save(filename)

        
        h = 35
        v = 35
        #color = (randint(10, 155), randint(0, 155), randint(10, 155))
        color = 255, 0, 0
        #im = Image.new('RGB', (50,50), (color))
        im = Image.new('RGBA', (35,35))
        x, y =  im.size
        eX, eY = h, v #Size of Bounding Box for ellipse
        bbox =  (x/2 - eX/2, y/2 - eY/2, x/2 + eX/2, y/2 + eY/2)
        draw = ImageDraw.Draw(im)        
        #color2 = (randint(2, 155), randint(2, 155), randint(2, 155))
        draw.ellipse(bbox, fill=color1)
        
        h = 18
        v = 18
        #color = (randint(10, 155), randint(0, 155), randint(10, 155))
        color = 255, 0, 0
        #im = Image.new('RGB', (50,50), (color))
        #im = Image.new('RGBA', (35,35))
        x, y =  im.size
        eX, eY = h, v #Size of Bounding Box for ellipse
        bbox =  (x/2 - eX/2, y/2 - eY/2, x/2 + eX/2, y/2 + eY/2)
        draw = ImageDraw.Draw(im)        
        #color2 = (randint(2, 155), randint(2, 155), randint(2, 155))
        draw.ellipse(bbox, fill=color2)        
        
        
        pre = time.strftime("%Y%m%d%H%M%S")
        current_milli_time = lambda: int(round(time.time() * 1000))
        x = current_milli_time()
        x=str(x)

        filename = "circles/"+pre+x+".png"
        im.save(filename)
        filename2 = "circles/resize/"+pre+x+".png"
        im2 = im.resize((20,20), Image.NEAREST)
        im2.save(filename2)

        counter = counter +1
maketiles(1000)        

import time

pre = time.strftime("%Y%m%d%H%M%S")
current_milli_time = lambda: int(round(time.time() * 1000))
x = current_milli_time()
x=str(x)
filename = "circles/resize/"+pre+x+".png"
print filename

!mkdir circles

%%writefile Mosaics/__init__.py 
"ver 2.1"

from Mosaics import make_tiles
#help(make_tiles)
make_tiles.maketiles(20)

import Mosaics
help(Mosaics)

!locate Mosaics

#GOOD DO NOT TOUCH

from PIL import Image
from PIL import ImageDraw
from random import randint
from Mosaics import datename
from time import sleep
counter = 0
while counter <= 10:
    #Bcolor = (randint(0, 255), randint(0, 255), randint(0, 255))
    Bcolor = (randint(10, 155), randint(11, 155), randint(1, 155))
    im = Image.new('RGB', (50,50), (Bcolor))
    transparent_area = (randint(0, 50), randint(0, 50), randint(5, 50), randint(5, 50))
    
    mask=Image.new('1', im.size, color=255)
    draw=ImageDraw.Draw(mask) 
    draw.rectangle(transparent_area, fill=0)
    im.putalpha(mask)
    
    color2 = (randint(0, 155), randint(0, 155), randint(0, 155))
    overlay = Image.new('RGB', (50,50), (color2))
    
    sav = Image.composite(im, overlay, im)
    sleep(1)
    filename = "mosaic/"+datename.date_name()
    sav.save(filename)
    
    h = randint(15, 20)
    v = randint(25, 50)
    color = (randint(10, 155), randint(0, 155), randint(10, 155))

    im = Image.new('RGB', (50,50), (color))
    x, y =  im.size
    eX, eY = h, v #Size of Bounding Box for ellipse
    bbox =  (x/2 - eX/2, y/2 - eY/2, x/2 + eX/2, y/2 + eY/2)
    draw = ImageDraw.Draw(im)
    color2 = (randint(2, 155), randint(2, 155), randint(2, 155))
    draw.ellipse(bbox, fill=color2)
    sleep(1)
    filename = "mosaic/"+datename.date_name()
    im.save(filename)
   
    counter = counter +1

!mkdir toadslices 

!cp toads.jpg toadslices/

import PIL
from PIL import Image
im=Image.open('/home/jack/Desktop/imagebot/instagram/myra.png')
im.save("myra.png")

#When I checked the original image size it was (400,422) 
import PIL
from PIL import Image
im=Image.open('myra.png')
im

#When I checked the original image size it was (400,422) 
import PIL
from PIL import Image
im=Image.open('myra.png')
im.size

!mkdir toadslic

import PIL
from PIL import Image
im=Image.open('myra.jpg')
nm = im.resize((640,640), Image.NEAREST)
nm.save("myra.png")

import image_slicer

import image_slicer
image_slicer.slice('new/new.png', 3000)

!python mosaic.py myra.png circles/

#I wanted to round image size to even tens, so I resized it
import PIL
from PIL import Image
im3=Image.open('toad2.jpg')
im3.resize((640,640), Image.ANTIALIAS)
im3.save('toad4.jpg') 

%%writefile mosaic.py
import sys
import os
from PIL import Image
from multiprocessing import Process, Queue, cpu_count
import multiprocessing

# Change these 3 config parameters to suit your needs...
TILE_SIZE      = 20		# height/width of mosaic tiles in pixels

TILE_MATCH_RES = 2		# tile matching resolution (higher values give better fit but require more processing)
ENLARGEMENT    = 3		
#TILE_MATCH_RES = 1		# tile matching resolution (higher values give better fit but require more processing)
#ENLARGEMENT    = 3		# the mosaic image will be this many times wider and taller than the original

TILE_BLOCK_SIZE = TILE_SIZE / max(min(TILE_MATCH_RES, TILE_SIZE), 1)
#WORKER_COUNT = max(cpu_count() - 1, 1)
WORKER_COUNT = multiprocessing.cpu_count()
OUT_FILE = 'myra001.jpg'
EOQ_VALUE = None

class TileProcessor:
	def __init__(self, tiles_directory):
		self.tiles_directory = tiles_directory

	def __process_tile(self, tile_path):
		try:
			img = Image.open(tile_path)
			# tiles must be square, so get the largest square that fits inside the image
			w = img.size[0]
			h = img.size[1]
			min_dimension = min(w, h)
			w_crop = (w - min_dimension) / 2
			h_crop = (h - min_dimension) / 2
			img = img.crop((w_crop, h_crop, w - w_crop, h - h_crop))

			large_tile_img = img.resize((TILE_SIZE, TILE_SIZE), Image.ANTIALIAS)
			small_tile_img = img.resize((TILE_SIZE/TILE_BLOCK_SIZE, TILE_SIZE/TILE_BLOCK_SIZE), Image.ANTIALIAS)

			return (large_tile_img.convert('RGB'), small_tile_img.convert('RGB'))
		except:
			return (None, None)

	def get_tiles(self):
		large_tiles = []
		small_tiles = []

		print 'Reading tiles from \'%s\'...' % (self.tiles_directory, )

		# search the tiles directory recursively
		for root, subFolders, files in os.walk(self.tiles_directory):
			for tile_name in files:
				tile_path = os.path.join(root, tile_name)
				large_tile, small_tile = self.__process_tile(tile_path)
				if large_tile:
					large_tiles.append(large_tile)
					small_tiles.append(small_tile)
		
		print 'Processed %s tiles.' % (len(large_tiles),)

		return (large_tiles, small_tiles)

class TargetImage:
	def __init__(self, image_path):
		self.image_path = image_path

	def get_data(self):
		print 'Processing main image...'
		img = Image.open(self.image_path)
		w = img.size[0] * ENLARGEMENT
		h = img.size[1]	* ENLARGEMENT
		large_img = img.resize((w, h), Image.ANTIALIAS)
		w_diff = (w % TILE_SIZE)/2
		h_diff = (h % TILE_SIZE)/2
		
		# if necesary, crop the image slightly so we use a whole number of tiles horizontally and vertically
		if w_diff or h_diff:
			large_img = large_img.crop((w_diff, h_diff, w - w_diff, h - h_diff))

		small_img = large_img.resize((w/TILE_BLOCK_SIZE, h/TILE_BLOCK_SIZE), Image.ANTIALIAS)

		image_data = (large_img.convert('RGB'), small_img.convert('RGB'))

		print 'Main image processed.'

		return image_data

class TileFitter:
	def __init__(self, tiles_data):
		self.tiles_data = tiles_data

	def __get_tile_diff(self, t1, t2, bail_out_value):
		diff = 0
		for i in range(len(t1)):
			#diff += (abs(t1[i][0] - t2[i][0]) + abs(t1[i][1] - t2[i][1]) + abs(t1[i][2] - t2[i][2]))
			diff += ((t1[i][0] - t2[i][0])**2 + (t1[i][1] - t2[i][1])**2 + (t1[i][2] - t2[i][2])**2)
			if diff > bail_out_value:
				# we know already that this isnt going to be the best fit, so no point continuing with this tile
				return diff
		return diff

	def get_best_fit_tile(self, img_data):
		best_fit_tile_index = None
		min_diff = sys.maxint
		tile_index = 0

		# go through each tile in turn looking for the best match for the part of the image represented by 'img_data'
		for tile_data in self.tiles_data:
			diff = self.__get_tile_diff(img_data, tile_data, min_diff)
			if diff < min_diff:
				min_diff = diff
				best_fit_tile_index = tile_index
			tile_index += 1

		return best_fit_tile_index

def fit_tiles(work_queue, result_queue, tiles_data):
	# this function gets run by the worker processes, one on each CPU core
	tile_fitter = TileFitter(tiles_data)

	while True:
		try:
			img_data, img_coords = work_queue.get(True)
			if img_data == EOQ_VALUE:
				break
			tile_index = tile_fitter.get_best_fit_tile(img_data)
			result_queue.put((img_coords, tile_index))
		except KeyboardInterrupt:
			pass

	# let the result handler know that this worker has finished everything
	result_queue.put((EOQ_VALUE, EOQ_VALUE))

class ProgressCounter:
	def __init__(self, total):
		self.total = total
		self.counter = 0

	def update(self):
		self.counter += 1
		sys.stdout.write("Progress: %s%% %s" % (100 * self.counter / self.total, "\r"))
    	sys.stdout.flush();

class MosaicImage:
	def __init__(self, original_img):
		self.image = Image.new(original_img.mode, original_img.size)
		self.x_tile_count = original_img.size[0] / TILE_SIZE
		self.y_tile_count = original_img.size[1] / TILE_SIZE
		self.total_tiles  = self.x_tile_count * self.y_tile_count

	def add_tile(self, tile_data, coords):
		img = Image.new('RGB', (TILE_SIZE, TILE_SIZE))
		img.putdata(tile_data)
		self.image.paste(img, coords)

	def save(self, path):
		self.image.save(path)

def build_mosaic(result_queue, all_tile_data_large, original_img_large):
	mosaic = MosaicImage(original_img_large)

	active_workers = WORKER_COUNT
	while True:
		try:
			img_coords, best_fit_tile_index = result_queue.get()

			if img_coords == EOQ_VALUE:
				active_workers -= 1
				if not active_workers:
					break
			else:
				tile_data = all_tile_data_large[best_fit_tile_index]
				mosaic.add_tile(tile_data, img_coords)

		except KeyboardInterrupt:
			pass

	mosaic.save(OUT_FILE)
	print '\nFinished, output is in', OUT_FILE

def compose(original_img, tiles):
	print 'Building mosaic, press Ctrl-C to abort...'
	original_img_large, original_img_small = original_img
	tiles_large, tiles_small = tiles

	mosaic = MosaicImage(original_img_large)

	all_tile_data_large = map(lambda tile : list(tile.getdata()), tiles_large)
	all_tile_data_small = map(lambda tile : list(tile.getdata()), tiles_small)

	work_queue   = Queue(WORKER_COUNT)	
	result_queue = Queue()

	try:
		# start the worker processes that will build the mosaic image
		Process(target=build_mosaic, args=(result_queue, all_tile_data_large, original_img_large)).start()

		# start the worker processes that will perform the tile fitting
		for n in range(WORKER_COUNT):
			Process(target=fit_tiles, args=(work_queue, result_queue, all_tile_data_small)).start()

		progress = ProgressCounter(mosaic.x_tile_count * mosaic.y_tile_count)
		for x in range(mosaic.x_tile_count):
			for y in range(mosaic.y_tile_count):
				large_box = (x * TILE_SIZE, y * TILE_SIZE, (x + 1) * TILE_SIZE, (y + 1) * TILE_SIZE)
				small_box = (x * TILE_SIZE/TILE_BLOCK_SIZE, y * TILE_SIZE/TILE_BLOCK_SIZE, (x + 1) * TILE_SIZE/TILE_BLOCK_SIZE, (y + 1) * TILE_SIZE/TILE_BLOCK_SIZE)
				work_queue.put((list(original_img_small.crop(small_box).getdata()), large_box))
				progress.update()

	except KeyboardInterrupt:
		print '\nHalting, saving partial image please wait...'

	finally:
		# put these special values onto the queue to let the workers know they can terminate
		for n in range(WORKER_COUNT):
			work_queue.put((EOQ_VALUE, EOQ_VALUE))

def mosaic(img_path, tiles_path):
	tiles_data = TileProcessor(tiles_path).get_tiles()
	image_data = TargetImage(img_path).get_data()
	compose(image_data, tiles_data)

if __name__ == '__main__':
	if len(sys.argv) < 3:
		print 'Usage: %s <image> <tiles directory>\r' % (sys.argv[0],)
	else:
		mosaic(sys.argv[1], sys.argv[2])



%%writefile mosaic.py
#using
import sys
import os
from PIL import Image
from multiprocessing import Process, Queue, cpu_count
import multiprocessing

# Change these 3 config parameters to suit your needs...
TILE_SIZE      = 25		# height/width of mosaic tiles in pixels

TILE_MATCH_RES = 1		# tile matching resolution (higher values give better fit but require more processing)
ENLARGEMENT    = 4		
#TILE_MATCH_RES = 1		# tile matching resolution (higher values give better fit but require more processing)
#ENLARGEMENT    = 3		# the mosaic image will be this many times wider and taller than the original

TILE_BLOCK_SIZE = TILE_SIZE / max(min(TILE_MATCH_RES, TILE_SIZE), 1)
#WORKER_COUNT = max(cpu_count() - 1, 1)
WORKER_COUNT = multiprocessing.cpu_count()
OUT_FILE = 'myra002.jpg'
EOQ_VALUE = None

class TileProcessor:
	def __init__(self, tiles_directory):
		self.tiles_directory = tiles_directory

	def __process_tile(self, tile_path):
		try:
			img = Image.open(tile_path)
			# tiles must be square, so get the largest square that fits inside the image
			w = img.size[0]
			h = img.size[1]
			min_dimension = min(w, h)
			w_crop = (w - min_dimension) / 2
			h_crop = (h - min_dimension) / 2
			img = img.crop((w_crop, h_crop, w - w_crop, h - h_crop))

			large_tile_img = img.resize((TILE_SIZE, TILE_SIZE), Image.ANTIALIAS)
			small_tile_img = img.resize((TILE_SIZE/TILE_BLOCK_SIZE, TILE_SIZE/TILE_BLOCK_SIZE), Image.ANTIALIAS)

			return (large_tile_img.convert('RGB'), small_tile_img.convert('RGB'))
		except:
			return (None, None)

	def get_tiles(self):
		large_tiles = []
		small_tiles = []

		print 'Reading tiles from \'%s\'...' % (self.tiles_directory, )

		# search the tiles directory recursively
		for root, subFolders, files in os.walk(self.tiles_directory):
			for tile_name in files:
				tile_path = os.path.join(root, tile_name)
				large_tile, small_tile = self.__process_tile(tile_path)
				if large_tile:
					large_tiles.append(large_tile)
					small_tiles.append(small_tile)
		
		print 'Processed %s tiles.' % (len(large_tiles),)

		return (large_tiles, small_tiles)

class TargetImage:
	def __init__(self, image_path):
		self.image_path = image_path

	def get_data(self):
		print 'Processing main image...'
		img = Image.open(self.image_path)
		w = img.size[0] * ENLARGEMENT
		h = img.size[1]	* ENLARGEMENT
		large_img = img.resize((w, h), Image.ANTIALIAS)
		w_diff = (w % TILE_SIZE)/2
		h_diff = (h % TILE_SIZE)/2
		
		# if necesary, crop the image slightly so we use a whole number of tiles horizontally and vertically
		if w_diff or h_diff:
			large_img = large_img.crop((w_diff, h_diff, w - w_diff, h - h_diff))

		small_img = large_img.resize((w/TILE_BLOCK_SIZE, h/TILE_BLOCK_SIZE), Image.ANTIALIAS)

		image_data = (large_img.convert('RGB'), small_img.convert('RGB'))

		print 'Main image processed.'

		return image_data

class TileFitter:
	def __init__(self, tiles_data):
		self.tiles_data = tiles_data

	def __get_tile_diff(self, t1, t2, bail_out_value):
		diff = 0
		for i in range(len(t1)):
			#diff += (abs(t1[i][0] - t2[i][0]) + abs(t1[i][1] - t2[i][1]) + abs(t1[i][2] - t2[i][2]))
			diff += ((t1[i][0] - t2[i][0])**2 + (t1[i][1] - t2[i][1])**2 + (t1[i][2] - t2[i][2])**2)
			if diff > bail_out_value:
				# we know already that this isnt going to be the best fit, so no point continuing with this tile
				return diff
		return diff

	def get_best_fit_tile(self, img_data):
		best_fit_tile_index = None
		min_diff = sys.maxint
		tile_index = 0

		# go through each tile in turn looking for the best match for the part of the image represented by 'img_data'
		for tile_data in self.tiles_data:
			diff = self.__get_tile_diff(img_data, tile_data, min_diff)
			if diff < min_diff:
				min_diff = diff
				best_fit_tile_index = tile_index
			tile_index += 1

		return best_fit_tile_index

def fit_tiles(work_queue, result_queue, tiles_data):
	# this function gets run by the worker processes, one on each CPU core
	tile_fitter = TileFitter(tiles_data)

	while True:
		try:
			img_data, img_coords = work_queue.get(True)
			if img_data == EOQ_VALUE:
				break
			tile_index = tile_fitter.get_best_fit_tile(img_data)
			result_queue.put((img_coords, tile_index))
		except KeyboardInterrupt:
			pass

	# let the result handler know that this worker has finished everything
	result_queue.put((EOQ_VALUE, EOQ_VALUE))

class ProgressCounter:
	def __init__(self, total):
		self.total = total
		self.counter = 0

	def update(self):
		self.counter += 1
		sys.stdout.write("Progress: %s%% %s" % (100 * self.counter / self.total, "\r"))
    	sys.stdout.flush();

class MosaicImage:
	def __init__(self, original_img):
		self.image = Image.new(original_img.mode, original_img.size)
		self.x_tile_count = original_img.size[0] / TILE_SIZE
		self.y_tile_count = original_img.size[1] / TILE_SIZE
		self.total_tiles  = self.x_tile_count * self.y_tile_count

	def add_tile(self, tile_data, coords):
		img = Image.new('RGB', (TILE_SIZE, TILE_SIZE))
		img.putdata(tile_data)
		self.image.paste(img, coords)

	def save(self, path):
		self.image.save(path)

def build_mosaic(result_queue, all_tile_data_large, original_img_large):
	mosaic = MosaicImage(original_img_large)

	active_workers = WORKER_COUNT
	while True:
		try:
			img_coords, best_fit_tile_index = result_queue.get()

			if img_coords == EOQ_VALUE:
				active_workers -= 1
				if not active_workers:
					break
			else:
				tile_data = all_tile_data_large[best_fit_tile_index]
				mosaic.add_tile(tile_data, img_coords)

		except KeyboardInterrupt:
			pass

	mosaic.save(OUT_FILE)
	print '\nFinished, output is in', OUT_FILE

def compose(original_img, tiles):
	print 'Building mosaic, press Ctrl-C to abort...'
	original_img_large, original_img_small = original_img
	tiles_large, tiles_small = tiles

	mosaic = MosaicImage(original_img_large)

	all_tile_data_large = map(lambda tile : list(tile.getdata()), tiles_large)
	all_tile_data_small = map(lambda tile : list(tile.getdata()), tiles_small)

	work_queue   = Queue(WORKER_COUNT)	
	result_queue = Queue()

	try:
		# start the worker processes that will build the mosaic image
		Process(target=build_mosaic, args=(result_queue, all_tile_data_large, original_img_large)).start()

		# start the worker processes that will perform the tile fitting
		for n in range(WORKER_COUNT):
			Process(target=fit_tiles, args=(work_queue, result_queue, all_tile_data_small)).start()

		progress = ProgressCounter(mosaic.x_tile_count * mosaic.y_tile_count)
		for x in range(mosaic.x_tile_count):
			for y in range(mosaic.y_tile_count):
				large_box = (x * TILE_SIZE, y * TILE_SIZE, (x + 1) * TILE_SIZE, (y + 1) * TILE_SIZE)
				small_box = (x * TILE_SIZE/TILE_BLOCK_SIZE, y * TILE_SIZE/TILE_BLOCK_SIZE, (x + 1) * TILE_SIZE/TILE_BLOCK_SIZE, (y + 1) * TILE_SIZE/TILE_BLOCK_SIZE)
				work_queue.put((list(original_img_small.crop(small_box).getdata()), large_box))
				progress.update()

	except KeyboardInterrupt:
		print '\nHalting, saving partial image please wait...'

	finally:
		# put these special values onto the queue to let the workers know they can terminate
		for n in range(WORKER_COUNT):
			work_queue.put((EOQ_VALUE, EOQ_VALUE))

def mosaic(img_path, tiles_path):
	tiles_data = TileProcessor(tiles_path).get_tiles()
	image_data = TargetImage(img_path).get_data()
	compose(image_data, tiles_data)

if __name__ == '__main__':
	if len(sys.argv) < 3:
		print 'Usage: %s <image> <tiles directory>\r' % (sys.argv[0],)
	else:
		mosaic(sys.argv[1], sys.argv[2])



%%writefile mosaic.py
import sys
import os
from PIL import Image
from multiprocessing import Process, Queue, cpu_count
import multiprocessing

# Change these 3 config parameters to suit your needs...
TILE_SIZE      = 24		# height/width of mosaic tiles in pixels

TILE_MATCH_RES = 2		# tile matching resolution (higher values give better fit but require more processing)
ENLARGEMENT    = 2		
#TILE_MATCH_RES = 1		# tile matching resolution (higher values give better fit but require more processing)
#ENLARGEMENT    = 3		# the mosaic image will be this many times wider and taller than the original

TILE_BLOCK_SIZE = TILE_SIZE / max(min(TILE_MATCH_RES, TILE_SIZE), 1)
#WORKER_COUNT = max(cpu_count() - 1, 1)
WORKER_COUNT = multiprocessing.cpu_count()
OUT_FILE = 'myra003.jpg'
EOQ_VALUE = None

class TileProcessor:
	def __init__(self, tiles_directory):
		self.tiles_directory = tiles_directory

	def __process_tile(self, tile_path):
		try:
			img = Image.open(tile_path)
			# tiles must be square, so get the largest square that fits inside the image
			w = img.size[0]
			h = img.size[1]
			min_dimension = min(w, h)
			w_crop = (w - min_dimension) / 2
			h_crop = (h - min_dimension) / 2
			img = img.crop((w_crop, h_crop, w - w_crop, h - h_crop))

			large_tile_img = img.resize((TILE_SIZE, TILE_SIZE), Image.ANTIALIAS)
			small_tile_img = img.resize((TILE_SIZE/TILE_BLOCK_SIZE, TILE_SIZE/TILE_BLOCK_SIZE), Image.ANTIALIAS)

			return (large_tile_img.convert('RGB'), small_tile_img.convert('RGB'))
		except:
			return (None, None)

	def get_tiles(self):
		large_tiles = []
		small_tiles = []

		print 'Reading tiles from \'%s\'...' % (self.tiles_directory, )

		# search the tiles directory recursively
		for root, subFolders, files in os.walk(self.tiles_directory):
			for tile_name in files:
				tile_path = os.path.join(root, tile_name)
				large_tile, small_tile = self.__process_tile(tile_path)
				if large_tile:
					large_tiles.append(large_tile)
					small_tiles.append(small_tile)
		
		print 'Processed %s tiles.' % (len(large_tiles),)

		return (large_tiles, small_tiles)

class TargetImage:
	def __init__(self, image_path):
		self.image_path = image_path

	def get_data(self):
		print 'Processing main image...'
		img = Image.open(self.image_path)
		w = img.size[0] * ENLARGEMENT
		h = img.size[1]	* ENLARGEMENT
		large_img = img.resize((w, h), Image.ANTIALIAS)
		w_diff = (w % TILE_SIZE)/2
		h_diff = (h % TILE_SIZE)/2
		
		# if necesary, crop the image slightly so we use a whole number of tiles horizontally and vertically
		if w_diff or h_diff:
			large_img = large_img.crop((w_diff, h_diff, w - w_diff, h - h_diff))

		small_img = large_img.resize((w/TILE_BLOCK_SIZE, h/TILE_BLOCK_SIZE), Image.ANTIALIAS)

		image_data = (large_img.convert('RGB'), small_img.convert('RGB'))

		print 'Main image processed.'

		return image_data

class TileFitter:
	def __init__(self, tiles_data):
		self.tiles_data = tiles_data

	def __get_tile_diff(self, t1, t2, bail_out_value):
		diff = 0
		for i in range(len(t1)):
			#diff += (abs(t1[i][0] - t2[i][0]) + abs(t1[i][1] - t2[i][1]) + abs(t1[i][2] - t2[i][2]))
			diff += ((t1[i][0] - t2[i][0])**2 + (t1[i][1] - t2[i][1])**2 + (t1[i][2] - t2[i][2])**2)
			if diff > bail_out_value:
				# we know already that this isnt going to be the best fit, so no point continuing with this tile
				return diff
		return diff

	def get_best_fit_tile(self, img_data):
		best_fit_tile_index = None
		min_diff = sys.maxint
		tile_index = 0

		# go through each tile in turn looking for the best match for the part of the image represented by 'img_data'
		for tile_data in self.tiles_data:
			diff = self.__get_tile_diff(img_data, tile_data, min_diff)
			if diff < min_diff:
				min_diff = diff
				best_fit_tile_index = tile_index
			tile_index += 1

		return best_fit_tile_index

def fit_tiles(work_queue, result_queue, tiles_data):
	# this function gets run by the worker processes, one on each CPU core
	tile_fitter = TileFitter(tiles_data)

	while True:
		try:
			img_data, img_coords = work_queue.get(True)
			if img_data == EOQ_VALUE:
				break
			tile_index = tile_fitter.get_best_fit_tile(img_data)
			result_queue.put((img_coords, tile_index))
		except KeyboardInterrupt:
			pass

	# let the result handler know that this worker has finished everything
	result_queue.put((EOQ_VALUE, EOQ_VALUE))

class ProgressCounter:
	def __init__(self, total):
		self.total = total
		self.counter = 0

	def update(self):
		self.counter += 1
		sys.stdout.write("Progress: %s%% %s" % (100 * self.counter / self.total, "\r"))
    	sys.stdout.flush();

class MosaicImage:
	def __init__(self, original_img):
		self.image = Image.new(original_img.mode, original_img.size)
		self.x_tile_count = original_img.size[0] / TILE_SIZE
		self.y_tile_count = original_img.size[1] / TILE_SIZE
		self.total_tiles  = self.x_tile_count * self.y_tile_count

	def add_tile(self, tile_data, coords):
		img = Image.new('RGB', (TILE_SIZE, TILE_SIZE))
		img.putdata(tile_data)
		self.image.paste(img, coords)

	def save(self, path):
		self.image.save(path)

def build_mosaic(result_queue, all_tile_data_large, original_img_large):
	mosaic = MosaicImage(original_img_large)

	active_workers = WORKER_COUNT
	while True:
		try:
			img_coords, best_fit_tile_index = result_queue.get()

			if img_coords == EOQ_VALUE:
				active_workers -= 1
				if not active_workers:
					break
			else:
				tile_data = all_tile_data_large[best_fit_tile_index]
				mosaic.add_tile(tile_data, img_coords)

		except KeyboardInterrupt:
			pass

	mosaic.save(OUT_FILE)
	print '\nFinished, output is in', OUT_FILE

def compose(original_img, tiles):
	print 'Building mosaic, press Ctrl-C to abort...'
	original_img_large, original_img_small = original_img
	tiles_large, tiles_small = tiles

	mosaic = MosaicImage(original_img_large)

	all_tile_data_large = map(lambda tile : list(tile.getdata()), tiles_large)
	all_tile_data_small = map(lambda tile : list(tile.getdata()), tiles_small)

	work_queue   = Queue(WORKER_COUNT)	
	result_queue = Queue()

	try:
		# start the worker processes that will build the mosaic image
		Process(target=build_mosaic, args=(result_queue, all_tile_data_large, original_img_large)).start()

		# start the worker processes that will perform the tile fitting
		for n in range(WORKER_COUNT):
			Process(target=fit_tiles, args=(work_queue, result_queue, all_tile_data_small)).start()

		progress = ProgressCounter(mosaic.x_tile_count * mosaic.y_tile_count)
		for x in range(mosaic.x_tile_count):
			for y in range(mosaic.y_tile_count):
				large_box = (x * TILE_SIZE, y * TILE_SIZE, (x + 1) * TILE_SIZE, (y + 1) * TILE_SIZE)
				small_box = (x * TILE_SIZE/TILE_BLOCK_SIZE, y * TILE_SIZE/TILE_BLOCK_SIZE, (x + 1) * TILE_SIZE/TILE_BLOCK_SIZE, (y + 1) * TILE_SIZE/TILE_BLOCK_SIZE)
				work_queue.put((list(original_img_small.crop(small_box).getdata()), large_box))
				progress.update()

	except KeyboardInterrupt:
		print '\nHalting, saving partial image please wait...'

	finally:
		# put these special values onto the queue to let the workers know they can terminate
		for n in range(WORKER_COUNT):
			work_queue.put((EOQ_VALUE, EOQ_VALUE))

def mosaic(img_path, tiles_path):
	tiles_data = TileProcessor(tiles_path).get_tiles()
	image_data = TargetImage(img_path).get_data()
	compose(image_data, tiles_data)

if __name__ == '__main__':
	if len(sys.argv) < 3:
		print 'Usage: %s <image> <tiles directory>\r' % (sys.argv[0],)
	else:
		mosaic(sys.argv[1], sys.argv[2])



#GOOD DO NOT TOUCH
from PIL import Image
from PIL import ImageDraw
from random import randint
from Mimages import datename
counter = 0
while counter <= 100:
    Bcolor = (randint(0, 255), randint(0, 255), randint(0, 255))
    im = Image.new('RGB', (50,50), (Bcolor))
    transparent_area = (randint(0, 50), randint(0, 50), randint(0, 50), randint(0, 50))
    
    mask=Image.new('1', im.size, color=255)
    draw=ImageDraw.Draw(mask) 
    draw.rectangle(transparent_area, fill=0)
    im.putalpha(mask)
    
    color2 = (randint(0, 255), randint(0, 255), randint(0, 255))
    overlay = Image.new('RGB', (50,50), (color2))
    
    sav = Image.composite(im, overlay, im)
    filename = "mosaic/"+datename.date_name()
    sav.save(filename)
    
    h = randint(15, 50)
    v = randint(15, 50)
    color = (randint(0, 255), randint(0, 255), randint(0, 255))

    im = Image.new('RGB', (50,50), (color))
    x, y =  im.size
    eX, eY = h, v #Size of Bounding Box for ellipse
    bbox =  (x/2 - eX/2, y/2 - eY/2, x/2 + eX/2, y/2 + eY/2)
    draw = ImageDraw.Draw(im)
    color2 = (randint(2, 255), randint(2, 255), randint(2, 255))
    draw.ellipse(bbox, fill=color2)
    filename = "mosaic/"+datename.date_name()
    im.save(filename)
    counter = counter +1

from os import listdir
from PIL import Image
path1 = "bugs/processed-faces/square/"    
for filename in listdir(path1):
    if filename.endswith('.png'):
        try:
            img = Image.open(path1+filename) # open the image file
            img.verify() # verify that it is, in fact an image
        except (IOError, SyntaxError) as e:
            print('Bad file:', filename) # print out the names of corrupt files

from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

!wget -O mouse-sizing-n-cropping-files/postoid.jpg https://jacknorthrup.com/postoids/postoid%20%2810%29.jpg

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/postoid.jpg')
im.size # (width,height) tuple

import PIL
from PIL import Image

basewidth = 400
img = Image.open("mouse-sizing-n-cropping-files/postoid.jpg")
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/postoid400.jpg")
img

http://stackoverflow.com/questions/6136588/image-cropping-using-python
http://2017.compciv.org/guide/topics/python-nonstandard-libraries/pillow.html

!wget -O mouse-sizing-n-cropping-files/soil.jpg https://static.pexels.com/photos/60013/desert-drought-dehydrated-clay-soil-60013.jpeg

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil.jpg')
im.size # (width,height) tuple

import PIL
from PIL import Image

basewidth = 600
img = Image.open("mouse-sizing-n-cropping-files/soil.jpg")
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/soil600.jpg")

from PIL import Image
im=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
im.size # (width,height) tuple

from PIL import Image
im=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
im # (display image)

def add_cursor(fig, ax):
    plt.close(fig)

    vline = ax.axvline(1, color='k')
    hline = ax.axhline(0.5, color='k')

    def set_cursor(x, y):
        vline.set_xdata((x, x))
        hline.set_ydata((y, y))
        display(fig)

    interact(set_cursor, x=ax.get_xlim(), y=ax.get_ylim())

#import ipympl
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline 
x = (sin(6))
plt.plot([0, 1, 2, x, 5, 8,0,-4, -2, -6])
plt.show()


import matplotlib.pyplot as plt
%matplotlib inline 
plt.rcParams['figure.figsize'] = (20.0, 10.0)
import matplotlib.image as mpimg
import numpy as np
img=mpimg.imread('mouse-sizing-n-cropping-files/soil600.jpg')
imgplot = plt.imshow(img)


from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (145, 50, img.width - 40, img.height - 135)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/soil-cropped.png')   

img=mpimg.imread('mouse-sizing-n-cropping-files/soil-cropped.png')
imgplot = plt.imshow(img)

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im.size # (width,height) tuple

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im

http://mpld3.github.io/

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.path as mpath
import matplotlib.patches as mpatches

import mpld3
from mpld3 import plugins, utils


class LinkedDragPlugin(plugins.PluginBase):
    JAVASCRIPT = r"""
    mpld3.register_plugin("drag", DragPlugin);
    DragPlugin.prototype = Object.create(mpld3.Plugin.prototype);
    DragPlugin.prototype.constructor = DragPlugin;
    DragPlugin.prototype.requiredProps = ["idpts", "idline", "idpatch"];
    DragPlugin.prototype.defaultProps = {}
    function DragPlugin(fig, props){
        mpld3.Plugin.call(this, fig, props);
    };

    DragPlugin.prototype.draw = function(){
        var patchobj = mpld3.get_element(this.props.idpatch, this.fig);
        var ptsobj = mpld3.get_element(this.props.idpts, this.fig);
        var lineobj = mpld3.get_element(this.props.idline, this.fig);

        var drag = d3.behavior.drag()
            .origin(function(d) { return {x:ptsobj.ax.x(d[0]),
                                          y:ptsobj.ax.y(d[1])}; })
            .on("dragstart", dragstarted)
            .on("drag", dragged)
            .on("dragend", dragended);

        lineobj.path.attr("d", lineobj.datafunc(ptsobj.offsets));
        patchobj.path.attr("d", patchobj.datafunc(ptsobj.offsets,
                                                  patchobj.pathcodes));
        lineobj.data = ptsobj.offsets;
        patchobj.data = ptsobj.offsets;

        ptsobj.elements()
           .data(ptsobj.offsets)
           .style("cursor", "default")
           .call(drag);

        function dragstarted(d) {
          d3.event.sourceEvent.stopPropagation();
          d3.select(this).classed("dragging", true);
        }

        function dragged(d, i) {
          d[0] = ptsobj.ax.x.invert(d3.event.x);
          d[1] = ptsobj.ax.y.invert(d3.event.y);
          d3.select(this)
            .attr("transform", "translate(" + [d3.event.x,d3.event.y] + ")");
          lineobj.path.attr("d", lineobj.datafunc(ptsobj.offsets));
          patchobj.path.attr("d", patchobj.datafunc(ptsobj.offsets,
                                                    patchobj.pathcodes));
        }

        function dragended(d, i) {
          d3.select(this).classed("dragging", false);
        }
    }

    mpld3.register_plugin("drag", DragPlugin);
    """

    def __init__(self, points, line, patch):
        if isinstance(points, mpl.lines.Line2D):
            suffix = "pts"
        else:
            suffix = None

        self.dict_ = {"type": "drag",
                      "idpts": utils.get_id(points, suffix),
                      "idline": utils.get_id(line),
                      "idpatch": utils.get_id(patch)}


fig, ax = plt.subplots()

Path = mpath.Path
path_data = [
    (Path.MOVETO, (1.58, -2.57)),
    (Path.CURVE4, (0.35, -1.1)),
    (Path.CURVE4, (-1.75, 2.0)),
    (Path.CURVE4, (0.375, 2.0)),
    (Path.LINETO, (0.85, 1.15)),
    (Path.CURVE4, (2.2, 3.2)),
    (Path.CURVE4, (3, 0.05)),
    (Path.CURVE4, (2.0, -0.5)),
    (Path.CLOSEPOLY, (1.58, -2.57)),
    ]
codes, verts = zip(*path_data)
path = mpath.Path(verts, codes)
patch = mpatches.PathPatch(path, facecolor='r', alpha=0.5)
ax.add_patch(patch)

# plot control points and connecting lines
x, y = zip(*path.vertices[:-1])
points = ax.plot(x, y, 'go', ms=10)
line = ax.plot(x, y, '-k')

ax.grid(True, color='gray', alpha=0.5)
ax.axis('equal')
ax.set_title("Drag Points to Change Path", fontsize=18)

plugins.connect(fig, LinkedDragPlugin(points[0], line[0], patch))

mpld3.display()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
from mpld3 import plugins

fig, ax = plt.subplots()

x = np.linspace(-2, 2, 20)
y = x[:, None]
X = np.zeros((20, 20, 4))

X[:, :, 0] = np.exp(- (x - 1) ** 2 - (y) ** 2)
X[:, :, 1] = np.exp(- (x + 0.71) ** 2 - (y - 0.71) ** 2)
X[:, :, 2] = np.exp(- (x + 0.71) ** 2 - (y + 0.71) ** 2)
X[:, :, 3] = np.exp(-0.25 * (x ** 2 + y ** 2))

im = ax.imshow(X, extent=(10, 20, 10, 20),
               origin='lower', zorder=1, interpolation='nearest')
fig.colorbar(im, ax=ax)

ax.set_title('An Image', size=20)

plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()


class ImageFile(object):
    """Class for storing an image location."""
    def __init__(self, fpath):
        self.fpath = fpath
    def _repr_png_(self):
        return open(self.fpath, 'r').read()
ImageFile('mouse-sizing-n-cropping-files/soil600.jpg')

from IPython.display import Image
image = Image('mouse-sizing-n-cropping-files/soil600.jpg')
image


!pwd

class ImageFile(object):
    """Class for storing an image location."""

    def __init__(self, fpath):
        self.fpath = fpath
        self.format = fpath.split('.')[-1]

    def _repr_png_(self):
        if self.format == 'png':
            return open(self.fpath, 'r').read()

    def _repr_jpeg_(self):
        if self.format == 'jpeg' or self.format == 'jpg':
            return open(self.fpath, 'r').read()

    def _repr_svg_(self):
        if self.format == 'svg':
            return open(self.fpath, 'r').read()



import matplotlib
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
%matplotlib inline

im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
plt.imshow(im)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
%matplotlib inline  
from mpld3 import plugins
from PIL import Image
img=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
 

fig, ax = plt.subplots()
im = ax.imshow(img, extent=(10, 20, 10, 20),
               origin='lower', zorder=1, interpolation='nearest')

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()
from PIL import Image


im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))



import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

!sudo locate manilyn.jpg

from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (200, 0, img.width - 150, img.height - 0)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/cropsoil600.jpg')   

import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/cropsoil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

im = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
im

#Python 2.7 - Linux
from PIL import Image
# open an image file (.jpg or.png)
im1 = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
# multiply each pixel by a variable - less than 1 is darker greater than 1 is lighter
# works best with .jpg and .png images
im2 = im1.point(lambda p: p * 1.8) # lighter
im3 = im1.point(lambda p: p * .5)  # Darker

# This pops up your defaultimage viewer
im1.show()
im2.show()
im3.show()
# save modified image 
im2.save("mouse-sizing-n-cropping-files/soil-light.jpg")
im3.save("mouse-sizing-n-cropping-files/soil-dark.jpg")


import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))


mpld3.display()

import numpy as np
import cv2
from matplotlib import pyplot as plt

img = cv2.imread('mouse-sizing-n-cropping-files/soil600.jpg')
mask = np.zeros(img.shape[:2],np.uint8)

bgdModel = np.zeros((1,65),np.float64)
fgdModel = np.zeros((1,65),np.float64)

rect = (425,107,686,454)
cv2.grabCut(img,mask,rect,bgdModel,fgdModel,5,cv2.GC_INIT_WITH_RECT)
mask2 = np.where((mask==2)|(mask==0),0,1).astype('uint8')
img = img*mask2[:,:,np.newaxis]

plt.imshow(img)
plt.colorbar()
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
#%matplotlib inline  
from mpld3 import plugins
from PIL import Image
fig, ax = plt.subplots()

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()

!wget -O mouse-sizing-n-cropping-files/jungle.jpg https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg/800px-Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg

import PIL
from PIL import Image
im1 = Image.open("mouse-sizing-n-cropping-files/jungle.jpg")
#longer_side = max(im1.size)
basewidth = 700
hsize = 500
img = im1.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/jungle700.jpg")
im = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
im

import tkinter as Tkinter
from PIL import Image, ImageTk
from sys import argv

window = Tkinter.Tk(className="bla")

image = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
canvas = Tkinter.Canvas(window, width=image.size[0], height=image.size[1])
canvas.pack()
image_tk = ImageTk.PhotoImage(image)
canvas.create_image(image.size[0]//2, image.size[1]//2, image=image_tk)

def callback(event):
    #print "[",event.x,"],["+event.y,"]"
    print ("[",event.x,",",event.y,"],",)
 
canvas.bind("<Button-1>", callback)
Tkinter.mainloop()

%matplotlib inline
#The line above is necesary to show Matplotlib's plots inside a Jupyter Notebook

import cv2
from matplotlib import pyplot as plt

#Import image
image = cv2.imread("input_path")

#Show the image with matplotlib



%matplotlib inline
#The line above is necesary to show Matplotlib's plots inside a Jupyter Notebook

import cv2
from matplotlib import pyplot as plt  # function to display the coordinates of
# of the points clicked on the image
def click_event(event, x, y, flags, params):

    # checking for left mouse clicks
    if event == cv2.EVENT_LBUTTONDOWN:

        # displaying the coordinates
        # on the Shell
        print(x, ' ', y)

        # displaying the coordinates
        # on the image window
        font = cv2.FONT_HERSHEY_SIMPLEX
        cv2.putText(img, str(x) + ',' +
                str(y), (x,y), font,
                1, (255, 0, 0), 2)
        cv2.imshow('image', img)

    # checking for right mouse clicks	
    if event==cv2.EVENT_RBUTTONDOWN:

        # displaying the coordinates
        # on the Shell
        print(x, ' ', y)

        # displaying the coordinates
        # on the image window
        font = cv2.FONT_HERSHEY_SIMPLEX
        b = img[y, x, 0]
        g = img[y, x, 1]
        r = img[y, x, 2]
        cv2.putText(img, str(b) + ',' +
                    str(g) + ',' + str(r),
                    (x,y), font, 1,
                    (255, 255, 0), 2)
        cv2.imshow('image', img)

# reading the image
img = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg", 1)

# displaying the image
plt.imshow(image)
plt.show()

# setting mouse handler for the image
# and calling the click_event() function
cv2.setMouseCallback('image', click_event)




from tkinter import *
from PIL import Image, ImageTk
from sys import argv
from logger_settings import api_logger
#api_logger.info('hello world')
#window = Tkinter.Tk(className="bla")
window = Tk(className="Clickable")
image = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
canvas = Canvas(window, width=image.size[0], height=image.size[1])
canvas.pack()
image_tk = ImageTk.PhotoImage(image)
api_logger.info(image_tk)
canvas.create_image(image.size[0]//2, image.size[1]//2, image=image_tk)

def callback(event):
    #print "[",event.x,"],["+event.y,"]"
    print ("[",event.x,",",event.y,"],",)

canvas.bind("<Button-1>", callback)
tkinter.mainloop()

# importing the module
import cv2

# function to display the coordinates of
# of the points clicked on the image
def click_event(event, x, y, flags, params):

	# checking for left mouse clicks
	if event == cv2.EVENT_LBUTTONDOWN:

		# displaying the coordinates
		# on the Shell
		print(x, ' ', y)

		# displaying the coordinates
		# on the image window
		font = cv2.FONT_HERSHEY_SIMPLEX
		cv2.putText(img, str(x) + ',' +
					str(y), (x,y), font,
					1, (255, 0, 0), 2)
		cv2.imshow('image', img)

	# checking for right mouse clicks	
	if event==cv2.EVENT_RBUTTONDOWN:

		# displaying the coordinates
		# on the Shell
		print(x, ' ', y)

		# displaying the coordinates
		# on the image window
		font = cv2.FONT_HERSHEY_SIMPLEX
		b = img[y, x, 0]
		g = img[y, x, 1]
		r = img[y, x, 2]
		cv2.putText(img, str(b) + ',' +
					str(g) + ',' + str(r),
					(x,y), font, 1,
					(255, 255, 0), 2)
		cv2.imshow('image', img)

# driver function
if __name__=="__main__":

	# reading the image
	img = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg", 1)

	# displaying the image
	cv2.imshow('image', img)

	# setting mouse handler for the image
	# and calling the click_event() function
	cv2.setMouseCallback('image', click_event)

	# wait for a key to be pressed to exit
	cv2.waitKey(0)

	# close the window
	cv2.destroyAllWindows()


poly = np.array([ [ 320 , 123 ], [ 437 , 121 ], [ 451 , 267 ], [ 356 , 277 ],[ 321 , 125 ] ], np.int32)
print poly

import cv2
import numpy as np 

import cv2
import numpy as np 

# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")

src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)

src_mask = np.zeros(src.shape, src.dtype)

poly = np.array([ [ 269 , 24 ], [ 273 , 117 ], [ 301 , 145 ], [ 345 , 199 ], 
[ 398 , 273 ], [ 428 , 317 ], [ 447 , 278 ], [ 440 , 231 ], [ 487 , 220 ], [ 491 , 202 ],
[ 437 , 209 ], [ 415 , 162 ], [ 433 , 126 ], [ 410 , 113 ], [ 360 , 115 ], [ 363 , 73 ], [ 317 , 25 ] ], np.int32)



cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (550,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("mouse-sizing-n-cropping-files/soil-jungle.jpg", output);


import cv2
import numpy as np 

# Read images
#dst = cv2.imread("01-ajungle2.jpg")
#dst = cv2.imread("/notebooks/edge-preserving-normalized-convolution-filter.jpg")
#src = cv2.imread("/notebooks/learnopencv/SeamlessCloning/images/airplane.jpg")
#src = cv2.imread("desert-drought.jpg")
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
#src = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
#dst = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
# Create a rough mask around the airplane.
src_mask = np.zeros(src.shape, src.dtype)
#poly = np.array([ [4,80], [30,54], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
poly = np.array([ [ 320 , 123 ], [ 437 , 121 ], [ 451 , 267 ], [ 356 , 277 ],[ 321 , 125 ] ], np.int32)
#poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
#poly = np.array([ [736, 113],[768, 97],[784, 93],[788, 157],[789, 197],[788, 225],[777, 265],[768, 301],[778, 318],\
#[794, 332],[767, 386],[743, 348],[707, 314],[693, 304],[666, 299],[668, 275],[705, 273],[729, 272],\
#[716, 223],[706, 236],[689, 207],[687, 217],[687, 231],[667, 217],[647, 226],[629, 208],[614, 207],\
#[615, 198],[602, 183],[607, 174],[609, 159],[636, 162],[640, 146],[634, 137],[597, 153],[594, 137],\
#[601, 122],[583, 115],[611, 83],[626, 78],[622, 72],[589, 73],[583, 51],[591, 13],[605, 10],[631, 28],\
#[650, 17],[666, 39],[681, 18],[699, 4],[728, 6],[751, 7],[743, 39],[794, 13],[797, 42],[764, 66],\
#[735, 101],[736, 113] ], np.int32)




cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (250,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("01-cloning-example3.jpg", output);


im = Image.open("01-cloning-example3.jpg")
im

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()
from mpld3 import plugins

fig, ax = plt.subplots(subplot_kw=dict(axisbg='#EEEEEE'))
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot (with tooltips!)", size=20)

labels = ['point {0}'.format(i + 1) for i in range(N)]
fig.plugins = [plugins.PointLabelTooltip(scatter, labels)]

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()




fig, ax = plt.subplots(subplot_kw=dict(axisbg='#EEEEEE'))
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot", size=18);

import matplotlib
import numpy as np
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline  

x = np.linspace(0, 3*np.pi, 500)
plt.plot(x, np.sin(x**2))
plt.title('A simple chirp')
plt.show()



from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

import matplotlib.pyplot as plt
%matplotlib inline 
plt.rcParams['figure.figsize'] = (20.0, 10.0)
import matplotlib.image as mpimg
import numpy as np
img=mpimg.imread('mouse-sizing-n-cropping-files/soil600.jpg')
imgplot = plt.imshow(img)


!wget -O mouse-sizing-n-cropping-files/postoid.jpg https://jacknorthrup.com/postoids/postoid%20%2810%29.jpg

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/postoid.jpg')
im.size # (width,height) tuple

import PIL
from PIL import Image

basewidth = 400
img = Image.open("mouse-sizing-n-cropping-files/postoid.jpg")
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/postoid400.jpg")
img

http://stackoverflow.com/questions/6136588/image-cropping-using-python
http://2017.compciv.org/guide/topics/python-nonstandard-libraries/pillow.html

!wget -O mouse-sizing-n-cropping-files/soil.jpg https://static.pexels.com/photos/60013/desert-drought-dehydrated-clay-soil-60013.jpeg

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil.jpg')
im.size # (width,height) tuple

import PIL
from PIL import Image

basewidth = 600
img = Image.open("mouse-sizing-n-cropping-files/soil.jpg")
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/soil600.jpg")

from PIL import Image
im=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
im.size # (width,height) tuple

from PIL import Image
im=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
im # (display image)

def add_cursor(fig, ax):
    plt.close(fig)

    vline = ax.axvline(1, color='k')
    hline = ax.axhline(0.5, color='k')

    def set_cursor(x, y):
        vline.set_xdata((x, x))
        hline.set_ydata((y, y))
        display(fig)

    interact(set_cursor, x=ax.get_xlim(), y=ax.get_ylim())

#import ipympl
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline 
x = (sin(6))
plt.plot([0, 1, 2, x, 5, 8,0,-4, -2, -6])
plt.show()


from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (145, 50, img.width - 40, img.height - 135)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/soil-cropped.png')   

img=mpimg.imread('mouse-sizing-n-cropping-files/soil-cropped.png')
imgplot = plt.imshow(img)

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im.size # (width,height) tuple

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im

http://mpld3.github.io/

class ImageFile(object):
    """Class for storing an image location."""
    def __init__(self, fpath):
        self.fpath = fpath
    def _repr_png_(self):
        return open(self.fpath, 'r').read()
ImageFile('mouse-sizing-n-cropping-files/soil600.jpg')

from IPython.display import Image
image = Image('mouse-sizing-n-cropping-files/soil600.jpg')
image


class ImageFile(object):
    """Class for storing an image location."""

    def __init__(self, fpath):
        self.fpath = fpath
        self.format = fpath.split('.')[-1]

    def _repr_png_(self):
        if self.format == 'png':
            return open(self.fpath, 'r').read()

    def _repr_jpeg_(self):
        if self.format == 'jpeg' or self.format == 'jpg':
            return open(self.fpath, 'r').read()

    def _repr_svg_(self):
        if self.format == 'svg':
            return open(self.fpath, 'r').read()



import matplotlib
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
%matplotlib inline

im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
plt.imshow(im)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
%matplotlib inline  
from mpld3 import plugins
from PIL import Image
img=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
 

fig, ax = plt.subplots()
im = ax.imshow(img, extent=(10, 20, 10, 20),
               origin='lower', zorder=1, interpolation='nearest')

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()
from PIL import Image


im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))



import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

!sudo locate manilyn.jpg

from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (200, 0, img.width - 150, img.height - 0)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/cropsoil600.jpg')   

import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/cropsoil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

im = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
im

#Python 2.7 - Linux
from PIL import Image
# open an image file (.jpg or.png)
im1 = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
# multiply each pixel by a variable - less than 1 is darker greater than 1 is lighter
# works best with .jpg and .png images
im2 = im1.point(lambda p: p * 1.8) # lighter
im3 = im1.point(lambda p: p * .5)  # Darker

# This pops up your defaultimage viewer
im1.show()
im2.show()
im3.show()
# save modified image 
im2.save("mouse-sizing-n-cropping-files/soil-light.jpg")
im3.save("mouse-sizing-n-cropping-files/soil-dark.jpg")


import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))


mpld3.display()

import numpy as np
import cv2
from matplotlib import pyplot as plt

img = cv2.imread('mouse-sizing-n-cropping-files/soil600.jpg')
mask = np.zeros(img.shape[:2],np.uint8)

bgdModel = np.zeros((1,65),np.float64)
fgdModel = np.zeros((1,65),np.float64)

rect = (425,107,686,454)
cv2.grabCut(img,mask,rect,bgdModel,fgdModel,5,cv2.GC_INIT_WITH_RECT)
mask2 = np.where((mask==2)|(mask==0),0,1).astype('uint8')
img = img*mask2[:,:,np.newaxis]

plt.imshow(img)
plt.colorbar()
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
#%matplotlib inline  
from mpld3 import plugins
from PIL import Image
fig, ax = plt.subplots()

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()

!wget -O mouse-sizing-n-cropping-files/jungle.jpg https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg/800px-Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg

import PIL
from PIL import Image
im1 = Image.open("mouse-sizing-n-cropping-files/jungle.jpg")
#longer_side = max(im1.size)
basewidth = 700
hsize = 500
img = im1.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/jungle700.jpg")
im = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
im

import Tkinter
from PIL import Image, ImageTk
from sys import argv

window = Tkinter.Tk(className="bla")

image = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
canvas = Tkinter.Canvas(window, width=image.size[0], height=image.size[1])
canvas.pack()
image_tk = ImageTk.PhotoImage(image)
canvas.create_image(image.size[0]//2, image.size[1]//2, image=image_tk)

def callback(event):
    #print "[",event.x,"],["+event.y,"]"
    print "[",event.x,",",event.y,"],",
 
canvas.bind("<Button-1>", callback)
Tkinter.mainloop()

poly = np.array([ [ 320 , 123 ], [ 437 , 121 ], [ 451 , 267 ], [ 356 , 277 ],[ 321 , 125 ] ], np.int32)
print poly

import cv2
import numpy as np 

import cv2
import numpy as np 

# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")

src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)

src_mask = np.zeros(src.shape, src.dtype)

poly = np.array([ [ 269 , 24 ], [ 273 , 117 ], [ 301 , 145 ], [ 345 , 199 ], 
[ 398 , 273 ], [ 428 , 317 ], [ 447 , 278 ], [ 440 , 231 ], [ 487 , 220 ], [ 491 , 202 ],
[ 437 , 209 ], [ 415 , 162 ], [ 433 , 126 ], [ 410 , 113 ], [ 360 , 115 ], [ 363 , 73 ], [ 317 , 25 ] ], np.int32)



cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (550,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("mouse-sizing-n-cropping-files/soil-jungle.jpg", output);


import cv2
import numpy as np 

# Read images
#dst = cv2.imread("01-ajungle2.jpg")
#dst = cv2.imread("/notebooks/edge-preserving-normalized-convolution-filter.jpg")
#src = cv2.imread("/notebooks/learnopencv/SeamlessCloning/images/airplane.jpg")
#src = cv2.imread("desert-drought.jpg")
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
#src = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
#dst = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
# Create a rough mask around the airplane.
src_mask = np.zeros(src.shape, src.dtype)
#poly = np.array([ [4,80], [30,54], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
poly = np.array([ [ 320 , 123 ], [ 437 , 121 ], [ 451 , 267 ], [ 356 , 277 ],[ 321 , 125 ] ], np.int32)
#poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
#poly = np.array([ [736, 113],[768, 97],[784, 93],[788, 157],[789, 197],[788, 225],[777, 265],[768, 301],[778, 318],\
#[794, 332],[767, 386],[743, 348],[707, 314],[693, 304],[666, 299],[668, 275],[705, 273],[729, 272],\
#[716, 223],[706, 236],[689, 207],[687, 217],[687, 231],[667, 217],[647, 226],[629, 208],[614, 207],\
#[615, 198],[602, 183],[607, 174],[609, 159],[636, 162],[640, 146],[634, 137],[597, 153],[594, 137],\
#[601, 122],[583, 115],[611, 83],[626, 78],[622, 72],[589, 73],[583, 51],[591, 13],[605, 10],[631, 28],\
#[650, 17],[666, 39],[681, 18],[699, 4],[728, 6],[751, 7],[743, 39],[794, 13],[797, 42],[764, 66],\
#[735, 101],[736, 113] ], np.int32)




cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (250,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("01-cloning-example3.jpg", output);


im = Image.open("01-cloning-example3.jpg")
im

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()
from mpld3 import plugins

fig, ax = plt.subplots(subplot_kw=dict(axisbg='#EEEEEE'))
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot (with tooltips!)", size=20)

labels = ['point {0}'.format(i + 1) for i in range(N)]
fig.plugins = [plugins.PointLabelTooltip(scatter, labels)]

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()




fig, ax = plt.subplots(subplot_kw=dict(axisbg='#EEEEEE'))
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot", size=18);

import matplotlib
import numpy as np
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline  

x = np.linspace(0, 3*np.pi, 500)
plt.plot(x, np.sin(x**2))
plt.title('A simple chirp')
plt.show()



%%html
<p style="font-size:24px;line-height: 1.6;">The reason "mouse-sizing-n-cropping" Jupyter Notebook is in this repository.<br />I want to find areas of a latitude and longitude plot and select them to create<br />  a zoomed map.I have used this notebook to crop images and perhaps it can<br /> help in the cropping of a map plot.</p>

!mkdir mouse-sizing-n-cropping-files

from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

!wget -O mouse-sizing-n-cropping-files/postoid.jpg https://jacknorthrup.com/postoids/postoid%20%2810%29.jpg

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/postoid.jpg')
im.size # (width,height) tuple

import PIL
from PIL import Image

basewidth = 400
img = Image.open("mouse-sizing-n-cropping-files/postoid.jpg")
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/postoid400.jpg")
img

!wget -O mouse-sizing-n-cropping-files/soil.jpg https://static.pexels.com/photos/60013/desert-drought-dehydrated-clay-soil-60013.jpeg

!mv mouse-sizing-n-cropping-files/desert-drought-dehydrated-clay-soil-60013.jpg mouse-sizing-n-cropping-files/soil.jpg

!mkdir 

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil.jpg')
im.size # (width,height) tuple

import PIL
from PIL import Image

basewidth = 600
img = Image.open("mouse-sizing-n-cropping-files/soil.jpg")
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/soil600.jpg")

from PIL import Image
im=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
im.size # (width,height) tuple

from PIL import Image
im=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
im # (display image)

def add_cursor(fig, ax):
    plt.close(fig)

    vline = ax.axvline(1, color='k')
    hline = ax.axhline(0.5, color='k')

    def set_cursor(x, y):
        vline.set_xdata((x, x))
        hline.set_ydata((y, y))
        display(fig)

    interact(set_cursor, x=ax.get_xlim(), y=ax.get_ylim())

#import ipympl
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline 
x = (sin(6))
plt.plot([0, 1, 2, x, 5, 8,0,-4, -2, -6])
plt.show()


import matplotlib.pyplot as plt
%matplotlib inline 
plt.rcParams['figure.figsize'] = (20.0, 10.0)
import matplotlib.image as mpimg
import numpy as np
img=mpimg.imread('mouse-sizing-n-cropping-files/soil600.jpg')
imgplot = plt.imshow(img)


from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (145, 50, img.width - 40, img.height - 135)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/soil-cropped.png')   

img=mpimg.imread('mouse-sizing-n-cropping-files/soil-cropped.png')
imgplot = plt.imshow(img)

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im.size # (width,height) tuple

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.path as mpath
import matplotlib.patches as mpatches

import mpld3
from mpld3 import plugins, utils


class LinkedDragPlugin(plugins.PluginBase):
    JAVASCRIPT = r"""
    mpld3.register_plugin("drag", DragPlugin);
    DragPlugin.prototype = Object.create(mpld3.Plugin.prototype);
    DragPlugin.prototype.constructor = DragPlugin;
    DragPlugin.prototype.requiredProps = ["idpts", "idline", "idpatch"];
    DragPlugin.prototype.defaultProps = {}
    function DragPlugin(fig, props){
        mpld3.Plugin.call(this, fig, props);
    };

    DragPlugin.prototype.draw = function(){
        var patchobj = mpld3.get_element(this.props.idpatch, this.fig);
        var ptsobj = mpld3.get_element(this.props.idpts, this.fig);
        var lineobj = mpld3.get_element(this.props.idline, this.fig);

        var drag = d3.behavior.drag()
            .origin(function(d) { return {x:ptsobj.ax.x(d[0]),
                                          y:ptsobj.ax.y(d[1])}; })
            .on("dragstart", dragstarted)
            .on("drag", dragged)
            .on("dragend", dragended);

        lineobj.path.attr("d", lineobj.datafunc(ptsobj.offsets));
        patchobj.path.attr("d", patchobj.datafunc(ptsobj.offsets,
                                                  patchobj.pathcodes));
        lineobj.data = ptsobj.offsets;
        patchobj.data = ptsobj.offsets;

        ptsobj.elements()
           .data(ptsobj.offsets)
           .style("cursor", "default")
           .call(drag);

        function dragstarted(d) {
          d3.event.sourceEvent.stopPropagation();
          d3.select(this).classed("dragging", true);
        }

        function dragged(d, i) {
          d[0] = ptsobj.ax.x.invert(d3.event.x);
          d[1] = ptsobj.ax.y.invert(d3.event.y);
          d3.select(this)
            .attr("transform", "translate(" + [d3.event.x,d3.event.y] + ")");
          lineobj.path.attr("d", lineobj.datafunc(ptsobj.offsets));
          patchobj.path.attr("d", patchobj.datafunc(ptsobj.offsets,
                                                    patchobj.pathcodes));
        }

        function dragended(d, i) {
          d3.select(this).classed("dragging", false);
        }
    }

    mpld3.register_plugin("drag", DragPlugin);
    """

    def __init__(self, points, line, patch):
        if isinstance(points, mpl.lines.Line2D):
            suffix = "pts"
        else:
            suffix = None

        self.dict_ = {"type": "drag",
                      "idpts": utils.get_id(points, suffix),
                      "idline": utils.get_id(line),
                      "idpatch": utils.get_id(patch)}


fig, ax = plt.subplots()

Path = mpath.Path
path_data = [
    (Path.MOVETO, (1.58, -2.57)),
    (Path.CURVE4, (0.35, -1.1)),
    (Path.CURVE4, (-1.75, 2.0)),
    (Path.CURVE4, (0.375, 2.0)),
    (Path.LINETO, (0.85, 1.15)),
    (Path.CURVE4, (2.2, 3.2)),
    (Path.CURVE4, (3, 0.05)),
    (Path.CURVE4, (2.0, -0.5)),
    (Path.CLOSEPOLY, (1.58, -2.57)),
    ]
codes, verts = zip(*path_data)
path = mpath.Path(verts, codes)
patch = mpatches.PathPatch(path, facecolor='r', alpha=0.5)
ax.add_patch(patch)

# plot control points and connecting lines
x, y = zip(*path.vertices[:-1])
points = ax.plot(x, y, 'go', ms=10)
line = ax.plot(x, y, '-k')

ax.grid(True, color='gray', alpha=0.5)
ax.axis('equal')
ax.set_title("Drag Points to Change Path", fontsize=18)

plugins.connect(fig, LinkedDragPlugin(points[0], line[0], patch))

mpld3.display()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
from mpld3 import plugins

fig, ax = plt.subplots()

x = np.linspace(-2, 2, 20)
y = x[:, None]
X = np.zeros((20, 20, 4))

X[:, :, 0] = np.exp(- (x - 1) ** 2 - (y) ** 2)
X[:, :, 1] = np.exp(- (x + 0.71) ** 2 - (y - 0.71) ** 2)
X[:, :, 2] = np.exp(- (x + 0.71) ** 2 - (y + 0.71) ** 2)
X[:, :, 3] = np.exp(-0.25 * (x ** 2 + y ** 2))

im = ax.imshow(X, extent=(10, 20, 10, 20),
               origin='lower', zorder=1, interpolation='nearest')
fig.colorbar(im, ax=ax)

ax.set_title('An Image', size=20)

plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()


class ImageFile(object):
    """Class for storing an image location."""
    def __init__(self, fpath):
        self.fpath = fpath
    def _repr_png_(self):
        return open(self.fpath, 'r').read()
ImageFile('mouse-sizing-n-cropping-files/soil600.jpg')

from IPython.display import Image
image = Image('mouse-sizing-n-cropping-files/soil600.jpg')
image


class ImageFile(object):
    """Class for storing an image location."""

    def __init__(self, fpath):
        self.fpath = fpath
        self.format = fpath.split('.')[-1]

    def _repr_png_(self):
        if self.format == 'png':
            return open(self.fpath, 'r').read()

    def _repr_jpeg_(self):
        if self.format == 'jpeg' or self.format == 'jpg':
            return open(self.fpath, 'r').read()

    def _repr_svg_(self):
        if self.format == 'svg':
            return open(self.fpath, 'r').read()



import matplotlib
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
%matplotlib inline

im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
plt.imshow(im)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
%matplotlib inline  
from mpld3 import plugins
from PIL import Image
img=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
 

fig, ax = plt.subplots()
im = ax.imshow(img, extent=(10, 20, 10, 20),
               origin='lower', zorder=1, interpolation='nearest')

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()
from PIL import Image


im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))



import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

!sudo locate manilyn.jpg

from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (200, 0, img.width - 150, img.height - 0)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/cropsoil600.jpg')   

import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/cropsoil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

im = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
im

#Python 2.7 - Linux
from PIL import Image
# open an image file (.jpg or.png)
im1 = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
# multiply each pixel by a variable - less than 1 is darker greater than 1 is lighter
# works best with .jpg and .png images
im2 = im1.point(lambda p: p * 1.8) # lighter
im3 = im1.point(lambda p: p * .5)  # Darker

# This pops up your defaultimage viewer
im1.show()
im2.show()
im3.show()
# save modified image 
im2.save("mouse-sizing-n-cropping-files/soil-light.jpg")
im3.save("mouse-sizing-n-cropping-files/soil-dark.jpg")


import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
#im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))


mpld3.display()

import numpy as np
import cv2
from matplotlib import pyplot as plt

img = cv2.imread('mouse-sizing-n-cropping-files/soil600.jpg')
mask = np.zeros(img.shape[:2],np.uint8)

bgdModel = np.zeros((1,65),np.float64)
fgdModel = np.zeros((1,65),np.float64)

rect = (425,107,686,454)
cv2.grabCut(img,mask,rect,bgdModel,fgdModel,5,cv2.GC_INIT_WITH_RECT)
mask2 = np.where((mask==2)|(mask==0),0,1).astype('uint8')
img = img*mask2[:,:,np.newaxis]

plt.imshow(img)
plt.colorbar()
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
#%matplotlib inline  
from mpld3 import plugins
from PIL import Image
fig, ax = plt.subplots()

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()

!wget -O mouse-sizing-n-cropping-files/jungle.jpg https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg/800px-Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg

import PIL
from PIL import Image
im1 = Image.open("mouse-sizing-n-cropping-files/jungle.jpg")
#longer_side = max(im1.size)
basewidth = 700
hsize = 500
img = im1.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/jungle700.jpg")
im = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
im

import Tkinter
from PIL import Image, ImageTk
from sys import argv

window = Tkinter.Tk(className="bla")

image = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
canvas = Tkinter.Canvas(window, width=image.size[0], height=image.size[1])
canvas.pack()
image_tk = ImageTk.PhotoImage(image)
canvas.create_image(image.size[0]//2, image.size[1]//2, image=image_tk)

def callback(event):
    #print "[",event.x,"],["+event.y,"]"
    print "[",event.x,",",event.y,"],",
 
canvas.bind("<Button-1>", callback)
Tkinter.mainloop()

poly = np.array([ [ 320 , 123 ], [ 437 , 121 ], [ 451 , 267 ], [ 356 , 277 ],[ 321 , 125 ] ], np.int32)
print poly

import cv2
import numpy as np 

import cv2
import numpy as np 

# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")

src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)

src_mask = np.zeros(src.shape, src.dtype)

poly = np.array([ [ 269 , 24 ], [ 273 , 117 ], [ 301 , 145 ], [ 345 , 199 ], 
[ 398 , 273 ], [ 428 , 317 ], [ 447 , 278 ], [ 440 , 231 ], [ 487 , 220 ], [ 491 , 202 ],
[ 437 , 209 ], [ 415 , 162 ], [ 433 , 126 ], [ 410 , 113 ], [ 360 , 115 ], [ 363 , 73 ], [ 317 , 25 ] ], np.int32)



cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (550,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("mouse-sizing-n-cropping-files/soil-jungle.jpg", output);


import cv2
import numpy as np 

# Read images
#dst = cv2.imread("01-ajungle2.jpg")
#dst = cv2.imread("/notebooks/edge-preserving-normalized-convolution-filter.jpg")
#src = cv2.imread("/notebooks/learnopencv/SeamlessCloning/images/airplane.jpg")
#src = cv2.imread("desert-drought.jpg")
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
#src = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
#dst = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
# Create a rough mask around the airplane.
src_mask = np.zeros(src.shape, src.dtype)
#poly = np.array([ [4,80], [30,54], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
poly = np.array([ [ 320 , 123 ], [ 437 , 121 ], [ 451 , 267 ], [ 356 , 277 ],[ 321 , 125 ] ], np.int32)
#poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
#poly = np.array([ [736, 113],[768, 97],[784, 93],[788, 157],[789, 197],[788, 225],[777, 265],[768, 301],[778, 318],\
#[794, 332],[767, 386],[743, 348],[707, 314],[693, 304],[666, 299],[668, 275],[705, 273],[729, 272],\
#[716, 223],[706, 236],[689, 207],[687, 217],[687, 231],[667, 217],[647, 226],[629, 208],[614, 207],\
#[615, 198],[602, 183],[607, 174],[609, 159],[636, 162],[640, 146],[634, 137],[597, 153],[594, 137],\
#[601, 122],[583, 115],[611, 83],[626, 78],[622, 72],[589, 73],[583, 51],[591, 13],[605, 10],[631, 28],\
#[650, 17],[666, 39],[681, 18],[699, 4],[728, 6],[751, 7],[743, 39],[794, 13],[797, 42],[764, 66],\
#[735, 101],[736, 113] ], np.int32)




cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (250,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("01-cloning-example3.jpg", output);


im = Image.open("01-cloning-example3.jpg")
im

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()
from mpld3 import plugins

fig, ax = plt.subplots(subplot_kw=dict(facecolor='#EEEEEE'))
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot (with tooltips!)", size=20)

labels = ['point {0}'.format(i + 1) for i in range(N)]
fig.plugins = [plugins.PointLabelTooltip(scatter, labels)]

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()

fig, ax = plt.subplots(subplot_kw=dict(facecolor='#EEEEEE'))
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot", size=18);

import matplotlib
import numpy as np
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline  

x = np.linspace(0, 3*np.pi, 500)
plt.plot(x, np.sin(x**2))
plt.title('A simple chirp')
plt.show()

import numpy as np
import codecs, json 

from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

!wget -O mouse-sizing-n-cropping-files/postoid.jpg https://jacknorthrup.com/postoids/postoid%20%2810%29.jpg

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/postoid.jpg')
im.size # (width,height) tuple

import PIL
from PIL import Image

basewidth = 400
img = Image.open("mouse-sizing-n-cropping-files/postoid.jpg")
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/postoid400.jpg")
img

http://stackoverflow.com/questions/6136588/image-cropping-using-python
http://2017.compciv.org/guide/topics/python-nonstandard-libraries/pillow.html

!wget -O mouse-sizing-n-cropping-files/soil.jpg https://static.pexels.com/photos/60013/desert-drought-dehydrated-clay-soil-60013.jpeg

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil.jpg')
im.size # (width,height) tuple

import PIL
from PIL import Image

basewidth = 600
img = Image.open("mouse-sizing-n-cropping-files/soil.jpg")
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/soil600.jpg")

from PIL import Image
im=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
im.size # (width,height) tuple

from PIL import Image
im=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
im # (display image)

def add_cursor(fig, ax):
    plt.close(fig)

    vline = ax.axvline(1, color='k')
    hline = ax.axhline(0.5, color='k')

    def set_cursor(x, y):
        vline.set_xdata((x, x))
        hline.set_ydata((y, y))
        display(fig)

    interact(set_cursor, x=ax.get_xlim(), y=ax.get_ylim())

#import ipympl
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline 
x = (sin(6))
plt.plot([0, 1, 2, x, 5, 8,0,-4, -2, -6])
plt.show()


import matplotlib.pyplot as plt
%matplotlib inline 
plt.rcParams['figure.figsize'] = (20.0, 10.0)
import matplotlib.image as mpimg
import numpy as np
img=mpimg.imread('mouse-sizing-n-cropping-files/soil600.jpg')
imgplot = plt.imshow(img)


from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (145, 50, img.width - 40, img.height - 135)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/soil-cropped.png')   

img=mpimg.imread('mouse-sizing-n-cropping-files/soil-cropped.png')
imgplot = plt.imshow(img)

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im.size # (width,height) tuple

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im

http://mpld3.github.io/

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.path as mpath
import matplotlib.patches as mpatches

import mpld3
from mpld3 import plugins, utils


class LinkedDragPlugin(plugins.PluginBase):
    JAVASCRIPT = r"""
    mpld3.register_plugin("drag", DragPlugin);
    DragPlugin.prototype = Object.create(mpld3.Plugin.prototype);
    DragPlugin.prototype.constructor = DragPlugin;
    DragPlugin.prototype.requiredProps = ["idpts", "idline", "idpatch"];
    DragPlugin.prototype.defaultProps = {}
    function DragPlugin(fig, props){
        mpld3.Plugin.call(this, fig, props);
    };

    DragPlugin.prototype.draw = function(){
        var patchobj = mpld3.get_element(this.props.idpatch, this.fig);
        var ptsobj = mpld3.get_element(this.props.idpts, this.fig);
        var lineobj = mpld3.get_element(this.props.idline, this.fig);

        var drag = d3.behavior.drag()
            .origin(function(d) { return {x:ptsobj.ax.x(d[0]),
                                          y:ptsobj.ax.y(d[1])}; })
            .on("dragstart", dragstarted)
            .on("drag", dragged)
            .on("dragend", dragended);

        lineobj.path.attr("d", lineobj.datafunc(ptsobj.offsets));
        patchobj.path.attr("d", patchobj.datafunc(ptsobj.offsets,
                                                  patchobj.pathcodes));
        lineobj.data = ptsobj.offsets;
        patchobj.data = ptsobj.offsets;

        ptsobj.elements()
           .data(ptsobj.offsets)
           .style("cursor", "default")
           .call(drag);

        function dragstarted(d) {
          d3.event.sourceEvent.stopPropagation();
          d3.select(this).classed("dragging", true);
        }

        function dragged(d, i) {
          d[0] = ptsobj.ax.x.invert(d3.event.x);
          d[1] = ptsobj.ax.y.invert(d3.event.y);
          d3.select(this)
            .attr("transform", "translate(" + [d3.event.x,d3.event.y] + ")");
          lineobj.path.attr("d", lineobj.datafunc(ptsobj.offsets));
          patchobj.path.attr("d", patchobj.datafunc(ptsobj.offsets,
                                                    patchobj.pathcodes));
        }

        function dragended(d, i) {
          d3.select(this).classed("dragging", false);
        }
    }

    mpld3.register_plugin("drag", DragPlugin);
    """

    def __init__(self, points, line, patch):
        if isinstance(points, mpl.lines.Line2D):
            suffix = "pts"
        else:
            suffix = None

        self.dict_ = {"type": "drag",
                      "idpts": utils.get_id(points, suffix),
                      "idline": utils.get_id(line),
                      "idpatch": utils.get_id(patch)}


fig, ax = plt.subplots()

Path = mpath.Path
path_data = [
    (Path.MOVETO, (1.58, -2.57)),
    (Path.CURVE4, (0.35, -1.1)),
    (Path.CURVE4, (-1.75, 2.0)),
    (Path.CURVE4, (0.375, 2.0)),
    (Path.LINETO, (0.85, 1.15)),
    (Path.CURVE4, (2.2, 3.2)),
    (Path.CURVE4, (3, 0.05)),
    (Path.CURVE4, (2.0, -0.5)),
    (Path.CLOSEPOLY, (1.58, -2.57)),
    ]
codes, verts = zip(*path_data)
path = mpath.Path(verts, codes)
patch = mpatches.PathPatch(path, facecolor='r', alpha=0.5)
ax.add_patch(patch)

# plot control points and connecting lines
x, y = zip(*path.vertices[:-1])
points = ax.plot(x, y, 'go', ms=10)
line = ax.plot(x, y, '-k')

ax.grid(True, color='gray', alpha=0.5)
ax.axis('equal')
ax.set_title("Drag Points to Change Path", fontsize=18)

plugins.connect(fig, LinkedDragPlugin(points[0], line[0], patch))

mpld3.display()

class ImageFile(object):
    """Class for storing an image location."""
    def __init__(self, fpath):
        self.fpath = fpath
    def _repr_png_(self):
        return open(self.fpath, 'r').read()
ImageFile('mouse-sizing-n-cropping-files/soil600.jpg')

from IPython.display import Image
image = Image('mouse-sizing-n-cropping-files/soil600.jpg')
image


class ImageFile(object):
    """Class for storing an image location."""

    def __init__(self, fpath):
        self.fpath = fpath
        self.format = fpath.split('.')[-1]

    def _repr_png_(self):
        if self.format == 'png':
            return open(self.fpath, 'r').read()

    def _repr_jpeg_(self):
        if self.format == 'jpeg' or self.format == 'jpg':
            return open(self.fpath, 'r').read()

    def _repr_svg_(self):
        if self.format == 'svg':
            return open(self.fpath, 'r').read()



import matplotlib
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
%matplotlib inline

im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
plt.imshow(im)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
%matplotlib inline  
from mpld3 import plugins
from PIL import Image
img=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
 

fig, ax = plt.subplots()
im = ax.imshow(img, extent=(10, 20, 10, 20),
               origin='lower', zorder=1, interpolation='nearest')

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()
from PIL import Image


im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))



import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

!sudo locate manilyn.jpg

from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (200, 0, img.width - 150, img.height - 0)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/cropsoil600.jpg')   

import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/cropsoil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

im = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
im

#Python 2.7 - Linux
from PIL import Image
# open an image file (.jpg or.png)
im1 = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
# multiply each pixel by a variable - less than 1 is darker greater than 1 is lighter
# works best with .jpg and .png images
im2 = im1.point(lambda p: p * 1.8) # lighter
im3 = im1.point(lambda p: p * .5)  # Darker

# This pops up your defaultimage viewer
im1.show()
im2.show()
im3.show()
# save modified image 
im2.save("mouse-sizing-n-cropping-files/soil-light.jpg")
im3.save("mouse-sizing-n-cropping-files/soil-dark.jpg")


import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))


mpld3.display()

import numpy as np
import cv2
from matplotlib import pyplot as plt

img = cv2.imread('mouse-sizing-n-cropping-files/soil600.jpg')
mask = np.zeros(img.shape[:2],np.uint8)

bgdModel = np.zeros((1,65),np.float64)
fgdModel = np.zeros((1,65),np.float64)

rect = (425,107,686,454)
cv2.grabCut(img,mask,rect,bgdModel,fgdModel,5,cv2.GC_INIT_WITH_RECT)
mask2 = np.where((mask==2)|(mask==0),0,1).astype('uint8')
img = img*mask2[:,:,np.newaxis]

plt.imshow(img)
plt.colorbar()
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
#%matplotlib inline  
from mpld3 import plugins
from PIL import Image
fig, ax = plt.subplots()

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()

!wget -O mouse-sizing-n-cropping-files/jungle.jpg https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg/800px-Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg

import PIL
from PIL import Image
im1 = Image.open("mouse-sizing-n-cropping-files/jungle.jpg")
#longer_side = max(im1.size)
basewidth = 700
hsize = 500
img = im1.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/jungle700.jpg")
im = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
im

import Tkinter
from PIL import Image, ImageTk
from sys import argv

window = Tkinter.Tk(className="bla")

image = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
canvas = Tkinter.Canvas(window, width=image.size[0], height=image.size[1])
canvas.pack()
image_tk = ImageTk.PhotoImage(image)
canvas.create_image(image.size[0]//2, image.size[1]//2, image=image_tk)

def callback(event):
    #print "[",event.x,"],["+event.y,"]"
    print "[",event.x,",",event.y,"],",
 
canvas.bind("<Button-1>", callback)
Tkinter.mainloop()

poly = np.array([ [ 320 , 123 ], [ 437 , 121 ], [ 451 , 267 ], [ 356 , 277 ],[ 321 , 125 ] ], np.int32)
print poly

import cv2
import numpy as np 

import cv2
import numpy as np 

# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")

src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)

src_mask = np.zeros(src.shape, src.dtype)

poly = np.array([ [ 269 , 24 ], [ 273 , 117 ], [ 301 , 145 ], [ 345 , 199 ], 
[ 398 , 273 ], [ 428 , 317 ], [ 447 , 278 ], [ 440 , 231 ], [ 487 , 220 ], [ 491 , 202 ],
[ 437 , 209 ], [ 415 , 162 ], [ 433 , 126 ], [ 410 , 113 ], [ 360 , 115 ], [ 363 , 73 ], [ 317 , 25 ] ], np.int32)



cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (550,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("mouse-sizing-n-cropping-files/soil-jungle.jpg", output);


import cv2
import numpy as np 

# Read images
#dst = cv2.imread("01-ajungle2.jpg")
#dst = cv2.imread("/notebooks/edge-preserving-normalized-convolution-filter.jpg")
#src = cv2.imread("/notebooks/learnopencv/SeamlessCloning/images/airplane.jpg")
#src = cv2.imread("desert-drought.jpg")
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
#src = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
#dst = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
# Create a rough mask around the airplane.
src_mask = np.zeros(src.shape, src.dtype)
#poly = np.array([ [4,80], [30,54], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
poly = np.array([ [ 320 , 123 ], [ 437 , 121 ], [ 451 , 267 ], [ 356 , 277 ],[ 321 , 125 ] ], np.int32)
#poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
#poly = np.array([ [736, 113],[768, 97],[784, 93],[788, 157],[789, 197],[788, 225],[777, 265],[768, 301],[778, 318],\
#[794, 332],[767, 386],[743, 348],[707, 314],[693, 304],[666, 299],[668, 275],[705, 273],[729, 272],\
#[716, 223],[706, 236],[689, 207],[687, 217],[687, 231],[667, 217],[647, 226],[629, 208],[614, 207],\
#[615, 198],[602, 183],[607, 174],[609, 159],[636, 162],[640, 146],[634, 137],[597, 153],[594, 137],\
#[601, 122],[583, 115],[611, 83],[626, 78],[622, 72],[589, 73],[583, 51],[591, 13],[605, 10],[631, 28],\
#[650, 17],[666, 39],[681, 18],[699, 4],[728, 6],[751, 7],[743, 39],[794, 13],[797, 42],[764, 66],\
#[735, 101],[736, 113] ], np.int32)




cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (250,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("01-cloning-example3.jpg", output);


im = Image.open("01-cloning-example3.jpg")
im

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()
from mpld3 import plugins

fig, ax = plt.subplots(subplot_kw=dict(axisbg='#EEEEEE'))
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot (with tooltips!)", size=20)

labels = ['point {0}'.format(i + 1) for i in range(N)]
fig.plugins = [plugins.PointLabelTooltip(scatter, labels)]

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()




fig, ax = plt.subplots(subplot_kw=dict(axisbg='#EEEEEE'))
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot", size=18);

import matplotlib
import numpy as np
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline  

x = np.linspace(0, 3*np.pi, 500)
plt.plot(x, np.sin(x**2))
plt.title('A simple chirp')
plt.show()



from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

!wget -O mouse-sizing-n-cropping-files/postoid.jpg https://jacknorthrup.com/postoids/postoid%20%2810%29.jpg

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/postoid.jpg')
im.size # (width,height) tuple

import PIL
from PIL import Image

basewidth = 400
img = Image.open("mouse-sizing-n-cropping-files/postoid.jpg")
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/postoid400.jpg")
img

http://stackoverflow.com/questions/6136588/image-cropping-using-python
http://2017.compciv.org/guide/topics/python-nonstandard-libraries/pillow.html

!wget -O mouse-sizing-n-cropping-files/soil.jpg https://static.pexels.com/photos/60013/desert-drought-dehydrated-clay-soil-60013.jpeg

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil.jpg')
im.size # (width,height) tuple

import PIL
from PIL import Image

basewidth = 600
img = Image.open("mouse-sizing-n-cropping-files/soil.jpg")
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/soil600.jpg")

from PIL import Image
im=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
im.size # (width,height) tuple

from PIL import Image
im=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
im # (display image)

def add_cursor(fig, ax):
    plt.close(fig)

    vline = ax.axvline(1, color='k')
    hline = ax.axhline(0.5, color='k')

    def set_cursor(x, y):
        vline.set_xdata((x, x))
        hline.set_ydata((y, y))
        display(fig)

    interact(set_cursor, x=ax.get_xlim(), y=ax.get_ylim())

#import ipympl
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline 
x = (sin(6))
plt.plot([0, 1, 2, x, 5, 8,0,-4, -2, -6])
plt.show()


import matplotlib.pyplot as plt
%matplotlib inline 
plt.rcParams['figure.figsize'] = (20.0, 10.0)
import matplotlib.image as mpimg
import numpy as np
img=mpimg.imread('mouse-sizing-n-cropping-files/soil600.jpg')
imgplot = plt.imshow(img)


from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (145, 50, img.width - 40, img.height - 135)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/soil-cropped.png')   

img=mpimg.imread('mouse-sizing-n-cropping-files/soil-cropped.png')
imgplot = plt.imshow(img)

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im.size # (width,height) tuple

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im

http://mpld3.github.io/

class ImageFile(object):
    """Class for storing an image location."""
    def __init__(self, fpath):
        self.fpath = fpath
    def _repr_png_(self):
        return open(self.fpath, 'r').read()
ImageFile('mouse-sizing-n-cropping-files/soil600.jpg')

from IPython.display import Image
image = Image('mouse-sizing-n-cropping-files/soil600.jpg')
image


class ImageFile(object):
    """Class for storing an image location."""

    def __init__(self, fpath):
        self.fpath = fpath
        self.format = fpath.split('.')[-1]

    def _repr_png_(self):
        if self.format == 'png':
            return open(self.fpath, 'r').read()

    def _repr_jpeg_(self):
        if self.format == 'jpeg' or self.format == 'jpg':
            return open(self.fpath, 'r').read()

    def _repr_svg_(self):
        if self.format == 'svg':
            return open(self.fpath, 'r').read()



import matplotlib
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
%matplotlib inline

im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
plt.imshow(im)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
%matplotlib inline  
from mpld3 import plugins
from PIL import Image
img=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
 

fig, ax = plt.subplots()
im = ax.imshow(img, extent=(10, 20, 10, 20),
               origin='lower', zorder=1, interpolation='nearest')

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()
from PIL import Image


im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))



import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

!sudo locate manilyn.jpg

from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (200, 0, img.width - 150, img.height - 0)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/cropsoil600.jpg')   

import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/cropsoil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

im = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
im

#Python 2.7 - Linux
from PIL import Image
# open an image file (.jpg or.png)
im1 = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
# multiply each pixel by a variable - less than 1 is darker greater than 1 is lighter
# works best with .jpg and .png images
im2 = im1.point(lambda p: p * 1.8) # lighter
im3 = im1.point(lambda p: p * .5)  # Darker

# This pops up your defaultimage viewer
im1.show()
im2.show()
im3.show()
# save modified image 
im2.save("mouse-sizing-n-cropping-files/soil-light.jpg")
im3.save("mouse-sizing-n-cropping-files/soil-dark.jpg")


import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))


mpld3.display()

import numpy as np
import cv2
from matplotlib import pyplot as plt

img = cv2.imread('mouse-sizing-n-cropping-files/soil600.jpg')
mask = np.zeros(img.shape[:2],np.uint8)

bgdModel = np.zeros((1,65),np.float64)
fgdModel = np.zeros((1,65),np.float64)

rect = (425,107,686,454)
cv2.grabCut(img,mask,rect,bgdModel,fgdModel,5,cv2.GC_INIT_WITH_RECT)
mask2 = np.where((mask==2)|(mask==0),0,1).astype('uint8')
img = img*mask2[:,:,np.newaxis]

plt.imshow(img)
plt.colorbar()
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
#%matplotlib inline  
from mpld3 import plugins
from PIL import Image
fig, ax = plt.subplots()

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()

!wget -O mouse-sizing-n-cropping-files/jungle.jpg https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg/800px-Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg

import PIL
from PIL import Image
im1 = Image.open("mouse-sizing-n-cropping-files/jungle.jpg")
#longer_side = max(im1.size)
basewidth = 700
hsize = 500
img = im1.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/jungle700.jpg")
im = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
im

import Tkinter
from PIL import Image, ImageTk
from sys import argv

window = Tkinter.Tk(className="bla")

image = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
canvas = Tkinter.Canvas(window, width=image.size[0], height=image.size[1])
canvas.pack()
image_tk = ImageTk.PhotoImage(image)
canvas.create_image(image.size[0]//2, image.size[1]//2, image=image_tk)

def callback(event):
    #print "[",event.x,"],["+event.y,"]"
    print "[",event.x,",",event.y,"],",
 
canvas.bind("<Button-1>", callback)
Tkinter.mainloop()

poly = np.array([ [ 320 , 123 ], [ 437 , 121 ], [ 451 , 267 ], [ 356 , 277 ],[ 321 , 125 ] ], np.int32)
print poly

import cv2
import numpy as np 

import cv2
import numpy as np 

# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")

src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)

src_mask = np.zeros(src.shape, src.dtype)

poly = np.array([ [ 269 , 24 ], [ 273 , 117 ], [ 301 , 145 ], [ 345 , 199 ], 
[ 398 , 273 ], [ 428 , 317 ], [ 447 , 278 ], [ 440 , 231 ], [ 487 , 220 ], [ 491 , 202 ],
[ 437 , 209 ], [ 415 , 162 ], [ 433 , 126 ], [ 410 , 113 ], [ 360 , 115 ], [ 363 , 73 ], [ 317 , 25 ] ], np.int32)



cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (550,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("mouse-sizing-n-cropping-files/soil-jungle.jpg", output);


import cv2
import numpy as np 

# Read images
#dst = cv2.imread("01-ajungle2.jpg")
#dst = cv2.imread("/notebooks/edge-preserving-normalized-convolution-filter.jpg")
#src = cv2.imread("/notebooks/learnopencv/SeamlessCloning/images/airplane.jpg")
#src = cv2.imread("desert-drought.jpg")
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
#src = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
#dst = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
# Create a rough mask around the airplane.
src_mask = np.zeros(src.shape, src.dtype)
#poly = np.array([ [4,80], [30,54], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
poly = np.array([ [ 320 , 123 ], [ 437 , 121 ], [ 451 , 267 ], [ 356 , 277 ],[ 321 , 125 ] ], np.int32)
#poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
#poly = np.array([ [736, 113],[768, 97],[784, 93],[788, 157],[789, 197],[788, 225],[777, 265],[768, 301],[778, 318],\
#[794, 332],[767, 386],[743, 348],[707, 314],[693, 304],[666, 299],[668, 275],[705, 273],[729, 272],\
#[716, 223],[706, 236],[689, 207],[687, 217],[687, 231],[667, 217],[647, 226],[629, 208],[614, 207],\
#[615, 198],[602, 183],[607, 174],[609, 159],[636, 162],[640, 146],[634, 137],[597, 153],[594, 137],\
#[601, 122],[583, 115],[611, 83],[626, 78],[622, 72],[589, 73],[583, 51],[591, 13],[605, 10],[631, 28],\
#[650, 17],[666, 39],[681, 18],[699, 4],[728, 6],[751, 7],[743, 39],[794, 13],[797, 42],[764, 66],\
#[735, 101],[736, 113] ], np.int32)




cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (250,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("01-cloning-example3.jpg", output);


im = Image.open("01-cloning-example3.jpg")
im

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()
from mpld3 import plugins

fig, ax = plt.subplots(subplot_kw=dict(axisbg='#EEEEEE'))
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot (with tooltips!)", size=20)

labels = ['point {0}'.format(i + 1) for i in range(N)]
fig.plugins = [plugins.PointLabelTooltip(scatter, labels)]

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()




fig, ax = plt.subplots(subplot_kw=dict(axisbg='#EEEEEE'))
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot", size=18);

import matplotlib
import numpy as np
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline  

x = np.linspace(0, 3*np.pi, 500)
plt.plot(x, np.sin(x**2))
plt.title('A simple chirp')
plt.show()



from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

import PIL
from PIL import Image
im1 = Image.open("mouse-sizing-n-cropping-files/jungle.jpg")
#longer_side = max(im1.size)
basewidth = 700
hsize = 500
img = im1.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/jungle700.jpg")
im = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
im

import tkinter as Tkinter
from PIL import Image, ImageTk
from sys import argv
Tdst = []# set()
window = Tkinter.Tk(className="bla")

image = Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
canvas = Tkinter.Canvas(window, width=image.size[0], height=image.size[1])
canvas.pack()
image_tk = ImageTk.PhotoImage(image)
canvas.create_image(image.size[0]//2, image.size[1]//2, image=image_tk)

def callback(event):
    #print "[",event.x,"],["+event.y,"]"

    Tdst.append((event.x,event.y))

canvas.bind("<Button-1>", callback)
Tkinter.mainloop()
x,y = Tdst[0]
print(x)
print(y)

import tkinter as Tkinter
from PIL import Image, ImageTk
from sys import argv
Tcln = []
window = Tkinter.Tk(className="bla")

image = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
canvas = Tkinter.Canvas(window, width=image.size[0], height=image.size[1])
canvas.pack()
image_tk = ImageTk.PhotoImage(image)
canvas.create_image(image.size[0]//2, image.size[1]//2, image=image_tk)
print ("The points that were clicked: \n\n")
def callback(event):
    #print "[",event.x,"],["+event.y,"]"
    print ("[",event.x,",",event.y,"],",)
    Tcln.append([event.x,event.y])

canvas.bind("<Button-1>", callback)
Tkinter.mainloop()

# the points that were clicked 
print(Tcln)

import cv2
import numpy as np 

# Read destination image
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
# Read the source
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")

# Create a rough mask around the capture.
src_mask = np.zeros(src.shape, src.dtype)

#Create an array to be cloned onto destination
poly = np.array(Tcln, np.int32)

# Convert Image to mask
cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is the location where the of the capture will be placed
x,y = Tdst[0]

center = (x,y)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("01-cloning-example3.jpg", output);


# Open AN view the image after the seamlessClone
from PIL import Image
im=Image.open('01-cloning-example3.jpg')
im





import matplotlib.pyplot as plt
%matplotlib inline 
plt.rcParams['figure.figsize'] = (10.0, 8.0)
import matplotlib.image as mpimg
import numpy as np
img=mpimg.imread('01-cloning-example3.jpg')
imgplot = plt.imshow(img)


#import ipympl
from math import sin, cos
import matplotlib.pyplot as plt
%matplotlib inline 
X =[]
Y =[]
for x in range(0,50):
        X.append(sin(x)+(x*.15))
        Y.append(cos(x)+(x*.15))   
    
plt.plot(X,Y)
plt.show()


from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (200, 50, img.width - 40, img.height - 105)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/soil-cropped.png')   

img=mpimg.imread('mouse-sizing-n-cropping-files/soil-cropped.png')
imgplot = plt.imshow(img)

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im.size # (width,height) tuple

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im

http://mpld3.github.io/

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.path as mpath
import matplotlib.patches as mpatches

import mpld3
from mpld3 import plugins, utils


class LinkedDragPlugin(plugins.PluginBase):
    JAVASCRIPT = r"""
    mpld3.register_plugin("drag", DragPlugin);
    DragPlugin.prototype = Object.create(mpld3.Plugin.prototype);
    DragPlugin.prototype.constructor = DragPlugin;
    DragPlugin.prototype.requiredProps = ["idpts", "idline", "idpatch"];
    DragPlugin.prototype.defaultProps = {}
    function DragPlugin(fig, props){
        mpld3.Plugin.call(this, fig, props);
    };

    DragPlugin.prototype.draw = function(){
        var patchobj = mpld3.get_element(this.props.idpatch, this.fig);
        var ptsobj = mpld3.get_element(this.props.idpts, this.fig);
        var lineobj = mpld3.get_element(this.props.idline, this.fig);

        var drag = d3.behavior.drag()
            .origin(function(d) { return {x:ptsobj.ax.x(d[0]),
                                          y:ptsobj.ax.y(d[1])}; })
            .on("dragstart", dragstarted)
            .on("drag", dragged)
            .on("dragend", dragended);

        lineobj.path.attr("d", lineobj.datafunc(ptsobj.offsets));
        patchobj.path.attr("d", patchobj.datafunc(ptsobj.offsets,
                                                  patchobj.pathcodes));
        lineobj.data = ptsobj.offsets;
        patchobj.data = ptsobj.offsets;

        ptsobj.elements()
           .data(ptsobj.offsets)
           .style("cursor", "default")
           .call(drag);

        function dragstarted(d) {
          d3.event.sourceEvent.stopPropagation();
          d3.select(this).classed("dragging", true);
        }

        function dragged(d, i) {
          d[0] = ptsobj.ax.x.invert(d3.event.x);
          d[1] = ptsobj.ax.y.invert(d3.event.y);
          d3.select(this)
            .attr("transform", "translate(" + [d3.event.x,d3.event.y] + ")");
          lineobj.path.attr("d", lineobj.datafunc(ptsobj.offsets));
          patchobj.path.attr("d", patchobj.datafunc(ptsobj.offsets,
                                                    patchobj.pathcodes));
        }

        function dragended(d, i) {
          d3.select(this).classed("dragging", false);
        }
    }

    mpld3.register_plugin("drag", DragPlugin);
    """

    def __init__(self, points, line, patch):
        if isinstance(points, mpl.lines.Line2D):
            suffix = "pts"
        else:
            suffix = None

        self.dict_ = {"type": "drag",
                      "idpts": utils.get_id(points, suffix),
                      "idline": utils.get_id(line),
                      "idpatch": utils.get_id(patch)}
def add_cursor(fig, ax):
    plt.close(fig)

    vline = ax.axvline(1, color='k')
    hline = ax.axhline(0.5, color='k')

    def set_cursor(x, y):
        vline.set_xdata((x, x))
        hline.set_ydata((y, y))
        display(fig)

def interact():
    set_cursor(x=ax.get_xlim(), y=ax.get_ylim())

fig, ax = plt.subplots()
add_cursor(fig, ax)
Path = mpath.Path
path_data = [
    (Path.MOVETO, (1.58, -2.57)),
    (Path.CURVE4, (0.35, -1.1)),
    (Path.CURVE4, (-1.75, 2.0)),
    (Path.CURVE4, (0.375, 2.0)),
    (Path.LINETO, (0.85, 1.15)),
    (Path.CURVE4, (2.2, 3.2)),
    (Path.CURVE4, (3, 0.05)),
    (Path.CURVE4, (2.0, -0.5)),
    (Path.CLOSEPOLY, (1.58, -2.57)),
    ]
codes, verts = zip(*path_data)
path = mpath.Path(verts, codes)
patch = mpatches.PathPatch(path, facecolor='r', alpha=0.5)
ax.add_patch(patch)

# plot control points and connecting lines
x, y = zip(*path.vertices[:-1])
points = ax.plot(x, y, 'go', ms=10)
line = ax.plot(x, y, '-k')

ax.grid(True, color='gray', alpha=0.5)
ax.axis('equal')
ax.set_title("Drag Points to Change Path", fontsize=18)

plugins.connect(fig, LinkedDragPlugin(points[0], line[0], patch))

mpld3.display()

class ImageFile(object):
    """Class for storing an image location."""
    def __init__(self, fpath):
        self.fpath = fpath
    def _repr_png_(self):
        return open(self.fpath, 'r').read()
ImageFile('mouse-sizing-n-cropping-files/soil600.jpg')

from IPython.display import Image
image = Image('mouse-sizing-n-cropping-files/soil600.jpg')
image


class ImageFile(object):
    """Class for storing an image location."""

    def __init__(self, fpath):
        self.fpath = fpath
        self.format = fpath.split('.')[-1]

    def _repr_png_(self):
        if self.format == 'png':
            return open(self.fpath, 'r').read()

    def _repr_jpeg_(self):
        if self.format == 'jpeg' or self.format == 'jpg':
            return open(self.fpath, 'r').read()

    def _repr_svg_(self):
        if self.format == 'svg':
            return open(self.fpath, 'r').read()



import matplotlib
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
%matplotlib inline

im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
plt.imshow(im)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
%matplotlib inline  
from mpld3 import plugins
from PIL import Image
img=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
 

fig, ax = plt.subplots()



im = ax.imshow(img, extent=(10, 20, 10, 20),
               origin='lower', zorder=1, interpolation='nearest')

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()
from PIL import Image


im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))



import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

!sudo locate manilyn.jpg

from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (200, 0, img.width - 150, img.height - 0)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/cropsoil600.jpg')   

import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/cropsoil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

im = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
im

#Python 2.7 - Linux
from PIL import Image
# open an image file (.jpg or.png)
im1 = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
# multiply each pixel by a variable - less than 1 is darker greater than 1 is lighter
# works best with .jpg and .png images
im2 = im1.point(lambda p: p * 1.8) # lighter
im3 = im1.point(lambda p: p * .5)  # Darker

# This pops up your defaultimage viewer
im1.show()
im2.show()
im3.show()
# save modified image 
im2.save("mouse-sizing-n-cropping-files/soil-light.jpg")
im3.save("mouse-sizing-n-cropping-files/soil-dark.jpg")


import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))


mpld3.display()

import numpy as np
import cv2
from matplotlib import pyplot as plt

img = cv2.imread('mouse-sizing-n-cropping-files/soil600.jpg')
mask = np.zeros(img.shape[:2],np.uint8)

bgdModel = np.zeros((1,65),np.float64)
fgdModel = np.zeros((1,65),np.float64)

rect = (425,107,686,454)
cv2.grabCut(img,mask,rect,bgdModel,fgdModel,5,cv2.GC_INIT_WITH_RECT)
mask2 = np.where((mask==2)|(mask==0),0,1).astype('uint8')
img = img*mask2[:,:,np.newaxis]

plt.imshow(img)
plt.colorbar()
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
#%matplotlib inline  
from mpld3 import plugins
from PIL import Image
fig, ax = plt.subplots()

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()

!wget -O mouse-sizing-n-cropping-files/jungle.jpg https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg/800px-Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg

poly = np.array([ [ 320 , 123 ], [ 437 , 121 ], [ 451 , 267 ], [ 356 , 277 ],[ 321 , 125 ] ], np.int32)
print poly

import cv2
import numpy as np 

import cv2
import numpy as np 

# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")

src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)

src_mask = np.zeros(src.shape, src.dtype)

poly = np.array([ [ 269 , 24 ], [ 273 , 117 ], [ 301 , 145 ], [ 345 , 199 ], 
[ 398 , 273 ], [ 428 , 317 ], [ 447 , 278 ], [ 440 , 231 ], [ 487 , 220 ], [ 491 , 202 ],
[ 437 , 209 ], [ 415 , 162 ], [ 433 , 126 ], [ 410 , 113 ], [ 360 , 115 ], [ 363 , 73 ], [ 317 , 25 ] ], np.int32)



cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (550,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("mouse-sizing-n-cropping-files/soil-jungle.jpg", output);


import cv2
import numpy as np 

# Read images
#dst = cv2.imread("01-ajungle2.jpg")
#dst = cv2.imread("/notebooks/edge-preserving-normalized-convolution-filter.jpg")
#src = cv2.imread("/notebooks/learnopencv/SeamlessCloning/images/airplane.jpg")
#src = cv2.imread("desert-drought.jpg")
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
#src = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
#dst = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
# Create a rough mask around the airplane.
src_mask = np.zeros(src.shape, src.dtype)
#poly = np.array([ [4,80], [30,54], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
poly = np.array([ [ 320 , 123 ], [ 437 , 121 ], [ 451 , 267 ], [ 356 , 277 ],[ 321 , 125 ] ], np.int32)
#poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
#poly = np.array([ [736, 113],[768, 97],[784, 93],[788, 157],[789, 197],[788, 225],[777, 265],[768, 301],[778, 318],\
#[794, 332],[767, 386],[743, 348],[707, 314],[693, 304],[666, 299],[668, 275],[705, 273],[729, 272],\
#[716, 223],[706, 236],[689, 207],[687, 217],[687, 231],[667, 217],[647, 226],[629, 208],[614, 207],\
#[615, 198],[602, 183],[607, 174],[609, 159],[636, 162],[640, 146],[634, 137],[597, 153],[594, 137],\
#[601, 122],[583, 115],[611, 83],[626, 78],[622, 72],[589, 73],[583, 51],[591, 13],[605, 10],[631, 28],\
#[650, 17],[666, 39],[681, 18],[699, 4],[728, 6],[751, 7],[743, 39],[794, 13],[797, 42],[764, 66],\
#[735, 101],[736, 113] ], np.int32)




cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (250,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("01-cloning-example3.jpg", output);


im = Image.open("01-cloning-example3.jpg")
im

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()
from mpld3 import plugins

fig, ax = plt.subplots(subplot_kw=dict(axisbg='#EEEEEE'))
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot (with tooltips!)", size=20)

labels = ['point {0}'.format(i + 1) for i in range(N)]
fig.plugins = [plugins.PointLabelTooltip(scatter, labels)]

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()




fig, ax = plt.subplots(subplot_kw=dict(axisbg='#EEEEEE'))
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot", size=18);

import matplotlib
import numpy as np
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline  

x = np.linspace(0, 3*np.pi, 500)
plt.plot(x, np.sin(x**2))
plt.title('A simple chirp')
plt.show()



from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

!wget -O mouse-sizing-n-cropping-files/postoid.jpg https://jacknorthrup.com/postoids/postoid%20%2810%29.jpg

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/postoid.jpg')
im.size # (width,height) tuple

import PIL
from PIL import Image

basewidth = 400
img = Image.open("mouse-sizing-n-cropping-files/postoid.jpg")
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/postoid400.jpg")
img

http://stackoverflow.com/questions/6136588/image-cropping-using-python
http://2017.compciv.org/guide/topics/python-nonstandard-libraries/pillow.html

!wget -O mouse-sizing-n-cropping-files/soil.jpg https://static.pexels.com/photos/60013/desert-drought-dehydrated-clay-soil-60013.jpeg

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil.jpg')
im.size # (width,height) tuple

import PIL
from PIL import Image

basewidth = 600
img = Image.open("mouse-sizing-n-cropping-files/soil.jpg")
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/soil600.jpg")

from PIL import Image
im=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
im.size # (width,height) tuple

from PIL import Image
im=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
im # (display image)

def add_cursor(fig, ax):
    plt.close(fig)

    vline = ax.axvline(1, color='k')
    hline = ax.axhline(0.5, color='k')

    def set_cursor(x, y):
        vline.set_xdata((x, x))
        hline.set_ydata((y, y))
        display(fig)

    interact(set_cursor, x=ax.get_xlim(), y=ax.get_ylim())

#import ipympl
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline 
x = (sin(6))
plt.plot([0, 1, 2, x, 5, 8,0,-4, -2, -6])
plt.show()


import matplotlib.pyplot as plt
%matplotlib inline 
plt.rcParams['figure.figsize'] = (20.0, 10.0)
import matplotlib.image as mpimg
import numpy as np
img=mpimg.imread('mouse-sizing-n-cropping-files/soil600.jpg')
imgplot = plt.imshow(img)


from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (145, 50, img.width - 40, img.height - 135)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/soil-cropped.png')   

img=mpimg.imread('mouse-sizing-n-cropping-files/soil-cropped.png')
imgplot = plt.imshow(img)

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im.size # (width,height) tuple

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im

http://mpld3.github.io/

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.path as mpath
import matplotlib.patches as mpatches

import mpld3
from mpld3 import plugins, utils


class LinkedDragPlugin(plugins.PluginBase):
    JAVASCRIPT = r"""
    mpld3.register_plugin("drag", DragPlugin);
    DragPlugin.prototype = Object.create(mpld3.Plugin.prototype);
    DragPlugin.prototype.constructor = DragPlugin;
    DragPlugin.prototype.requiredProps = ["idpts", "idline", "idpatch"];
    DragPlugin.prototype.defaultProps = {}
    function DragPlugin(fig, props){
        mpld3.Plugin.call(this, fig, props);
    };

    DragPlugin.prototype.draw = function(){
        var patchobj = mpld3.get_element(this.props.idpatch, this.fig);
        var ptsobj = mpld3.get_element(this.props.idpts, this.fig);
        var lineobj = mpld3.get_element(this.props.idline, this.fig);

        var drag = d3.behavior.drag()
            .origin(function(d) { return {x:ptsobj.ax.x(d[0]),
                                          y:ptsobj.ax.y(d[1])}; })
            .on("dragstart", dragstarted)
            .on("drag", dragged)
            .on("dragend", dragended);

        lineobj.path.attr("d", lineobj.datafunc(ptsobj.offsets));
        patchobj.path.attr("d", patchobj.datafunc(ptsobj.offsets,
                                                  patchobj.pathcodes));
        lineobj.data = ptsobj.offsets;
        patchobj.data = ptsobj.offsets;

        ptsobj.elements()
           .data(ptsobj.offsets)
           .style("cursor", "default")
           .call(drag);

        function dragstarted(d) {
          d3.event.sourceEvent.stopPropagation();
          d3.select(this).classed("dragging", true);
        }

        function dragged(d, i) {
          d[0] = ptsobj.ax.x.invert(d3.event.x);
          d[1] = ptsobj.ax.y.invert(d3.event.y);
          d3.select(this)
            .attr("transform", "translate(" + [d3.event.x,d3.event.y] + ")");
          lineobj.path.attr("d", lineobj.datafunc(ptsobj.offsets));
          patchobj.path.attr("d", patchobj.datafunc(ptsobj.offsets,
                                                    patchobj.pathcodes));
        }

        function dragended(d, i) {
          d3.select(this).classed("dragging", false);
        }
    }

    mpld3.register_plugin("drag", DragPlugin);
    """

    def __init__(self, points, line, patch):
        if isinstance(points, mpl.lines.Line2D):
            suffix = "pts"
        else:
            suffix = None

        self.dict_ = {"type": "drag",
                      "idpts": utils.get_id(points, suffix),
                      "idline": utils.get_id(line),
                      "idpatch": utils.get_id(patch)}


fig, ax = plt.subplots()

Path = mpath.Path
path_data = [
    (Path.MOVETO, (1.58, -2.57)),
    (Path.CURVE4, (0.35, -1.1)),
    (Path.CURVE4, (-1.75, 2.0)),
    (Path.CURVE4, (0.375, 2.0)),
    (Path.LINETO, (0.85, 1.15)),
    (Path.CURVE4, (2.2, 3.2)),
    (Path.CURVE4, (3, 0.05)),
    (Path.CURVE4, (2.0, -0.5)),
    (Path.CLOSEPOLY, (1.58, -2.57)),
    ]
codes, verts = zip(*path_data)
path = mpath.Path(verts, codes)
patch = mpatches.PathPatch(path, facecolor='r', alpha=0.5)
ax.add_patch(patch)

# plot control points and connecting lines
x, y = zip(*path.vertices[:-1])
points = ax.plot(x, y, 'go', ms=10)
line = ax.plot(x, y, '-k')

ax.grid(True, color='gray', alpha=0.5)
ax.axis('equal')
ax.set_title("Drag Points to Change Path", fontsize=18)

plugins.connect(fig, LinkedDragPlugin(points[0], line[0], patch))

mpld3.display()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
from mpld3 import plugins

fig, ax = plt.subplots()

x = np.linspace(-2, 2, 20)
y = x[:, None]
X = np.zeros((20, 20, 4))

X[:, :, 0] = np.exp(- (x - 1) ** 2 - (y) ** 2)
X[:, :, 1] = np.exp(- (x + 0.71) ** 2 - (y - 0.71) ** 2)
X[:, :, 2] = np.exp(- (x + 0.71) ** 2 - (y + 0.71) ** 2)
X[:, :, 3] = np.exp(-0.25 * (x ** 2 + y ** 2))

im = ax.imshow(X, extent=(10, 20, 10, 20),
               origin='lower', zorder=1, interpolation='nearest')
fig.colorbar(im, ax=ax)

ax.set_title('An Image', size=20)

plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()


class ImageFile(object):
    """Class for storing an image location."""
    def __init__(self, fpath):
        self.fpath = fpath
    def _repr_png_(self):
        return open(self.fpath, 'r').read()
ImageFile('mouse-sizing-n-cropping-files/soil600.jpg')

from IPython.display import Image
image = Image('mouse-sizing-n-cropping-files/soil600.jpg')
image


class ImageFile(object):
    """Class for storing an image location."""

    def __init__(self, fpath):
        self.fpath = fpath
        self.format = fpath.split('.')[-1]

    def _repr_png_(self):
        if self.format == 'png':
            return open(self.fpath, 'r').read()

    def _repr_jpeg_(self):
        if self.format == 'jpeg' or self.format == 'jpg':
            return open(self.fpath, 'r').read()

    def _repr_svg_(self):
        if self.format == 'svg':
            return open(self.fpath, 'r').read()



import matplotlib
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
%matplotlib inline

im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
plt.imshow(im)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
%matplotlib inline  
from mpld3 import plugins
from PIL import Image
img=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
 

fig, ax = plt.subplots()
im = ax.imshow(img, extent=(10, 20, 10, 20),
               origin='lower', zorder=1, interpolation='nearest')

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()
from PIL import Image


im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))



import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

!sudo locate manilyn.jpg

from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (200, 0, img.width - 150, img.height - 0)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/cropsoil600.jpg')   

import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/cropsoil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

im = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
im

#Python 2.7 - Linux
from PIL import Image
# open an image file (.jpg or.png)
im1 = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
# multiply each pixel by a variable - less than 1 is darker greater than 1 is lighter
# works best with .jpg and .png images
im2 = im1.point(lambda p: p * 1.8) # lighter
im3 = im1.point(lambda p: p * .5)  # Darker

# This pops up your defaultimage viewer
im1.show()
im2.show()
im3.show()
# save modified image 
im2.save("mouse-sizing-n-cropping-files/soil-light.jpg")
im3.save("mouse-sizing-n-cropping-files/soil-dark.jpg")


import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))


mpld3.display()

import numpy as np
import cv2
from matplotlib import pyplot as plt

img = cv2.imread('mouse-sizing-n-cropping-files/soil600.jpg')
mask = np.zeros(img.shape[:2],np.uint8)

bgdModel = np.zeros((1,65),np.float64)
fgdModel = np.zeros((1,65),np.float64)

rect = (425,107,686,454)
cv2.grabCut(img,mask,rect,bgdModel,fgdModel,5,cv2.GC_INIT_WITH_RECT)
mask2 = np.where((mask==2)|(mask==0),0,1).astype('uint8')
img = img*mask2[:,:,np.newaxis]

plt.imshow(img)
plt.colorbar()
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
#%matplotlib inline  
from mpld3 import plugins
from PIL import Image
fig, ax = plt.subplots()

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()

!wget -O mouse-sizing-n-cropping-files/jungle.jpg https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg/800px-Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg

import PIL
from PIL import Image
im1 = Image.open("mouse-sizing-n-cropping-files/jungle.jpg")
#longer_side = max(im1.size)
basewidth = 700
hsize = 500
img = im1.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/jungle700.jpg")
im = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
im

from tkinter import *
from PIL import Image, ImageTk
from sys import argv

#window = Tkinter.Tk(className="bla")
window = Tk(className="Clickable")
image = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
canvas = Canvas(window, width=image.size[0], height=image.size[1])
canvas.pack()
image_tk = ImageTk.PhotoImage(image)
canvas.create_image(image.size[0]//2, image.size[1]//2, image=image_tk)


%matplotlib inline
#The line above is necesary to show Matplotlib's plots inside a Jupyter Notebook

import cv2
from matplotlib import pyplot as plt

#Import image
image = cv2.imread("input_path")

#Show the image with matplotlib



%matplotlib inline
#The line above is necesary to show Matplotlib's plots inside a Jupyter Notebook

import cv2
from matplotlib import pyplot as plt  # function to display the coordinates of
# of the points clicked on the image
def click_event(event, x, y, flags, params):

    # checking for left mouse clicks
    if event == cv2.EVENT_LBUTTONDOWN:

        # displaying the coordinates
        # on the Shell
        print(x, ' ', y)

        # displaying the coordinates
        # on the image window
        font = cv2.FONT_HERSHEY_SIMPLEX
        cv2.putText(img, str(x) + ',' +
                str(y), (x,y), font,
                1, (255, 0, 0), 2)
        cv2.imshow('image', img)

    # checking for right mouse clicks	
    if event==cv2.EVENT_RBUTTONDOWN:

        # displaying the coordinates
        # on the Shell
        print(x, ' ', y)

        # displaying the coordinates
        # on the image window
        font = cv2.FONT_HERSHEY_SIMPLEX
        b = img[y, x, 0]
        g = img[y, x, 1]
        r = img[y, x, 2]
        cv2.putText(img, str(b) + ',' +
                    str(g) + ',' + str(r),
                    (x,y), font, 1,
                    (255, 255, 0), 2)
        cv2.imshow('image', img)

# reading the image
img = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg", 1)

# displaying the image
plt.imshow(image)
plt.show()

# setting mouse handler for the image
# and calling the click_event() function
cv2.setMouseCallback('image', click_event)




from tkinter import *
from PIL import Image, ImageTk
from sys import argv
from logger_settings import api_logger
#api_logger.info('hello world')
#window = Tkinter.Tk(className="bla")
window = Tk(className="Clickable")
image = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
canvas = Canvas(window, width=image.size[0], height=image.size[1])
canvas.pack()
image_tk = ImageTk.PhotoImage(image)
api_logger.info(image_tk)
canvas.create_image(image.size[0]//2, image.size[1]//2, image=image_tk)

def callback(event):
    #print "[",event.x,"],["+event.y,"]"
    print ("[",event.x,",",event.y,"],",)

canvas.bind("<Button-1>", callback)
tkinter.mainloop()

# importing the module
import cv2

# function to display the coordinates of
# of the points clicked on the image
def click_event(event, x, y, flags, params):

	# checking for left mouse clicks
	if event == cv2.EVENT_LBUTTONDOWN:

		# displaying the coordinates
		# on the Shell
		print(x, ' ', y)

		# displaying the coordinates
		# on the image window
		font = cv2.FONT_HERSHEY_SIMPLEX
		cv2.putText(img, str(x) + ',' +
					str(y), (x,y), font,
					1, (255, 0, 0), 2)
		cv2.imshow('image', img)

	# checking for right mouse clicks	
	if event==cv2.EVENT_RBUTTONDOWN:

		# displaying the coordinates
		# on the Shell
		print(x, ' ', y)

		# displaying the coordinates
		# on the image window
		font = cv2.FONT_HERSHEY_SIMPLEX
		b = img[y, x, 0]
		g = img[y, x, 1]
		r = img[y, x, 2]
		cv2.putText(img, str(b) + ',' +
					str(g) + ',' + str(r),
					(x,y), font, 1,
					(255, 255, 0), 2)
		cv2.imshow('image', img)

# driver function
if __name__=="__main__":

	# reading the image
	img = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg", 1)

	# displaying the image
	cv2.imshow('image', img)

	# setting mouse handler for the image
	# and calling the click_event() function
	cv2.setMouseCallback('image', click_event)

	# wait for a key to be pressed to exit
	cv2.waitKey(0)

	# close the window
	cv2.destroyAllWindows()


poly = np.array([ [ 320 , 123 ], [ 437 , 121 ], [ 451 , 267 ], [ 356 , 277 ],[ 321 , 125 ] ], np.int32)
print poly

import cv2
import numpy as np 

import cv2
import numpy as np 

# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")

src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)

src_mask = np.zeros(src.shape, src.dtype)

poly = np.array([ [ 269 , 24 ], [ 273 , 117 ], [ 301 , 145 ], [ 345 , 199 ], 
[ 398 , 273 ], [ 428 , 317 ], [ 447 , 278 ], [ 440 , 231 ], [ 487 , 220 ], [ 491 , 202 ],
[ 437 , 209 ], [ 415 , 162 ], [ 433 , 126 ], [ 410 , 113 ], [ 360 , 115 ], [ 363 , 73 ], [ 317 , 25 ] ], np.int32)



cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (550,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("mouse-sizing-n-cropping-files/soil-jungle.jpg", output);


import cv2
import numpy as np 

# Read images
#dst = cv2.imread("01-ajungle2.jpg")
#dst = cv2.imread("/notebooks/edge-preserving-normalized-convolution-filter.jpg")
#src = cv2.imread("/notebooks/learnopencv/SeamlessCloning/images/airplane.jpg")
#src = cv2.imread("desert-drought.jpg")
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
#src = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
#dst = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
# Create a rough mask around the airplane.
src_mask = np.zeros(src.shape, src.dtype)
#poly = np.array([ [4,80], [30,54], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
poly = np.array([ [ 320 , 123 ], [ 437 , 121 ], [ 451 , 267 ], [ 356 , 277 ],[ 321 , 125 ] ], np.int32)
#poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
#poly = np.array([ [736, 113],[768, 97],[784, 93],[788, 157],[789, 197],[788, 225],[777, 265],[768, 301],[778, 318],\
#[794, 332],[767, 386],[743, 348],[707, 314],[693, 304],[666, 299],[668, 275],[705, 273],[729, 272],\
#[716, 223],[706, 236],[689, 207],[687, 217],[687, 231],[667, 217],[647, 226],[629, 208],[614, 207],\
#[615, 198],[602, 183],[607, 174],[609, 159],[636, 162],[640, 146],[634, 137],[597, 153],[594, 137],\
#[601, 122],[583, 115],[611, 83],[626, 78],[622, 72],[589, 73],[583, 51],[591, 13],[605, 10],[631, 28],\
#[650, 17],[666, 39],[681, 18],[699, 4],[728, 6],[751, 7],[743, 39],[794, 13],[797, 42],[764, 66],\
#[735, 101],[736, 113] ], np.int32)




cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (250,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("01-cloning-example3.jpg", output);


im = Image.open("01-cloning-example3.jpg")
im

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()
from mpld3 import plugins

fig, ax = plt.subplots(subplot_kw=dict(axisbg='#EEEEEE'))
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot (with tooltips!)", size=20)

labels = ['point {0}'.format(i + 1) for i in range(N)]
fig.plugins = [plugins.PointLabelTooltip(scatter, labels)]

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()




fig, ax = plt.subplots(subplot_kw=dict(axisbg='#EEEEEE'))
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot", size=18);

import matplotlib
import numpy as np
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline  

x = np.linspace(0, 3*np.pi, 500)
plt.plot(x, np.sin(x**2))
plt.title('A simple chirp')
plt.show()



from processing_py import *

app = App(600,400) # create window: width, height
app.background(255,0,0) # set background:  red, green, blue
app.redraw() # refresh the window

#app.exit() # close the window


import av
import numpy as np
from PIL import Image
import glob
import random
from genfilename import genfilename
all_im_objects = []
image_files = []
# create a list of filenames drom a directory
directory = "/home/jack/Downloads/00de3/PicFinder.AI-Unleash_Your_Creativity_with_AI-Generated_Images_files/"

images_per_frame = 24
fps = 24
duration = 60
#sort the *.jpg files
for i in range(0,duration*fps):
    random_img = random.choice(glob.glob(directory+"*.jpg"))
    image_files.append(random_img)
    #video duration and frame rate

# get enough files for the rquired duration and fps [:duration*fps]
imgs = image_files[:duration*fps]
"""for sequ_num in range(0,len(imgs)):
    # open each image and append all_im_objects with the image_object
    im = Image.open(imgs[sequ_num])
    all_im_objects.append(im)
"""
for sequ_num in range(0,len(imgs)):
    # open each image and append all_im_objects with the image_object repeated 24 times
    im = Image.open(imgs[sequ_num])
    im = im.resize((512,512), Image.BICUBIC)
    for _ in range(24):
        all_im_objects.append(im)
total_frames = duration * fps
container = av.open(genfilename(".mkv"), mode="w")
stream = container.add_stream("mpeg4", rate=fps)
stream.width = 512
stream.height = 512
stream.pix_fmt = "yuv420p"
for frame_i in range(total_frames):
    img = all_im_objects[frame_i]
    img_np = np.array(img)
    frame = av.VideoFrame.from_ndarray(img_np, format="rgb24")
    for packet in stream.encode(frame):
        container.mux(packet)
# Flush stream
for packet in stream.encode():
    container.mux(packet)
# Close the file
container.close()

import os
import subprocess
import glob
from PIL import Image
import cv2
import av
import av.datasets


# We want an H.264 stream in the Annex B byte-stream format.
# We haven't exposed bitstream filters yet, so we're gonna use the `ffmpeg` CLI.
h264_path = "new_night-sky.h264"
if not os.path.exists(h264_path):
    subprocess.check_call(
        [
            "ffmpeg",
            "-i",
            av.datasets.curated("pexels/time-lapse-video-of-night-sky-857195.mp4"),
            "-vcodec",
            "copy",
            "-an",
            "-bsf:v",
            "h264_mp4toannexb",
            h264_path,
        ]
    )


fh = open(h264_path, "rb")

codec = av.CodecContext.create("h264", "r")

while True:

    chunk = fh.read(1 << 16)

    packets = codec.parse(chunk)
    print("Parsed {} packets from {} bytes:".format(len(packets), len(chunk)))

    for packet in packets:

        print("   ", packet)

        frames = codec.decode(packet)
        for frame in frames:
            print("       ", frame)

    # We wait until the end to bail so that the last empty `buf` flushes
    # the parser.
    if not chunk:
        break


all_im_objects = []
duration = 4
fps = 24
all_img = sorted(glob.glob("/home/jack/Downloads/00de3/PicFinder.AI-Unleash_Your_Creativity_with_AI-Generated_Images_files/*.jpg"))
imgs = all_img[:duration*fps]
print(len(imgs))
for sequ_num in range(0,len(imgs)):
    im = Image.open(imgs[sequ_num])
    all_im_objects.append(im)
print(len(all_im_objects))

#https://pyav.org/docs/stable/

#https://pyav.org/docs/stable/
import av
import numpy as np
duration = 4
fps = 24
total_frames = duration * fps
container = av.open("test.mp4", mode="w")
stream = container.add_stream("mpeg4", rate=fps)
stream.width = 480
stream.height = 320
stream.pix_fmt = "yuv420p"

for frame_i in range(total_frames):

    img = np.empty((480, 320, 3))
    img[:, :, 0] = 0.5 + 0.5 * np.sin(2 * np.pi * (0 / 3 + frame_i / total_frames))
    img[:, :, 1] = 0.5 + 0.5 * np.sin(2 * np.pi * (1 / 3 + frame_i / total_frames))
    img[:, :, 2] = 0.5 + 0.5 * np.sin(2 * np.pi * (2 / 3 + frame_i / total_frames))

    img = np.round(255 * img).astype(np.uint8)
    img = np.clip(img, 0, 255)

    frame = av.VideoFrame.from_ndarray(img, format="rgb24")
    for packet in stream.encode(frame):
        container.mux(packet)

# Flush stream
for packet in stream.encode():
    container.mux(packet)

# Close the file
container.close()


from PIL import Image
import numpy as np

import av
import av.datasets
#vid = "pexels/time-lapse-video-of-sunset-by-the-sea-854400.mp4"
vid ="/home/jack/Desktop/HDD500/complete-videos/ArchivedImages.mp4"
container = av.open(
    av.datasets.curated(vid)
)
container.streams.video[0].thread_type = "AUTO"  # Go faster!

columns = []
for frame in container.decode(video=0):

    print(frame)
    array = frame.to_ndarray(format="rgb24")

    # Collapse down to a column.
    column = array.mean(axis=1)

    # Convert to bytes, as the `mean` turned our array into floats.
    column = column.clip(0, 255).astype("uint8")

    # Get us in the right shape for the `hstack` below.
    column = column.reshape(-1, 1, 3)

    columns.append(column)

# Close the file, free memory
container.close()

full_array = np.hstack(columns)
full_img = Image.fromarray(full_array, "RGB")
full_img = full_img.resize((800, 200))
full_img.save("barcode2.jpg", quality=85)


import av
import av.datasets


content = av.datasets.curated("pexels/time-lapse-video-of-night-sky-857195.mp4")
with av.open(content) as container:
    # Signal that we only want to look at keyframes.
    stream = container.streams.video[0]
    stream.codec_context.skip_frame = "NONKEY"

    for frame in container.decode(stream):

        print(frame)

        # We use `frame.pts` as `frame.index` won't make must sense with the `skip_frame`.
        frame.to_image().save(
            "night-sky.{:04d}.jpg".format(frame.pts),
            quality=80,
        )

import av
import av.datasets
input_ = av.open(av.datasets.curated("pexels/time-lapse-video-of-night-sky-857195.mp4"))
#input_ = av.open("/home/jack/Desktop/dockercommands/c0M0J040g0B070q0.mp4","r")
output = av.open("remuxed01.mkv", "w")

# Make an output stream using the input as a template. This copies the stream
# setup from one to the other.
in_stream = input_.streams.video[0]
out_stream = output.add_stream(template=in_stream)

for packet in input_.demux(in_stream):

    print(packet)

    # We need to skip the "flushing" packets that `demux` generates.
    if packet.dts is None:
        continue

    # We need to assign the packet to the new stream.
    packet.stream = out_stream

    output.mux(packet)

input_.close()
output.close()

import os
import subprocess
import av
import av.datasets

# We want an H.264 stream in the Annex B byte-stream format.
# We haven't exposed bitstream filters yet, so we're gonna use the `ffmpeg` CLI.
h264_path = "night-sky.h264"
if not os.path.exists(h264_path):
    subprocess.check_call(
        [
            "ffmpeg",
            "-i",
            av.datasets.curated("pexels/time-lapse-video-of-night-sky-857195.mp4"),
            "-vcodec",
            "copy",
            "-an",
            "-bsf:v",
            "h264_mp4toannexb",
            h264_path,
        ]
    )


fh = open(h264_path, "rb")

codec = av.CodecContext.create("h264", "r")

while True:

    chunk = fh.read(1 << 16)

    packets = codec.parse(chunk)
    print("Parsed {} packets from {} bytes:".format(len(packets), len(chunk)))

    for packet in packets:

        print("   ", packet)

        frames = codec.decode(packet)
        for frame in frames:
            print("       ", frame)

    # We wait until the end to bail so that the last empty `buf` flushes
    # the parser.
    if not chunk:
        break


#To edit videos using Python, you can use libraries such as OpenCV or moviepy. 

#https://pyav.org/docs/stable/
#use functions such as `cv2.VideoCapture` to open a video file and `cv2.VideoWriter` to write the edited video to a file. 

from moviepy.editor import VideoFileClip

def crop_video(input_file, output_file):
    clip = VideoFileClip(input_file)
    cropped_clip = clip.crop(x1=0, y1=0, x2=clip.w/2, y2=clip.h/2)
    cropped_clip.write_videofile(output_file)

input_file = "/home/jack/Desktop/HDD500/complete-videos/15out.mp4"
output_file = "output.mp4"
crop_video(input_file, output_file)






av.open(format='avfoundation', file='0') 
 av.open(file, mode='r', **kwargs)

    Main entrypoint to opening files/streams.

    Parameters

            file (str) – The file to open, which can be either a string or a file-like object.

            mode (str) – "r" for reading and "w" for writing.

            format (str) – Specific format to use. Defaults to autodect.

            options (dict) – Options to pass to the container and all streams.

            container_options (dict) – Options to pass to the container.

            stream_options (list) – Options to pass to each stream.

            metadata_encoding (str) – Encoding to use when reading or writing file metadata. Defaults to "utf-8".

            metadata_errors (str) – Specifies how to handle encoding errors; behaves like str.encode parameter. Defaults to "strict".

            buffer_size (int) – Size of buffer for Python input/output operations in bytes. Honored only when file is a file-like object. Defaults to 32768 (32k).

            timeout (float or tuple) – How many seconds to wait for data before giving up, as a float, or a (open timeout, read timeout) tuple.

    For devices (via libavdevice), pass the name of the device to format, e.g.:

# Open webcam on OS X.

av.open(format='avfoundation', file='0') 


%%writefile genfilename.py
import string
import random
def genfilename(ext = ".png"):
    ran = []
    chars = string.printable
    for car in chars:
        ran.append(car)
    for x in range(0,20):
        nm = random.choice(ran[10:52])+str(x)
        nm = nm + random.choice(ran[10:52])+str(x)
        nm = nm + random.choice(ran[10:52])+str(x)
        nm = nm + random.choice(ran[:52])+str(x)
        nm = nm + random.choice(ran[:52])+str(x)
        nm = nm + random.choice(ran[:52])+str(x)
        nm = nm + random.choice(ran[:52])+str(x)
        nm = nm + random.choice(ran[10:52])+str(x)+ext
        return nm
    
print (genfilename(".txt"))  

from diffusers import StableDiffusionPipeline
import torch
model_id = "prompthero/openjourney"
pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
pipe = pipe.to("cuda")
prompt = "retro serie of different cars with different colors and shapes, mdjrny-v4 style"
image = pipe(prompt).images[0]
image.save("./retro_cars.png")

https://huggingface.co/prompthero/openjourney?text=mdjrny-v4+style+A+highly+detailed+beautiful+gypsy+princess+with+an+art+nouveau+background+style+of+Alphonse+Mucha

from imp import reload

import matplotlib
reload(matplotlib)

matplotlib.use('nbagg')

import matplotlib.backends.backend_nbagg
reload(matplotlib.backends.backend_nbagg)

import matplotlib.backends.backend_webagg_core
reload(matplotlib.backends.backend_webagg_core)

import matplotlib.pyplot as plt
plt.interactive(False)

fig1 = plt.figure()
plt.plot(range(10))

plt.show()

plt.plot([3, 2, 1])
plt.show()

print(matplotlib.backends.backend_nbagg.connection_info())

plt.close(fig1)
plt.close('all')

plt.plot(range(10))

print(matplotlib.backends.backend_nbagg.connection_info())

plt.show()
plt.figure()
plt.plot(range(5))
plt.show()

plt.interactive(True)
plt.figure()
plt.plot([3, 2, 1])

plt.plot(range(3))

print(matplotlib.backends.backend_nbagg.connection_info())

plt.interactive(False)

plt.gcf().canvas.manager.reshow()

fig = plt.figure()
plt.axes()
plt.show()

plt.plot([1, 2, 3])
plt.show()

from matplotlib.backends.backend_nbagg import new_figure_manager,show

manager = new_figure_manager(1000)
fig = manager.canvas.figure
ax = fig.add_subplot(1,1,1)
ax.plot([1,2,3])
fig.show()

import matplotlib.animation as animation
import numpy as np

fig, ax = plt.subplots()

x = np.arange(0, 2*np.pi, 0.01)        # x-array
line, = ax.plot(x, np.sin(x))

def animate(i):
    line.set_ydata(np.sin(x+i/10.0))  # update the data
    return line,

#Init only required for blitting to give a clean slate.
def init():
    line.set_ydata(np.ma.array(x, mask=True))
    return line,

ani = animation.FuncAnimation(fig, animate, np.arange(1, 200), init_func=init,
                              interval=100., blit=True)
plt.show()

import matplotlib
matplotlib.rcParams.update({'figure.facecolor': 'red',
                            'savefig.facecolor': 'yellow'})
plt.figure()
plt.plot([3, 2, 1])

plt.show()

import itertools
fig, ax = plt.subplots()
x = np.linspace(0,10,10000)
y = np.sin(x)
ln, = ax.plot(x,y)
evt = []
colors = iter(itertools.cycle(['r', 'g', 'b', 'k', 'c']))
def on_event(event):
    if event.name.startswith('key'):
        fig.suptitle('%s: %s' % (event.name, event.key))
    elif event.name == 'scroll_event':
        fig.suptitle('%s: %s' % (event.name, event.step))
    else:
        fig.suptitle('%s: %s' % (event.name, event.button))
    evt.append(event)
    ln.set_color(next(colors))
    fig.canvas.draw()
    fig.canvas.draw_idle()

fig.canvas.mpl_connect('button_press_event', on_event)
fig.canvas.mpl_connect('button_release_event', on_event)
fig.canvas.mpl_connect('scroll_event', on_event)
fig.canvas.mpl_connect('key_press_event', on_event)
fig.canvas.mpl_connect('key_release_event', on_event)

plt.show()

import time

fig, ax = plt.subplots()
text = ax.text(0.5, 0.5, '', ha='center')

def update(text):
    text.set(text=time.ctime())
    text.axes.figure.canvas.draw()
    
timer = fig.canvas.new_timer(500, [(update, [text], {})])
timer.start()
plt.show()

fig, ax = plt.subplots()
text = ax.text(0.5, 0.5, '', ha='center') 
timer = fig.canvas.new_timer(500, [(update, [text], {})])

timer.single_shot = True
timer.start()

plt.show()

fig, ax = plt.subplots()
text = ax.text(0.5, 0.5, '', ha='center')
timer = fig.canvas.new_timer(500, [(update, [text], {})])

timer.start()
timer.stop()

plt.show()

fig, ax = plt.subplots()
text = ax.text(0.5, 0.5, '', ha='center')
timer = fig.canvas.new_timer(500, [(update, [text], {})])

timer.single_shot = True
timer.start()
timer.stop()

plt.show()

fig, ax = plt.subplots()
ax.plot(range(5))
plt.show()

fig.canvas.manager.reshow()

import itertools

cnt = itertools.count()
bg = None

def onclick_handle(event):
    """Should draw elevating green line on each mouse click"""
    global bg
    if bg is None:
        bg = ax.figure.canvas.copy_from_bbox(ax.bbox) 
    ax.figure.canvas.restore_region(bg)

    cur_y = (next(cnt) % 10) * 0.1
    ln.set_ydata([cur_y, cur_y])
    ax.draw_artist(ln)
    ax.figure.canvas.blit(ax.bbox)

fig, ax = plt.subplots()
ax.plot([0, 1], [0, 1], 'r')
ln, = ax.plot([0, 1], [0, 0], 'g', animated=True)
plt.show()
ax.figure.canvas.draw()

ax.figure.canvas.mpl_connect('button_press_event', onclick_handle)



from imp import reload

import matplotlib
reload(matplotlib)

matplotlib.use('nbagg')

import matplotlib.backends.backend_nbagg
reload(matplotlib.backends.backend_nbagg)

import matplotlib.backends.backend_webagg_core
reload(matplotlib.backends.backend_webagg_core)

import matplotlib.pyplot as plt
plt.interactive(False)

fig1 = plt.figure()
plt.plot(range(10))

plt.show()

plt.plot([3, 2, 1])
plt.show()

print(matplotlib.backends.backend_nbagg.connection_info())

plt.close(fig1)

plt.plot(range(10))

print(matplotlib.backends.backend_nbagg.connection_info())

plt.show()
plt.figure()
plt.plot(range(5))
plt.show()

plt.interactive(True)
plt.figure()
plt.plot([3, 2, 1])

plt.plot(range(3))

print(matplotlib.backends.backend_nbagg.connection_info())

plt.interactive(False)

plt.gcf().canvas.manager.reshow()

fig = plt.figure()
plt.axes()
plt.show()

plt.plot([1, 2, 3])
plt.show()

from matplotlib.backends.backend_nbagg import new_figure_manager,show

manager = new_figure_manager(1000)
fig = manager.canvas.figure
ax = fig.add_subplot(1,1,1)
ax.plot([1,2,3])
fig.show()

import matplotlib.animation as animation
import numpy as np

fig, ax = plt.subplots()

x = np.arange(0, 2*np.pi, 0.01)        # x-array
line, = ax.plot(x, np.sin(x))

def animate(i):
    line.set_ydata(np.sin(x+i/10.0))  # update the data
    return line,

#Init only required for blitting to give a clean slate.
def init():
    line.set_ydata(np.ma.array(x, mask=True))
    return line,

ani = animation.FuncAnimation(fig, animate, np.arange(1, 200), init_func=init,
                              interval=32., blit=True)
plt.show()

import matplotlib
matplotlib.rcParams.update({'figure.facecolor': 'red',
                            'savefig.facecolor': 'yellow'})
plt.figure()
plt.plot([3, 2, 1])

plt.show()

import itertools
fig, ax = plt.subplots()
x = np.linspace(0,10,10000)
y = np.sin(x)
ln, = ax.plot(x,y)
evt = []
colors = iter(itertools.cycle(['r', 'g', 'b', 'k', 'c']))
def on_event(event):
    if event.name.startswith('key'):
        fig.suptitle('%s: %s' % (event.name, event.key))
    elif event.name == 'scroll_event':
        fig.suptitle('%s: %s' % (event.name, event.step))
    else:
        fig.suptitle('%s: %s' % (event.name, event.button))
    evt.append(event)
    ln.set_color(next(colors))
    fig.canvas.draw()
    fig.canvas.draw_idle()

fig.canvas.mpl_connect('button_press_event', on_event)
fig.canvas.mpl_connect('button_release_event', on_event)
fig.canvas.mpl_connect('scroll_event', on_event)
fig.canvas.mpl_connect('key_press_event', on_event)
fig.canvas.mpl_connect('key_release_event', on_event)

plt.show()

import time

fig, ax = plt.subplots()
text = ax.text(0.5, 0.5, '', ha='center')

def update(text):
    text.set(text=time.ctime())
    text.axes.figure.canvas.draw()
    
timer = fig.canvas.new_timer(500, [(update, [text], {})])
timer.start()
plt.show()

fig, ax = plt.subplots()
text = ax.text(0.5, 0.5, '', ha='center') 
timer = fig.canvas.new_timer(500, [(update, [text], {})])

timer.single_shot = True
timer.start()

plt.show()

fig, ax = plt.subplots()
text = ax.text(0.5, 0.5, '', ha='center')
timer = fig.canvas.new_timer(500, [(update, [text], {})])

timer.start()
timer.stop()

plt.show()

fig, ax = plt.subplots()
text = ax.text(0.5, 0.5, '', ha='center')
timer = fig.canvas.new_timer(500, [(update, [text], {})])

timer.single_shot = True
timer.start()
timer.stop()

plt.show()

fig, ax = plt.subplots()
ax.plot(range(5))
plt.show()

fig.canvas.manager.reshow()



from imp import reload

import matplotlib
reload(matplotlib)

matplotlib.use('nbagg')

import matplotlib.backends.backend_nbagg
reload(matplotlib.backends.backend_nbagg)

import matplotlib.backends.backend_webagg_core
reload(matplotlib.backends.backend_webagg_core)

import matplotlib.pyplot as plt
plt.interactive(False)

fig1 = plt.figure()
plt.plot(range(10))

plt.show()

plt.plot([3, 2, 1])
plt.show()

print(matplotlib.backends.backend_nbagg.connection_info())

plt.close(fig1)
plt.close('all')

plt.plot(range(10))

print(matplotlib.backends.backend_nbagg.connection_info())

plt.show()
plt.figure()
plt.plot(range(5))
plt.show()

plt.interactive(True)
plt.figure()
plt.plot([3, 2, 1])

plt.plot(range(3))

print(matplotlib.backends.backend_nbagg.connection_info())

plt.interactive(False)

plt.gcf().canvas.manager.reshow()

fig = plt.figure()
plt.axes()
plt.show()

plt.plot([1, 2, 3])
plt.show()

from matplotlib.backends.backend_nbagg import new_figure_manager,show

manager = new_figure_manager(1000)
fig = manager.canvas.figure
ax = fig.add_subplot(1,1,1)
ax.plot([1,2,3])
fig.show()

import matplotlib.animation as animation
import numpy as np

fig, ax = plt.subplots()

x = np.arange(0, 2*np.pi, 0.01)        # x-array
line, = ax.plot(x, np.sin(x))

def animate(i):
    line.set_ydata(np.sin(x+i/10.0))  # update the data
    return line,

#Init only required for blitting to give a clean slate.
def init():
    line.set_ydata(np.ma.array(x, mask=True))
    return line,

ani = animation.FuncAnimation(fig, animate, np.arange(1, 200), init_func=init,
                              interval=100., blit=True)
plt.show()

import matplotlib
matplotlib.rcParams.update({'figure.facecolor': 'red',
                            'savefig.facecolor': 'yellow'})
plt.figure()
plt.plot([3, 2, 1])

plt.show()

import itertools
fig, ax = plt.subplots()
x = np.linspace(0,10,10000)
y = np.sin(x)
ln, = ax.plot(x,y)
evt = []
colors = iter(itertools.cycle(['r', 'g', 'b', 'k', 'c']))
def on_event(event):
    if event.name.startswith('key'):
        fig.suptitle('%s: %s' % (event.name, event.key))
    elif event.name == 'scroll_event':
        fig.suptitle('%s: %s' % (event.name, event.step))
    else:
        fig.suptitle('%s: %s' % (event.name, event.button))
    evt.append(event)
    ln.set_color(next(colors))
    fig.canvas.draw()
    fig.canvas.draw_idle()

fig.canvas.mpl_connect('button_press_event', on_event)
fig.canvas.mpl_connect('button_release_event', on_event)
fig.canvas.mpl_connect('scroll_event', on_event)
fig.canvas.mpl_connect('key_press_event', on_event)
fig.canvas.mpl_connect('key_release_event', on_event)

plt.show()

import time

fig, ax = plt.subplots()
text = ax.text(0.5, 0.5, '', ha='center')

def update(text):
    text.set(text=time.ctime())
    text.axes.figure.canvas.draw()
    
timer = fig.canvas.new_timer(500, [(update, [text], {})])
timer.start()
plt.show()

fig, ax = plt.subplots()
text = ax.text(0.5, 0.5, '', ha='center') 
timer = fig.canvas.new_timer(500, [(update, [text], {})])

timer.single_shot = True
timer.start()

plt.show()

fig, ax = plt.subplots()
text = ax.text(0.5, 0.5, '', ha='center')
timer = fig.canvas.new_timer(500, [(update, [text], {})])

timer.start()
timer.stop()

plt.show()

fig, ax = plt.subplots()
text = ax.text(0.5, 0.5, '', ha='center')
timer = fig.canvas.new_timer(500, [(update, [text], {})])

timer.single_shot = True
timer.start()
timer.stop()

plt.show()

fig, ax = plt.subplots()
ax.plot(range(5))
plt.show()

fig.canvas.manager.reshow()

import itertools

cnt = itertools.count()
bg = None

def onclick_handle(event):
    """Should draw elevating green line on each mouse click"""
    global bg
    if bg is None:
        bg = ax.figure.canvas.copy_from_bbox(ax.bbox) 
    ax.figure.canvas.restore_region(bg)

    cur_y = (next(cnt) % 10) * 0.1
    ln.set_ydata([cur_y, cur_y])
    ax.draw_artist(ln)
    ax.figure.canvas.blit(ax.bbox)

fig, ax = plt.subplots()
ax.plot([0, 1], [0, 1], 'r')
ln, = ax.plot([0, 1], [0, 0], 'g', animated=True)
plt.show()
ax.figure.canvas.draw()

ax.figure.canvas.mpl_connect('button_press_event', onclick_handle)



import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
import Image

# Make sure that caffe is on the python path:
caffe_root = '../'  # this file is expected to be in {caffe_root}/examples
import sys
sys.path.insert(0, caffe_root + 'python')

import caffe

# configure plotting
plt.rcParams['figure.figsize'] = (10, 10)
plt.rcParams['image.interpolation'] = 'nearest'
plt.rcParams['image.cmap'] = 'gray'

# Load the net, list its data and params, and filter an example image.
caffe.set_mode_cpu()
net = caffe.Net('net_surgery/conv.prototxt', caffe.TEST)
print("blobs {}\nparams {}".format(net.blobs.keys(), net.params.keys()))

# load image and prepare as a single input batch for Caffe
im = np.array(Image.open('images/cat_gray.jpg'))
plt.title("original image")
plt.imshow(im)
plt.axis('off')

im_input = im[np.newaxis, np.newaxis, :, :]
net.blobs['data'].reshape(*im_input.shape)
net.blobs['data'].data[...] = im_input

# helper show filter outputs
def show_filters(net):
    net.forward()
    plt.figure()
    filt_min, filt_max = net.blobs['conv'].data.min(), net.blobs['conv'].data.max()
    for i in range(3):
        plt.subplot(1,4,i+2)
        plt.title("filter #{} output".format(i))
        plt.imshow(net.blobs['conv'].data[0, i], vmin=filt_min, vmax=filt_max)
        plt.tight_layout()
        plt.axis('off')

# filter the image with initial 
show_filters(net)

# pick first filter output
conv0 = net.blobs['conv'].data[0, 0]
print("pre-surgery output mean {:.2f}".format(conv0.mean()))
# set first filter bias to 10
net.params['conv'][1].data[0] = 1.
net.forward()
print("post-surgery output mean {:.2f}".format(conv0.mean()))

ksize = net.params['conv'][0].data.shape[2:]
# make Gaussian blur
sigma = 1.
y, x = np.mgrid[-ksize[0]//2 + 1:ksize[0]//2 + 1, -ksize[1]//2 + 1:ksize[1]//2 + 1]
g = np.exp(-((x**2 + y**2)/(2.0*sigma**2)))
gaussian = (g / g.sum()).astype(np.float32)
net.params['conv'][0].data[0] = gaussian
# make Sobel operator for edge detection
net.params['conv'][0].data[1:] = 0.
sobel = np.array((-1, -2, -1, 0, 0, 0, 1, 2, 1), dtype=np.float32).reshape((3,3))
net.params['conv'][0].data[1, 0, 1:-1, 1:-1] = sobel  # horizontal
net.params['conv'][0].data[2, 0, 1:-1, 1:-1] = sobel.T  # vertical
show_filters(net)

!diff net_surgery/bvlc_caffenet_full_conv.prototxt ../models/bvlc_reference_caffenet/deploy.prototxt

# Make sure that caffe is on the python path:
caffe_root = '../'  # this file is expected to be in {caffe_root}/examples
import sys
sys.path.insert(0, caffe_root + 'python')

import caffe

# Load the original network and extract the fully connected layers' parameters.
net = caffe.Net('../models/bvlc_reference_caffenet/deploy.prototxt', 
                '../models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel', 
                caffe.TEST)
params = ['fc6', 'fc7', 'fc8']
# fc_params = {name: (weights, biases)}
fc_params = {pr: (net.params[pr][0].data, net.params[pr][1].data) for pr in params}

for fc in params:
    print '{} weights are {} dimensional and biases are {} dimensional'.format(fc, fc_params[fc][0].shape, fc_params[fc][1].shape)

# Load the fully convolutional network to transplant the parameters.
net_full_conv = caffe.Net('net_surgery/bvlc_caffenet_full_conv.prototxt', 
                          '../models/bvlc_reference_caffenet/bvlc_reference_caffenet.caffemodel',
                          caffe.TEST)
params_full_conv = ['fc6-conv', 'fc7-conv', 'fc8-conv']
# conv_params = {name: (weights, biases)}
conv_params = {pr: (net_full_conv.params[pr][0].data, net_full_conv.params[pr][1].data) for pr in params_full_conv}

for conv in params_full_conv:
    print '{} weights are {} dimensional and biases are {} dimensional'.format(conv, conv_params[conv][0].shape, conv_params[conv][1].shape)

for pr, pr_conv in zip(params, params_full_conv):
    conv_params[pr_conv][0].flat = fc_params[pr][0].flat  # flat unrolls the arrays
    conv_params[pr_conv][1][...] = fc_params[pr][1]

net_full_conv.save('net_surgery/bvlc_caffenet_full_conv.caffemodel')

import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

# load input and configure preprocessing
im = caffe.io.load_image('images/cat.jpg')
transformer = caffe.io.Transformer({'data': net_full_conv.blobs['data'].data.shape})
transformer.set_mean('data', np.load('../python/caffe/imagenet/ilsvrc_2012_mean.npy').mean(1).mean(1))
transformer.set_transpose('data', (2,0,1))
transformer.set_channel_swap('data', (2,1,0))
transformer.set_raw_scale('data', 255.0)
# make classification map by forward and print prediction indices at each location
out = net_full_conv.forward_all(data=np.asarray([transformer.preprocess('data', im)]))
print out['prob'][0].argmax(axis=0)
# show net input and confidence map (probability of the top prediction at each location)
plt.subplot(1, 2, 1)
plt.imshow(transformer.deprocess('data', net_full_conv.blobs['data'].data[0]))
plt.subplot(1, 2, 2)
plt.imshow(out['prob'][0,281])

%%javascript
Jupyter.notebook.session.restart({kernel_name: 'cloned-base'}) 

!locate kernel.json



from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

!wget -O mouse-sizing-n-cropping-files/postoid.jpg https://jacknorthrup.com/postoids/postoid%20%2810%29.jpg

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/postoid.jpg')
im.size # (width,height) tuple

import PIL
from PIL import Image

basewidth = 400
img = Image.open("mouse-sizing-n-cropping-files/postoid.jpg")
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/postoid400.jpg")
img

http://stackoverflow.com/questions/6136588/image-cropping-using-python
http://2017.compciv.org/guide/topics/python-nonstandard-libraries/pillow.html

!wget -O mouse-sizing-n-cropping-files/soil.jpg https://static.pexels.com/photos/60013/desert-drought-dehydrated-clay-soil-60013.jpeg

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil.jpg')
im.size # (width,height) tuple

import PIL
from PIL import Image

basewidth = 600
img = Image.open("mouse-sizing-n-cropping-files/soil.jpg")
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/soil600.jpg")

from PIL import Image
im=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
im.size # (width,height) tuple

from PIL import Image
im=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
im # (display image)

def add_cursor(fig, ax):
    plt.close(fig)

    vline = ax.axvline(1, color='k')
    hline = ax.axhline(0.5, color='k')

    def set_cursor(x, y):
        vline.set_xdata((x, x))
        hline.set_ydata((y, y))
        display(fig)

    interact(set_cursor, x=ax.get_xlim(), y=ax.get_ylim())

#import ipympl
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline 
x = (sin(6))
plt.plot([0, 1, 2, x, 5, 8,0,-4, -2, -6])
plt.show()


import matplotlib.pyplot as plt
%matplotlib inline 
plt.rcParams['figure.figsize'] = (20.0, 10.0)
import matplotlib.image as mpimg
import numpy as np
img=mpimg.imread('mouse-sizing-n-cropping-files/soil600.jpg')
imgplot = plt.imshow(img)


from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (145, 50, img.width - 40, img.height - 135)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/soil-cropped.png')   

img=mpimg.imread('mouse-sizing-n-cropping-files/soil-cropped.png')
imgplot = plt.imshow(img)

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im.size # (width,height) tuple

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im

http://mpld3.github.io/

class ImageFile(object):
    """Class for storing an image location."""
    def __init__(self, fpath):
        self.fpath = fpath
    def _repr_png_(self):
        return open(self.fpath, 'r').read()
ImageFile('mouse-sizing-n-cropping-files/soil600.jpg')

from IPython.display import Image
image = Image('mouse-sizing-n-cropping-files/soil600.jpg')
image


class ImageFile(object):
    """Class for storing an image location."""

    def __init__(self, fpath):
        self.fpath = fpath
        self.format = fpath.split('.')[-1]

    def _repr_png_(self):
        if self.format == 'png':
            return open(self.fpath, 'r').read()

    def _repr_jpeg_(self):
        if self.format == 'jpeg' or self.format == 'jpg':
            return open(self.fpath, 'r').read()

    def _repr_svg_(self):
        if self.format == 'svg':
            return open(self.fpath, 'r').read()



import matplotlib
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
%matplotlib inline

im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
plt.imshow(im)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
%matplotlib inline  
from mpld3 import plugins
from PIL import Image
img=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
 

fig, ax = plt.subplots()
im = ax.imshow(img, extent=(10, 20, 10, 20),
               origin='lower', zorder=1, interpolation='nearest')

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()
from PIL import Image


im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))



import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

!sudo locate manilyn.jpg

from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (200, 0, img.width - 150, img.height - 0)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/cropsoil600.jpg')   

import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/cropsoil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

im = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
im

#Python 2.7 - Linux
from PIL import Image
# open an image file (.jpg or.png)
im1 = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
# multiply each pixel by a variable - less than 1 is darker greater than 1 is lighter
# works best with .jpg and .png images
im2 = im1.point(lambda p: p * 1.8) # lighter
im3 = im1.point(lambda p: p * .5)  # Darker

# This pops up your defaultimage viewer
im1.show()
im2.show()
im3.show()
# save modified image 
im2.save("mouse-sizing-n-cropping-files/soil-light.jpg")
im3.save("mouse-sizing-n-cropping-files/soil-dark.jpg")


import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))


mpld3.display()

import numpy as np
import cv2
from matplotlib import pyplot as plt

img = cv2.imread('mouse-sizing-n-cropping-files/soil600.jpg')
mask = np.zeros(img.shape[:2],np.uint8)

bgdModel = np.zeros((1,65),np.float64)
fgdModel = np.zeros((1,65),np.float64)

rect = (425,107,686,454)
cv2.grabCut(img,mask,rect,bgdModel,fgdModel,5,cv2.GC_INIT_WITH_RECT)
mask2 = np.where((mask==2)|(mask==0),0,1).astype('uint8')
img = img*mask2[:,:,np.newaxis]

plt.imshow(img)
plt.colorbar()
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
#%matplotlib inline  
from mpld3 import plugins
from PIL import Image
fig, ax = plt.subplots()

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()

!wget -O mouse-sizing-n-cropping-files/jungle.jpg https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg/800px-Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg

import PIL
from PIL import Image
im1 = Image.open("mouse-sizing-n-cropping-files/jungle.jpg")
#longer_side = max(im1.size)
basewidth = 700
hsize = 500
img = im1.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/jungle700.jpg")
im = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
im

import Tkinter
from PIL import Image, ImageTk
from sys import argv

window = Tkinter.Tk(className="bla")

image = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
canvas = Tkinter.Canvas(window, width=image.size[0], height=image.size[1])
canvas.pack()
image_tk = ImageTk.PhotoImage(image)
canvas.create_image(image.size[0]//2, image.size[1]//2, image=image_tk)

def callback(event):
    #print "[",event.x,"],["+event.y,"]"
    print "[",event.x,",",event.y,"],",
 
canvas.bind("<Button-1>", callback)
Tkinter.mainloop()

poly = np.array([ [ 320 , 123 ], [ 437 , 121 ], [ 451 , 267 ], [ 356 , 277 ],[ 321 , 125 ] ], np.int32)
print poly

import cv2
import numpy as np 

import cv2
import numpy as np 

# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")

src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)

src_mask = np.zeros(src.shape, src.dtype)

poly = np.array([ [ 269 , 24 ], [ 273 , 117 ], [ 301 , 145 ], [ 345 , 199 ], 
[ 398 , 273 ], [ 428 , 317 ], [ 447 , 278 ], [ 440 , 231 ], [ 487 , 220 ], [ 491 , 202 ],
[ 437 , 209 ], [ 415 , 162 ], [ 433 , 126 ], [ 410 , 113 ], [ 360 , 115 ], [ 363 , 73 ], [ 317 , 25 ] ], np.int32)



cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (550,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("mouse-sizing-n-cropping-files/soil-jungle.jpg", output);


import cv2
import numpy as np 

# Read images
#dst = cv2.imread("01-ajungle2.jpg")
#dst = cv2.imread("/notebooks/edge-preserving-normalized-convolution-filter.jpg")
#src = cv2.imread("/notebooks/learnopencv/SeamlessCloning/images/airplane.jpg")
#src = cv2.imread("desert-drought.jpg")
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
#src = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
#dst = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
# Create a rough mask around the airplane.
src_mask = np.zeros(src.shape, src.dtype)
#poly = np.array([ [4,80], [30,54], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
poly = np.array([ [ 320 , 123 ], [ 437 , 121 ], [ 451 , 267 ], [ 356 , 277 ],[ 321 , 125 ] ], np.int32)
#poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
#poly = np.array([ [736, 113],[768, 97],[784, 93],[788, 157],[789, 197],[788, 225],[777, 265],[768, 301],[778, 318],\
#[794, 332],[767, 386],[743, 348],[707, 314],[693, 304],[666, 299],[668, 275],[705, 273],[729, 272],\
#[716, 223],[706, 236],[689, 207],[687, 217],[687, 231],[667, 217],[647, 226],[629, 208],[614, 207],\
#[615, 198],[602, 183],[607, 174],[609, 159],[636, 162],[640, 146],[634, 137],[597, 153],[594, 137],\
#[601, 122],[583, 115],[611, 83],[626, 78],[622, 72],[589, 73],[583, 51],[591, 13],[605, 10],[631, 28],\
#[650, 17],[666, 39],[681, 18],[699, 4],[728, 6],[751, 7],[743, 39],[794, 13],[797, 42],[764, 66],\
#[735, 101],[736, 113] ], np.int32)




cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (250,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("01-cloning-example3.jpg", output);


im = Image.open("01-cloning-example3.jpg")
im

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()
from mpld3 import plugins

fig, ax = plt.subplots(subplot_kw=dict(axisbg='#EEEEEE'))
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot (with tooltips!)", size=20)

labels = ['point {0}'.format(i + 1) for i in range(N)]
fig.plugins = [plugins.PointLabelTooltip(scatter, labels)]

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()




fig, ax = plt.subplots(subplot_kw=dict(axisbg='#EEEEEE'))
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot", size=18);

import matplotlib
import numpy as np
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline  

x = np.linspace(0, 3*np.pi, 500)
plt.plot(x, np.sin(x**2))
plt.title('A simple chirp')
plt.show()



from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

!wget -O mouse-sizing-n-cropping-files/postoid.jpg https://jacknorthrup.com/postoids/postoid%20%2810%29.jpg

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/postoid.jpg')
im.size # (width,height) tuple

import PIL
from PIL import Image

basewidth = 400
img = Image.open("mouse-sizing-n-cropping-files/postoid.jpg")
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/postoid400.jpg")
img

http://stackoverflow.com/questions/6136588/image-cropping-using-python
http://2017.compciv.org/guide/topics/python-nonstandard-libraries/pillow.html

!wget -O mouse-sizing-n-cropping-files/soil.jpg https://static.pexels.com/photos/60013/desert-drought-dehydrated-clay-soil-60013.jpeg

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil.jpg')
im.size # (width,height) tuple

import PIL
from PIL import Image

basewidth = 600
img = Image.open("mouse-sizing-n-cropping-files/soil.jpg")
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/soil600.jpg")

from PIL import Image
im=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
im.size # (width,height) tuple

from PIL import Image
im=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
im # (display image)

def add_cursor(fig, ax):
    plt.close(fig)

    vline = ax.axvline(1, color='k')
    hline = ax.axhline(0.5, color='k')

    def set_cursor(x, y):
        vline.set_xdata((x, x))
        hline.set_ydata((y, y))
        display(fig)

    interact(set_cursor, x=ax.get_xlim(), y=ax.get_ylim())

#import ipympl
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline 
x = (sin(6))
plt.plot([0, 1, 2, x, 5, 8,0,-4, -2, -6])
plt.show()


import matplotlib.pyplot as plt
%matplotlib inline 
plt.rcParams['figure.figsize'] = (20.0, 10.0)
import matplotlib.image as mpimg
import numpy as np
img=mpimg.imread('mouse-sizing-n-cropping-files/soil600.jpg')
imgplot = plt.imshow(img)


from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (145, 50, img.width - 40, img.height - 135)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/soil-cropped.png')   

img=mpimg.imread('mouse-sizing-n-cropping-files/soil-cropped.png')
imgplot = plt.imshow(img)

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im.size # (width,height) tuple

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im

http://mpld3.github.io/

class ImageFile(object):
    """Class for storing an image location."""
    def __init__(self, fpath):
        self.fpath = fpath
    def _repr_png_(self):
        return open(self.fpath, 'r').read()
ImageFile('mouse-sizing-n-cropping-files/soil600.jpg')

from IPython.display import Image
image = Image('mouse-sizing-n-cropping-files/soil600.jpg')
image


class ImageFile(object):
    """Class for storing an image location."""

    def __init__(self, fpath):
        self.fpath = fpath
        self.format = fpath.split('.')[-1]

    def _repr_png_(self):
        if self.format == 'png':
            return open(self.fpath, 'r').read()

    def _repr_jpeg_(self):
        if self.format == 'jpeg' or self.format == 'jpg':
            return open(self.fpath, 'r').read()

    def _repr_svg_(self):
        if self.format == 'svg':
            return open(self.fpath, 'r').read()



import matplotlib
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
%matplotlib inline

im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
plt.imshow(im)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
%matplotlib inline  
from mpld3 import plugins
from PIL import Image
img=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
 

fig, ax = plt.subplots()
im = ax.imshow(img, extent=(10, 20, 10, 20),
               origin='lower', zorder=1, interpolation='nearest')

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()
from PIL import Image


im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))



import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

!sudo locate manilyn.jpg

from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (200, 0, img.width - 150, img.height - 0)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/cropsoil600.jpg')   

import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/cropsoil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

im = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
im

#Python 2.7 - Linux
from PIL import Image
# open an image file (.jpg or.png)
im1 = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
# multiply each pixel by a variable - less than 1 is darker greater than 1 is lighter
# works best with .jpg and .png images
im2 = im1.point(lambda p: p * 1.8) # lighter
im3 = im1.point(lambda p: p * .5)  # Darker

# This pops up your defaultimage viewer
im1.show()
im2.show()
im3.show()
# save modified image 
im2.save("mouse-sizing-n-cropping-files/soil-light.jpg")
im3.save("mouse-sizing-n-cropping-files/soil-dark.jpg")


import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))


mpld3.display()

import numpy as np
import cv2
from matplotlib import pyplot as plt

img = cv2.imread('mouse-sizing-n-cropping-files/soil600.jpg')
mask = np.zeros(img.shape[:2],np.uint8)

bgdModel = np.zeros((1,65),np.float64)
fgdModel = np.zeros((1,65),np.float64)

rect = (425,107,686,454)
cv2.grabCut(img,mask,rect,bgdModel,fgdModel,5,cv2.GC_INIT_WITH_RECT)
mask2 = np.where((mask==2)|(mask==0),0,1).astype('uint8')
img = img*mask2[:,:,np.newaxis]

plt.imshow(img)
plt.colorbar()
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
#%matplotlib inline  
from mpld3 import plugins
from PIL import Image
fig, ax = plt.subplots()

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()

!wget -O mouse-sizing-n-cropping-files/jungle.jpg https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg/800px-Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg

import PIL
from PIL import Image
im1 = Image.open("mouse-sizing-n-cropping-files/jungle.jpg")
#longer_side = max(im1.size)
basewidth = 700
hsize = 500
img = im1.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/jungle700.jpg")
im = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
im

import Tkinter
from PIL import Image, ImageTk
from sys import argv

window = Tkinter.Tk(className="bla")

image = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
canvas = Tkinter.Canvas(window, width=image.size[0], height=image.size[1])
canvas.pack()
image_tk = ImageTk.PhotoImage(image)
canvas.create_image(image.size[0]//2, image.size[1]//2, image=image_tk)

def callback(event):
    #print "[",event.x,"],["+event.y,"]"
    print "[",event.x,",",event.y,"],",
 
canvas.bind("<Button-1>", callback)
Tkinter.mainloop()

poly = np.array([ [ 320 , 123 ], [ 437 , 121 ], [ 451 , 267 ], [ 356 , 277 ],[ 321 , 125 ] ], np.int32)
print poly

import cv2
import numpy as np 

import cv2
import numpy as np 

# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")

src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)

src_mask = np.zeros(src.shape, src.dtype)

poly = np.array([ [ 269 , 24 ], [ 273 , 117 ], [ 301 , 145 ], [ 345 , 199 ], 
[ 398 , 273 ], [ 428 , 317 ], [ 447 , 278 ], [ 440 , 231 ], [ 487 , 220 ], [ 491 , 202 ],
[ 437 , 209 ], [ 415 , 162 ], [ 433 , 126 ], [ 410 , 113 ], [ 360 , 115 ], [ 363 , 73 ], [ 317 , 25 ] ], np.int32)



cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (550,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("mouse-sizing-n-cropping-files/soil-jungle.jpg", output);


import cv2
import numpy as np 

# Read images
#dst = cv2.imread("01-ajungle2.jpg")
#dst = cv2.imread("/notebooks/edge-preserving-normalized-convolution-filter.jpg")
#src = cv2.imread("/notebooks/learnopencv/SeamlessCloning/images/airplane.jpg")
#src = cv2.imread("desert-drought.jpg")
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
#src = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
#dst = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
# Create a rough mask around the airplane.
src_mask = np.zeros(src.shape, src.dtype)
#poly = np.array([ [4,80], [30,54], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
poly = np.array([ [ 320 , 123 ], [ 437 , 121 ], [ 451 , 267 ], [ 356 , 277 ],[ 321 , 125 ] ], np.int32)
#poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
#poly = np.array([ [736, 113],[768, 97],[784, 93],[788, 157],[789, 197],[788, 225],[777, 265],[768, 301],[778, 318],\
#[794, 332],[767, 386],[743, 348],[707, 314],[693, 304],[666, 299],[668, 275],[705, 273],[729, 272],\
#[716, 223],[706, 236],[689, 207],[687, 217],[687, 231],[667, 217],[647, 226],[629, 208],[614, 207],\
#[615, 198],[602, 183],[607, 174],[609, 159],[636, 162],[640, 146],[634, 137],[597, 153],[594, 137],\
#[601, 122],[583, 115],[611, 83],[626, 78],[622, 72],[589, 73],[583, 51],[591, 13],[605, 10],[631, 28],\
#[650, 17],[666, 39],[681, 18],[699, 4],[728, 6],[751, 7],[743, 39],[794, 13],[797, 42],[764, 66],\
#[735, 101],[736, 113] ], np.int32)




cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (250,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("01-cloning-example3.jpg", output);


im = Image.open("01-cloning-example3.jpg")
im

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()
from mpld3 import plugins

fig, ax = plt.subplots(subplot_kw=dict(axisbg='#EEEEEE'))
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot (with tooltips!)", size=20)

labels = ['point {0}'.format(i + 1) for i in range(N)]
fig.plugins = [plugins.PointLabelTooltip(scatter, labels)]

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()




fig, ax = plt.subplots(subplot_kw=dict(axisbg='#EEEEEE'))
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot", size=18);

import matplotlib
import numpy as np
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline  

x = np.linspace(0, 3*np.pi, 500)
plt.plot(x, np.sin(x**2))
plt.title('A simple chirp')
plt.show()



from PIL import Image, ImageTk
import PIL
from sys import argv
import sys
from tkinter import *
import cv2
import numpy as np 

window = Tk(className="Clickable")
data = []
image = PIL.Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
canvas = Canvas(window, width=image.size[0], height=image.size[1])
canvas.pack()
image_tk = ImageTk.PhotoImage(image)
canvas.create_image(image.size[0]//2, image.size[1]//2, image=image_tk)

def callback(event):
    #print "[",event.x,"],["+event.y,"]"
    #Data= ("[",event.x,",",event.y,"],",)
    Data= [event.x,event.y]
    data.append(Data)
    print ("[",event.x,",",event.y,"],",)

canvas.bind("<Button-1>", callback)
mainloop()

poly = np.array(data, np.int32)

# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)
#poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
cv2.fillPoly(src_mask, [poly], (255, 255, 255))
# This is where the CENTER where thr 'poly' will be placed
center = (250,275)
# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)
# Write result
cv2.imwrite("01-cloning-xxz1.jpg", output);
im = PIL.Image.open("01-cloning-xxz1.jpg")
im



from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

!ls /home/jack/Desktop/TWITTER/JupyterNotebook-Graphics-master/mouse-sizing-n-cropping-files

!cp -a /home/jack/Desktop/TWITTER/JupyterNotebook-Graphics-master/mouse-sizing-n-cropping-files .

!wget -O mouse-sizing-n-croppi!ng-files/postoid.jpg https://jacknorthrup.com/postoids/postoid%20%2810%29.jpg

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/postoid.jpg')
im.size # (width,height) tuple

import PIL
from PIL import Image

basewidth = 400
img = Image.open("mouse-sizing-n-cropping-files/postoid.jpg")
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/postoid400.jpg")
img

http://stackoverflow.com/questions/6136588/image-cropping-using-python
http://2017.compciv.org/guide/topics/python-nonstandard-libraries/pillow.html

!wget -O mouse-sizing-n-cropping-files/soil.jpg https://static.pexels.com/photos/60013/desert-drought-dehydrated-clay-soil-60013.jpeg

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil.jpg')
im.size # (width,height) tuple

import PIL
from PIL import Image

basewidth = 600
img = Image.open("mouse-sizing-n-cropping-files/soil.jpg")
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/soil600.jpg")

from PIL import Image
im=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
im.size # (width,height) tuple

from PIL import Image
im=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
im # (display image)

def add_cursor(fig, ax):
    plt.close(fig)

    vline = ax.axvline(1, color='k')
    hline = ax.axhline(0.5, color='k')

    def set_cursor(x, y):
        vline.set_xdata((x, x))
        hline.set_ydata((y, y))
        display(fig)

    interact(set_cursor, x=ax.get_xlim(), y=ax.get_ylim())

#import ipympl
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline 
x = (sin(6))
plt.plot([0, 1, 2, x, 5, 8,0,-4, -2, -6])
plt.show()


import matplotlib.pyplot as plt
%matplotlib inline 
plt.rcParams['figure.figsize'] = (20.0, 10.0)
import matplotlib.image as mpimg
import numpy as np
img=mpimg.imread('mouse-sizing-n-cropping-files/soil600.jpg')
imgplot = plt.imshow(img)


from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (145, 50, img.width - 40, img.height - 135)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/soil-cropped.png')   

img=mpimg.imread('mouse-sizing-n-cropping-files/soil-cropped.png')
imgplot = plt.imshow(img)

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im.size # (width,height) tuple

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.path as mpath
import matplotlib.patches as mpatches

import mpld3
from mpld3 import plugins, utils


class LinkedDragPlugin(plugins.PluginBase):
    JAVASCRIPT = r"""
    mpld3.register_plugin("drag", DragPlugin);
    DragPlugin.prototype = Object.create(mpld3.Plugin.prototype);
    DragPlugin.prototype.constructor = DragPlugin;
    DragPlugin.prototype.requiredProps = ["idpts", "idline", "idpatch"];
    DragPlugin.prototype.defaultProps = {}
    function DragPlugin(fig, props){
        mpld3.Plugin.call(this, fig, props);
    };

    DragPlugin.prototype.draw = function(){
        var patchobj = mpld3.get_element(this.props.idpatch, this.fig);
        var ptsobj = mpld3.get_element(this.props.idpts, this.fig);
        var lineobj = mpld3.get_element(this.props.idline, this.fig);

        var drag = d3.behavior.drag()
            .origin(function(d) { return {x:ptsobj.ax.x(d[0]),
                                          y:ptsobj.ax.y(d[1])}; })
            .on("dragstart", dragstarted)
            .on("drag", dragged)
            .on("dragend", dragended);

        lineobj.path.attr("d", lineobj.datafunc(ptsobj.offsets));
        patchobj.path.attr("d", patchobj.datafunc(ptsobj.offsets,
                                                  patchobj.pathcodes));
        lineobj.data = ptsobj.offsets;
        patchobj.data = ptsobj.offsets;

        ptsobj.elements()
           .data(ptsobj.offsets)
           .style("cursor", "default")
           .call(drag);

        function dragstarted(d) {
          d3.event.sourceEvent.stopPropagation();
          d3.select(this).classed("dragging", true);
        }

        function dragged(d, i) {
          d[0] = ptsobj.ax.x.invert(d3.event.x);
          d[1] = ptsobj.ax.y.invert(d3.event.y);
          d3.select(this)
            .attr("transform", "translate(" + [d3.event.x,d3.event.y] + ")");
          lineobj.path.attr("d", lineobj.datafunc(ptsobj.offsets));
          patchobj.path.attr("d", patchobj.datafunc(ptsobj.offsets,
                                                    patchobj.pathcodes));
        }

        function dragended(d, i) {
          d3.select(this).classed("dragging", false);
        }
    }

    mpld3.register_plugin("drag", DragPlugin);
    """

    def __init__(self, points, line, patch):
        if isinstance(points, mpl.lines.Line2D):
            suffix = "pts"
        else:
            suffix = None

        self.dict_ = {"type": "drag",
                      "idpts": utils.get_id(points, suffix),
                      "idline": utils.get_id(line),
                      "idpatch": utils.get_id(patch)}


fig, ax = plt.subplots()

Path = mpath.Path
path_data = [
    (Path.MOVETO, (1.58, -2.57)),
    (Path.CURVE4, (0.35, -1.1)),
    (Path.CURVE4, (-1.75, 2.0)),
    (Path.CURVE4, (0.375, 2.0)),
    (Path.LINETO, (0.85, 1.15)),
    (Path.CURVE4, (2.2, 3.2)),
    (Path.CURVE4, (3, 0.05)),
    (Path.CURVE4, (2.0, -0.5)),
    (Path.CLOSEPOLY, (1.58, -2.57)),
    ]
codes, verts = zip(*path_data)
path = mpath.Path(verts, codes)
patch = mpatches.PathPatch(path, facecolor='r', alpha=0.5)
ax.add_patch(patch)

# plot control points and connecting lines
x, y = zip(*path.vertices[:-1])
points = ax.plot(x, y, 'go', ms=10)
line = ax.plot(x, y, '-k')

ax.grid(True, color='gray', alpha=0.5)
ax.axis('equal')
ax.set_title("Drag Points to Change Path", fontsize=18)

plugins.connect(fig, LinkedDragPlugin(points[0], line[0], patch))

mpld3.display()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
from mpld3 import plugins

fig, ax = plt.subplots()

x = np.linspace(-2, 2, 20)
y = x[:, None]
X = np.zeros((20, 20, 4))

X[:, :, 0] = np.exp(- (x - 1) ** 2 - (y) ** 2)
X[:, :, 1] = np.exp(- (x + 0.71) ** 2 - (y - 0.71) ** 2)
X[:, :, 2] = np.exp(- (x + 0.71) ** 2 - (y + 0.71) ** 2)
X[:, :, 3] = np.exp(-0.25 * (x ** 2 + y ** 2))

im = ax.imshow(X, extent=(10, 20, 10, 20),
               origin='lower', zorder=1, interpolation='nearest')
fig.colorbar(im, ax=ax)

ax.set_title('An Image', size=20)

plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()


!ls mouse-sizing-n-cropping-files

class ImageFile(object):
    """Class for storing an image location."""
    def __init__(self, fpath):
        self.fpath = fpath
    def _repr_png_(self):
        return open(self.fpath, 'rb').read()
ImageFile('mouse-sizing-n-cropping-files/soil.jpg')#,encoding= 'unicode_escape')

with open(path, 'rb') as f:
  contents = f.read()

from IPython.display import Image
image = Image('mouse-sizing-n-cropping-files/soil600.jpg')
image


class ImageFile(object):
    """Class for storing an image location."""

    def __init__(self, fpath):
        self.fpath = fpath
        self.format = fpath.split('.')[-1]

    def _repr_png_(self):
        if self.format == 'png':
            return open(self.fpath, 'r').read()

    def _repr_jpeg_(self):
        if self.format == 'jpeg' or self.format == 'jpg':
            return open(self.fpath, 'r').read()

    def _repr_svg_(self):
        if self.format == 'svg':
            return open(self.fpath, 'r').read()



import matplotlib
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
%matplotlib inline

im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
plt.imshow(im)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
%matplotlib inline  
from mpld3 import plugins
from PIL import Image
img=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
 

#fig, ax = plt.subplots()
fig, ax = plt.subplots(figsize=(9.,9.))
im = ax.imshow(img, extent=(10, 20, 10, 20),
               origin='lower', zorder=1, interpolation='nearest')

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()

#im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
#im

import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
#fig, ax = plt.subplots()
fig, ax = plt.subplots(figsize=(9.,9.))
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

!locate manilyn.jpg

from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (200, 0, img.width - 150, img.height - 0)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/cropsoil600.jpg')   

import matplotlib.pyplot as plt
import matplotlib.image as mimage
import matplotlib.cbook as cbook
datafile = cbook.get_sample_data('logo2.png', asfileobj=False)
im = mimage.imread(datafile)
fig, ax = plt.subplots(figsize=(5.,5.))
myaximage = ax.imshow(im,
                      aspect='auto',
                      extent=(20, 80, 20, 80),
                      alpha=0.5)
ax.plot(range(100))
plt.show()

import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
#fig, ax = plt.subplots()
fig, ax = plt.subplots(figsize=(9.,9.))
im = np.array(Image.open('mouse-sizing-n-cropping-files/cropsoil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

im = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
im

#Python 2.7 - Linux
from PIL import Image
# open an image file (.jpg or.png)
im1 = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
# multiply each pixel by a variable - less than 1 is darker greater than 1 is lighter
# works best with .jpg and .png images
im2 = im1.point(lambda p: p * 1.8) # lighter
im3 = im1.point(lambda p: p * .5)  # Darker

# This pops up your defaultimage viewer
#im1.show()
im2.show()
#im3.show()
# save modified image 
im2.save("mouse-sizing-n-cropping-files/soil-light.jpg")
im3.save("mouse-sizing-n-cropping-files/soil-dark.jpg")


import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))


mpld3.display()

import numpy as np
import cv2
from matplotlib import pyplot as plt

img = cv2.imread('mouse-sizing-n-cropping-files/soil600.jpg')
mask = np.zeros(img.shape[:2],np.uint8)

bgdModel = np.zeros((1,65),np.float64)
fgdModel = np.zeros((1,65),np.float64)

rect = (425,107,686,454)
cv2.grabCut(img,mask,rect,bgdModel,fgdModel,5,cv2.GC_INIT_WITH_RECT)
mask2 = np.where((mask==2)|(mask==0),0,1).astype('uint8')
img = img*mask2[:,:,np.newaxis]

plt.imshow(img)
plt.colorbar()
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
#%matplotlib inline  
from mpld3 import plugins
from PIL import Image
fig, ax = plt.subplots()

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()

!wget -O mouse-sizing-n-cropping-files/jungle.jpg https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg/800px-Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg

import PIL
from PIL import Image
im1 = Image.open("mouse-sizing-n-cropping-files/jungle.jpg")
#longer_side = max(im1.size)
basewidth = 700
hsize = 500
img = im1.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/jungle700.jpg")
im = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
im

import tkinter
dir(tkinter)

from PIL import Image, ImageTk
import PIL
from sys import argv
import sys
from tkinter import *
window = Tk(className="Clickable")
data = []
image = PIL.Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
canvas = Canvas(window, width=image.size[0], height=image.size[1])
canvas.pack()
image_tk = ImageTk.PhotoImage(image)
canvas.create_image(image.size[0]//2, image.size[1]//2, image=image_tk)

def callback(event):
    #print "[",event.x,"],["+event.y,"]"
    #Data= ("[",event.x,",",event.y,"],",)
    Data= [event.x,event.y]
    data.append(Data)
    print ("[",event.x,",",event.y,"],",)

canvas.bind("<Button-1>", callback)
mainloop()

poly = np.array(data, np.int32)

import cv2
import numpy as np 
# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)
#poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
cv2.fillPoly(src_mask, [poly], (255, 255, 255))
# This is where the CENTER where thr 'poly' will be placed
center = (250,275)
# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)
# Write result
cv2.imwrite("01-cloning-10.jpg", output);
im = PIL.Image.open("01-cloning-10.jpg")
im

print (data)

poly = np.array(data, np.int32)
print(poly)

poly = np.array([ [ 320 , 123 ], [ 437 , 121 ], [ 451 , 267 ], [ 356 , 277 ],[ 321 , 125 ] ], np.int32)
print(poly)

# This is used in the cell
poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
print (poly)

import cv2
import numpy as np 
# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)
#poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
cv2.fillPoly(src_mask, [poly], (255, 255, 255))
# This is where the CENTER where thr 'poly' will be placed
center = (250,275)
# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)
# Write result
cv2.imwrite("01-cloning-example6.jpg", output);
im = PIL.Image.open("01-cloning-example6.jpg")
im

im = PIL.Image.open("01-cloning-example6.jpg")
im





import cv2
import numpy as np 

# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")

src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)

src_mask = np.zeros(src.shape, src.dtype)

poly = np.array([ [ 269 , 24 ], [ 273 , 117 ], [ 301 , 145 ], [ 345 , 199 ], 
[ 398 , 273 ], [ 428 , 317 ], [ 447 , 278 ], [ 440 , 231 ], [ 487 , 220 ], [ 491 , 202 ],
[ 437 , 209 ], [ 415 , 162 ], [ 433 , 126 ], [ 410 , 113 ], [ 360 , 115 ], [ 363 , 73 ], [ 317 , 25 ] ], np.int32)
poly = [[poly], np.int32]


cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (550,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("mouse-sizing-n-cropping-files/soil-jungle.jpg", output);


import cv2
import numpy as np 

import cv2
import numpy as np 

# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")

src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)

src_mask = np.zeros(src.shape, src.dtype)

poly = np.array([ [ 269 , 24 ], [ 273 , 117 ], [ 301 , 145 ], [ 345 , 199 ], 
[ 398 , 273 ], [ 428 , 317 ], [ 447 , 278 ], [ 440 , 231 ], [ 487 , 220 ], [ 491 , 202 ],
[ 437 , 209 ], [ 415 , 162 ], [ 433 , 126 ], [ 410 , 113 ], [ 360 , 115 ], [ 363 , 73 ], [ 317 , 25 ] ], np.int32)



cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (550,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("mouse-sizing-n-cropping-files/soil-jungle.jpg", output);


import cv2
import numpy as np 

# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")

src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)

src_mask = np.zeros(src.shape, src.dtype)

poly = np.array([ [ 269 , 24 ], [ 273 , 117 ], [ 301 , 145 ], [ 345 , 199 ], 
[ 398 , 273 ], [ 428 , 317 ], [ 447 , 278 ], [ 440 , 231 ], [ 487 , 220 ], [ 491 , 202 ],
[ 437 , 209 ], [ 415 , 162 ], [ 433 , 126 ], [ 410 , 113 ], [ 360 , 115 ], [ 363 , 73 ], [ 317 , 25 ] ], np.int32)
poly = [[poly], np.int32]


cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (550,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("mouse-sizing-n-cropping-files/soil-jungle.jpg", output);


import cv2
import numpy as np 
# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)
poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
cv2.fillPoly(src_mask, [poly], (255, 255, 255))
# This is where the CENTER where thr 'poly' will be placed
center = (250,275)
# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)
# Write result
cv2.imwrite("01-cloning-example5.jpg", output);

im = PIL.Image.open("01-cloning-example5.jpg")
im

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()
from mpld3 import plugins



fig, ax = plt.subplots(figsize=(9.,9.),facecolor='#ADD8E6')
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot (with tooltips!)", size=20)

labels = ['point {0}'.format(i + 1) for i in range(N)]
fig.plugins = [plugins.PointLabelTooltip(scatter, labels)]

# Loading necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Plotting pretty figures and avoid blurry images
%config InlineBackend.figure_format = 'retina'  
# No need to include %matplotlib inline magic command. These things come built-in now.

# Ignore warnings
import warnings
warnings.filterwarnings('ignore')

# Enable multiple cell outputs
from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = 'all'
#plt.subplots()
#fig, ax = plt.subplots(subplot_kw=dict(

ax = plt.axes(facecolor='#E6E6E6')
ax.grid(color='white', linestyle='solid')


N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot", size=18);


%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()


fig, ax = plt.subplots(subplot_kw=dict(ax = plt.axes(facecolor='#E6E6E6')))
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot", size=18);

import matplotlib
import numpy as np
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline  

x = np.linspace(0, 3*np.pi, 500)
plt.plot(x, np.sin(x**2))
plt.title('A simple chirp')
plt.show()

import cv2
import numpy as np 
# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)
#poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
cv2.fillPoly(src_mask, [poly], (255, 255, 255))
# This is where the CENTER where thr 'poly' will be placed
center = (250,275)
# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)
# Write result
cv2.imwrite("01-cloning-example6.jpg", output);
im = PIL.Image.open("01-cloning-example6.jpg")
im



import cv2
import numpy as np 
# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)
poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
cv2.fillPoly(src_mask, [poly], (255, 255, 255))
# This is where the CENTER where thr 'poly' will be placed
center = (250,275)
# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)
# Write result
cv2.imwrite("01-cloning-example5.jpg", output);

from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

!locate postoid.jpg



!wget -O mouse-sizing-n-croppi!ng-files/postoid.jpg https://jacknorthrup.com/postoids/postoid%20%2810%29.jpg

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/postoid.jpg')
im.size # (width,height) tuple

import PIL
from PIL import Image

basewidth = 400
img = Image.open("mouse-sizing-n-cropping-files/postoid.jpg")
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/postoid400.jpg")
img

http://stackoverflow.com/questions/6136588/image-cropping-using-python
http://2017.compciv.org/guide/topics/python-nonstandard-libraries/pillow.html

!wget -O mouse-sizing-n-cropping-files/soil.jpg https://static.pexels.com/photos/60013/desert-drought-dehydrated-clay-soil-60013.jpeg

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil.jpg')
im.size # (width,height) tuple

import PIL
from PIL import Image

basewidth = 600
img = Image.open("mouse-sizing-n-cropping-files/soil.jpg")
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/soil600.jpg")

from PIL import Image
im=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
im.size # (width,height) tuple

from PIL import Image
im=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
im # (display image)

def add_cursor(fig, ax):
    plt.close(fig)

    vline = ax.axvline(1, color='k')
    hline = ax.axhline(0.5, color='k')

    def set_cursor(x, y):
        vline.set_xdata((x, x))
        hline.set_ydata((y, y))
        display(fig)

    interact(set_cursor, x=ax.get_xlim(), y=ax.get_ylim())

#import ipympl
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline 
x = (sin(6))
plt.plot([0, 1, 2, x, 5, 8,0,-4, -2, -6])
plt.show()


import matplotlib.pyplot as plt
%matplotlib inline 
plt.rcParams['figure.figsize'] = (20.0, 10.0)
import matplotlib.image as mpimg
import numpy as np
img=mpimg.imread('mouse-sizing-n-cropping-files/soil600.jpg')
imgplot = plt.imshow(img)


from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (145, 50, img.width - 40, img.height - 135)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/soil-cropped.png')   

img=mpimg.imread('mouse-sizing-n-cropping-files/soil-cropped.png')
imgplot = plt.imshow(img)

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im.size # (width,height) tuple

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im

http://mpld3.github.io/

class ImageFile(object):
    """Class for storing an image location."""
    def __init__(self, fpath):
        self.fpath = fpath
    def _repr_png_(self):
        return open(self.fpath, 'r').read()
ImageFile('mouse-sizing-n-cropping-files/soil600.jpg')

from IPython.display import Image
image = Image('mouse-sizing-n-cropping-files/soil600.jpg')
image


class ImageFile(object):
    """Class for storing an image location."""

    def __init__(self, fpath):
        self.fpath = fpath
        self.format = fpath.split('.')[-1]

    def _repr_png_(self):
        if self.format == 'png':
            return open(self.fpath, 'r').read()

    def _repr_jpeg_(self):
        if self.format == 'jpeg' or self.format == 'jpg':
            return open(self.fpath, 'r').read()

    def _repr_svg_(self):
        if self.format == 'svg':
            return open(self.fpath, 'r').read()



import matplotlib
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
%matplotlib inline

im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
plt.imshow(im)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
%matplotlib inline  
from mpld3 import plugins
from PIL import Image
img=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
 

fig, ax = plt.subplots()
im = ax.imshow(img, extent=(10, 20, 10, 20),
               origin='lower', zorder=1, interpolation='nearest')

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()
from PIL import Image


im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))



import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

!sudo locate manilyn.jpg

from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (200, 0, img.width - 150, img.height - 0)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/cropsoil600.jpg')   

import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/cropsoil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

im = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
im

#Python 2.7 - Linux
from PIL import Image
# open an image file (.jpg or.png)
im1 = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
# multiply each pixel by a variable - less than 1 is darker greater than 1 is lighter
# works best with .jpg and .png images
im2 = im1.point(lambda p: p * 1.8) # lighter
im3 = im1.point(lambda p: p * .5)  # Darker

# This pops up your defaultimage viewer
im1.show()
im2.show()
im3.show()
# save modified image 
im2.save("mouse-sizing-n-cropping-files/soil-light.jpg")
im3.save("mouse-sizing-n-cropping-files/soil-dark.jpg")


import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))


mpld3.display()

import numpy as np
import cv2
from matplotlib import pyplot as plt

img = cv2.imread('mouse-sizing-n-cropping-files/soil600.jpg')
mask = np.zeros(img.shape[:2],np.uint8)

bgdModel = np.zeros((1,65),np.float64)
fgdModel = np.zeros((1,65),np.float64)

rect = (425,107,686,454)
cv2.grabCut(img,mask,rect,bgdModel,fgdModel,5,cv2.GC_INIT_WITH_RECT)
mask2 = np.where((mask==2)|(mask==0),0,1).astype('uint8')
img = img*mask2[:,:,np.newaxis]

plt.imshow(img)
plt.colorbar()
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
#%matplotlib inline  
from mpld3 import plugins
from PIL import Image
fig, ax = plt.subplots()

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()

!wget -O mouse-sizing-n-cropping-files/jungle.jpg https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg/800px-Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg

import PIL
from PIL import Image
im1 = Image.open("mouse-sizing-n-cropping-files/jungle.jpg")
#longer_side = max(im1.size)
basewidth = 700
hsize = 500
img = im1.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/jungle700.jpg")
im = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
im

import Tkinter
from PIL import Image, ImageTk
from sys import argv

window = Tkinter.Tk(className="bla")

image = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
canvas = Tkinter.Canvas(window, width=image.size[0], height=image.size[1])
canvas.pack()
image_tk = ImageTk.PhotoImage(image)
canvas.create_image(image.size[0]//2, image.size[1]//2, image=image_tk)

def callback(event):
    #print "[",event.x,"],["+event.y,"]"
    print "[",event.x,",",event.y,"],",
 
canvas.bind("<Button-1>", callback)
Tkinter.mainloop()

poly = np.array([ [ 320 , 123 ], [ 437 , 121 ], [ 451 , 267 ], [ 356 , 277 ],[ 321 , 125 ] ], np.int32)
print poly

import cv2
import numpy as np 

import cv2
import numpy as np 

# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")

src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)

src_mask = np.zeros(src.shape, src.dtype)

poly = np.array([ [ 269 , 24 ], [ 273 , 117 ], [ 301 , 145 ], [ 345 , 199 ], 
[ 398 , 273 ], [ 428 , 317 ], [ 447 , 278 ], [ 440 , 231 ], [ 487 , 220 ], [ 491 , 202 ],
[ 437 , 209 ], [ 415 , 162 ], [ 433 , 126 ], [ 410 , 113 ], [ 360 , 115 ], [ 363 , 73 ], [ 317 , 25 ] ], np.int32)



cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (550,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("mouse-sizing-n-cropping-files/soil-jungle.jpg", output);


import cv2
import numpy as np 

# Read images
#dst = cv2.imread("01-ajungle2.jpg")
#dst = cv2.imread("/notebooks/edge-preserving-normalized-convolution-filter.jpg")
#src = cv2.imread("/notebooks/learnopencv/SeamlessCloning/images/airplane.jpg")
#src = cv2.imread("desert-drought.jpg")
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
#src = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
#dst = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
# Create a rough mask around the airplane.
src_mask = np.zeros(src.shape, src.dtype)
#poly = np.array([ [4,80], [30,54], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
poly = np.array([ [ 320 , 123 ], [ 437 , 121 ], [ 451 , 267 ], [ 356 , 277 ],[ 321 , 125 ] ], np.int32)
#poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
#poly = np.array([ [736, 113],[768, 97],[784, 93],[788, 157],[789, 197],[788, 225],[777, 265],[768, 301],[778, 318],\
#[794, 332],[767, 386],[743, 348],[707, 314],[693, 304],[666, 299],[668, 275],[705, 273],[729, 272],\
#[716, 223],[706, 236],[689, 207],[687, 217],[687, 231],[667, 217],[647, 226],[629, 208],[614, 207],\
#[615, 198],[602, 183],[607, 174],[609, 159],[636, 162],[640, 146],[634, 137],[597, 153],[594, 137],\
#[601, 122],[583, 115],[611, 83],[626, 78],[622, 72],[589, 73],[583, 51],[591, 13],[605, 10],[631, 28],\
#[650, 17],[666, 39],[681, 18],[699, 4],[728, 6],[751, 7],[743, 39],[794, 13],[797, 42],[764, 66],\
#[735, 101],[736, 113] ], np.int32)




cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (250,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("01-cloning-example3.jpg", output);


im = Image.open("01-cloning-example3.jpg")
im

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()
from mpld3 import plugins

fig, ax = plt.subplots(subplot_kw=dict(axisbg='#EEEEEE'))
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot (with tooltips!)", size=20)

labels = ['point {0}'.format(i + 1) for i in range(N)]
fig.plugins = [plugins.PointLabelTooltip(scatter, labels)]

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()




fig, ax = plt.subplots(subplot_kw=dict(axisbg='#EEEEEE'))
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot", size=18);

import matplotlib
import numpy as np
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline  

x = np.linspace(0, 3*np.pi, 500)
plt.plot(x, np.sin(x**2))
plt.title('A simple chirp')
plt.show()



from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

!ls mouse-sizing-n-cropping-files/jungle700.jpg

#!ls mouse-sizing-n-cropping-files/soil600.jpg
!ls mouse-sizing-n-cropping-files/jungle700.jpg

import PIL
from PIL import Image
im1 = Image.open("mouse-sizing-n-cropping-files/jungle.jpg")
#longer_side = max(im1.size)
basewidth = 700
hsize = 500
img = im1.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/jungle700.jpg")
im = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
im

from PIL import Image, ImageTk
import PIL
from sys import argv
import sys
import tkinter as Tkinter
import cv2
import numpy as np 
from logger_settings import api_logger

window = Tk(className="Clickable")
data = []
image = PIL.Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
canvas = Canvas(window, width=image.size[0], height=image.size[1])
canvas.pack()
image_tk = ImageTk.PhotoImage(image)
canvas.create_image(image.size[0]//2, image.size[1]//2, image=image_tk)

def callback(event):
    #print "[",event.x,"],["+event.y,"]"
    #Data= ("[",event.x,",",event.y,"],",)
    Data= [event.x,event.y]
    data.append(Data)
    print ("[",event.x,",",event.y,"],",)

canvas.bind("<Button-1>", callback)
#data = str(callback)
#api_logger.info(data)
#mainloop()

poly = np.array(data, np.int32)

# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)
#poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
cv2.fillPoly(src_mask, [poly], (255, 255, 255))
# This is where the CENTER where thr 'poly' will be placed
center = (250,275)
# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)
# Write result
cv2.imwrite("01-cloning-xxz1.jpg", output);
im = PIL.Image.open("01-cloning-xxz1.jpg")
im

ctypes.addressof(p_block.contents).

object = callback
id(object)

import ctypes
>>>a = 5
>>>address = id(a)
>>>address
493382800
>>>ctypes.cast(address, ctypes.py_object).value
5

!cat logs/api.log

!ls /home/jack/Desktop/TWITTER/JupyterNotebook-Graphics-master/mouse-sizing-n-cropping-files

!cp -a /home/jack/Desktop/TWITTER/JupyterNotebook-Graphics-master/mouse-sizing-n-cropping-files .

!ls mouse-sizing-n-cropping-files

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/postoid.jpg')
im.size # (width,height) tuple

import PIL
from PIL import Image

basewidth = 400
img = Image.open("mouse-sizing-n-cropping-files/postoid.jpg")
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/postoid400.jpg")
img

!wget -O mouse-sizing-n-cropping-files/soil.jpg https://static.pexels.com/photos/60013/desert-drought-dehydrated-clay-soil-60013.jpeg

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil.jpg')
im.size # (width,height) tuple

import PIL
from PIL import Image

basewidth = 600
img = Image.open("mouse-sizing-n-cropping-files/soil.jpg")
wpercent = (basewidth / float(img.size[0]))
hsize = int((float(img.size[1]) * float(wpercent)))
img = img.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/soil600.jpg")

from PIL import Image
im=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
im.size # (width,height) tuple

from PIL import Image
im=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
im # (display image)

def add_cursor(fig, ax):
    plt.close(fig)

    vline = ax.axvline(1, color='k')
    hline = ax.axhline(0.5, color='k')

    def set_cursor(x, y):
        vline.set_xdata((x, x))
        hline.set_ydata((y, y))
        display(fig)

    interact(set_cursor, x=ax.get_xlim(), y=ax.get_ylim())

#import ipympl
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline 
x = (sin(6))
plt.plot([0, 1, 2, x, 5, 8,0,-4, -2, -6])
plt.show()


import matplotlib.pyplot as plt
%matplotlib inline 
plt.rcParams['figure.figsize'] = (20.0, 10.0)
import matplotlib.image as mpimg
import numpy as np
img=mpimg.imread('mouse-sizing-n-cropping-files/soil600.jpg')
imgplot = plt.imshow(img)


from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (145, 50, img.width - 40, img.height - 135)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/soil-cropped.png')   

img=mpimg.imread('mouse-sizing-n-cropping-files/soil-cropped.png')
imgplot = plt.imshow(img)

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im.size # (width,height) tuple

from PIL import Image
im=Image.open('mouse-sizing-n-cropping-files/soil-cropped.png')
im

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import matplotlib.path as mpath
import matplotlib.patches as mpatches

import mpld3
from mpld3 import plugins, utils


class LinkedDragPlugin(plugins.PluginBase):
    JAVASCRIPT = r"""
    mpld3.register_plugin("drag", DragPlugin);
    DragPlugin.prototype = Object.create(mpld3.Plugin.prototype);
    DragPlugin.prototype.constructor = DragPlugin;
    DragPlugin.prototype.requiredProps = ["idpts", "idline", "idpatch"];
    DragPlugin.prototype.defaultProps = {}
    function DragPlugin(fig, props){
        mpld3.Plugin.call(this, fig, props);
    };

    DragPlugin.prototype.draw = function(){
        var patchobj = mpld3.get_element(this.props.idpatch, this.fig);
        var ptsobj = mpld3.get_element(this.props.idpts, this.fig);
        var lineobj = mpld3.get_element(this.props.idline, this.fig);

        var drag = d3.behavior.drag()
            .origin(function(d) { return {x:ptsobj.ax.x(d[0]),
                                          y:ptsobj.ax.y(d[1])}; })
            .on("dragstart", dragstarted)
            .on("drag", dragged)
            .on("dragend", dragended);

        lineobj.path.attr("d", lineobj.datafunc(ptsobj.offsets));
        patchobj.path.attr("d", patchobj.datafunc(ptsobj.offsets,
                                                  patchobj.pathcodes));
        lineobj.data = ptsobj.offsets;
        patchobj.data = ptsobj.offsets;

        ptsobj.elements()
           .data(ptsobj.offsets)
           .style("cursor", "default")
           .call(drag);

        function dragstarted(d) {
          d3.event.sourceEvent.stopPropagation();
          d3.select(this).classed("dragging", true);
        }

        function dragged(d, i) {
          d[0] = ptsobj.ax.x.invert(d3.event.x);
          d[1] = ptsobj.ax.y.invert(d3.event.y);
          d3.select(this)
            .attr("transform", "translate(" + [d3.event.x,d3.event.y] + ")");
          lineobj.path.attr("d", lineobj.datafunc(ptsobj.offsets));
          patchobj.path.attr("d", patchobj.datafunc(ptsobj.offsets,
                                                    patchobj.pathcodes));
        }

        function dragended(d, i) {
          d3.select(this).classed("dragging", false);
        }
    }

    mpld3.register_plugin("drag", DragPlugin);
    """

    def __init__(self, points, line, patch):
        if isinstance(points, mpl.lines.Line2D):
            suffix = "pts"
        else:
            suffix = None

        self.dict_ = {"type": "drag",
                      "idpts": utils.get_id(points, suffix),
                      "idline": utils.get_id(line),
                      "idpatch": utils.get_id(patch)}


fig, ax = plt.subplots()

Path = mpath.Path
path_data = [
    (Path.MOVETO, (1.58, -2.57)),
    (Path.CURVE4, (0.35, -1.1)),
    (Path.CURVE4, (-1.75, 2.0)),
    (Path.CURVE4, (0.375, 2.0)),
    (Path.LINETO, (0.85, 1.15)),
    (Path.CURVE4, (2.2, 3.2)),
    (Path.CURVE4, (3, 0.05)),
    (Path.CURVE4, (2.0, -0.5)),
    (Path.CLOSEPOLY, (1.58, -2.57)),
    ]
codes, verts = zip(*path_data)
path = mpath.Path(verts, codes)
patch = mpatches.PathPatch(path, facecolor='r', alpha=0.5)
ax.add_patch(patch)

# plot control points and connecting lines
x, y = zip(*path.vertices[:-1])
points = ax.plot(x, y, 'go', ms=10)
line = ax.plot(x, y, '-k')

ax.grid(True, color='gray', alpha=0.5)
ax.axis('equal')
ax.set_title("Drag Points to Change Path", fontsize=18)

plugins.connect(fig, LinkedDragPlugin(points[0], line[0], patch))

mpld3.display()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
from mpld3 import plugins

fig, ax = plt.subplots()

x = np.linspace(-2, 2, 20)
y = x[:, None]
X = np.zeros((20, 20, 4))

X[:, :, 0] = np.exp(- (x - 1) ** 2 - (y) ** 2)
X[:, :, 1] = np.exp(- (x + 0.71) ** 2 - (y - 0.71) ** 2)
X[:, :, 2] = np.exp(- (x + 0.71) ** 2 - (y + 0.71) ** 2)
X[:, :, 3] = np.exp(-0.25 * (x ** 2 + y ** 2))

im = ax.imshow(X, extent=(10, 20, 10, 20),
               origin='lower', zorder=1, interpolation='nearest')
fig.colorbar(im, ax=ax)

ax.set_title('An Image', size=20)

plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()


!ls mouse-sizing-n-cropping-files

class ImageFile(object):
    """Class for storing an image location."""
    def __init__(self, fpath):
        self.fpath = fpath
    def _repr_png_(self):
        return open(self.fpath, 'rb').read()
ImageFile('mouse-sizing-n-cropping-files/soil.jpg')#,encoding= 'unicode_escape')

with open(path, 'rb') as f:
  contents = f.read()

from IPython.display import Image
image = Image('mouse-sizing-n-cropping-files/soil600.jpg')
image


class ImageFile(object):
    """Class for storing an image location."""

    def __init__(self, fpath):
        self.fpath = fpath
        self.format = fpath.split('.')[-1]

    def _repr_png_(self):
        if self.format == 'png':
            return open(self.fpath, 'r').read()

    def _repr_jpeg_(self):
        if self.format == 'jpeg' or self.format == 'jpg':
            return open(self.fpath, 'r').read()

    def _repr_svg_(self):
        if self.format == 'svg':
            return open(self.fpath, 'r').read()



import matplotlib
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
%matplotlib inline

im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
plt.imshow(im)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import mpld3
%matplotlib inline  
from mpld3 import plugins
from PIL import Image
img=Image.open("mouse-sizing-n-cropping-files/soil600.jpg")
 

#fig, ax = plt.subplots()
fig, ax = plt.subplots(figsize=(9.,9.))
im = ax.imshow(img, extent=(10, 20, 10, 20),
               origin='lower', zorder=1, interpolation='nearest')

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()

#im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
#im

import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
#fig, ax = plt.subplots()
fig, ax = plt.subplots(figsize=(9.,9.))
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

!locate manilyn.jpg

from PIL import Image
img = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
crop_specs = (200, 0, img.width - 150, img.height - 0)
crop_img = img.crop(crop_specs)
crop_img.save('mouse-sizing-n-cropping-files/cropsoil600.jpg')   

import matplotlib.pyplot as plt
import matplotlib.image as mimage
import matplotlib.cbook as cbook
datafile = cbook.get_sample_data('logo2.png', asfileobj=False)
im = mimage.imread(datafile)
fig, ax = plt.subplots(figsize=(5.,5.))
myaximage = ax.imshow(im,
                      aspect='auto',
                      extent=(20, 80, 20, 80),
                      alpha=0.5)
ax.plot(range(100))
plt.show()

import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
#fig, ax = plt.subplots()
fig, ax = plt.subplots(figsize=(9.,9.))
im = np.array(Image.open('mouse-sizing-n-cropping-files/cropsoil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

im = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
im

#Python 2.7 - Linux
from PIL import Image
# open an image file (.jpg or.png)
im1 = Image.open('mouse-sizing-n-cropping-files/soil600.jpg')
# multiply each pixel by a variable - less than 1 is darker greater than 1 is lighter
# works best with .jpg and .png images
im2 = im1.point(lambda p: p * 1.8) # lighter
im3 = im1.point(lambda p: p * .5)  # Darker

# This pops up your defaultimage viewer
#im1.show()
im2.show()
#im3.show()
# save modified image 
im2.save("mouse-sizing-n-cropping-files/soil-light.jpg")
im3.save("mouse-sizing-n-cropping-files/soil-dark.jpg")


im2

im3

import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
fig, ax = plt.subplots()
im = np.array(Image.open('mouse-sizing-n-cropping-files/soil600.jpg'))
# Default shows the image upside down [::-1] flips the image
im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))


mpld3.display()

import matplotlib
import numpy as np
import mpld3
import matplotlib.pyplot as plt
from PIL import Image
from mpld3 import plugins
%matplotlib inline
#fig, ax = plt.subplots()
fig, ax = plt.subplots(figsize=(5.,5.))
im = np.array(Image.open('mouse-sizing-n-cropping-files/test.jpg'))
# Default shows the image upside down [::-1] flips the image
#im = im[::-1]
plt.imshow(im)
plugins.connect(fig, plugins.MousePosition(fontsize=14))

mpld3.display()

import numpy as np
import cv2
from matplotlib import pyplot as plt

img = cv2.imread('mouse-sizing-n-cropping-files/test.jpg')
mask = np.zeros(img.shape[:2],np.uint8)
print(img.shape[:2])
print(mask.shape[:2])
bgdModel = np.zeros((1,65),np.float64)
fgdModel = np.zeros((1,65),np.float64)
print(bgdModel.shape[:2])
print(fgdModel.shape[:2])
#rect = (425,107,686,454)
#rect = (topleft,topright,107,686,454)
#rect = (325,207,386,454)
#rect = (150,100,403,150)
rect = (196,167,340,224)


cv2.grabCut(img,mask,rect,bgdModel,fgdModel,5,cv2.GC_INIT_WITH_RECT)
mask2 = np.where((mask==2)|(mask==0),0,1).astype('uint8')
img = img*mask2[:,:,np.newaxis]

plt.imshow(img)
plt.colorbar()
plt.show()

!pwd

# Python program to illustrate
# foreground extraction using
# GrabCut algorithm

# organize imports
import numpy as np
import cv2
from matplotlib import pyplot as plt

# path to input image specified and
# image is loaded with imread command
image = cv2.imread('mouse-sizing-n-cropping-files/soil600.jpg')

# create a simple mask image similar
# to the loaded image, with the
# shape and return type
mask = np.zeros(image.shape[:2], np.uint8)

# specify the background and foreground model
# using numpy the array is constructed of 1 row
# and 65 columns, and all array elements are 0
# Data type for the array is np.float64 (default)
backgroundModel = np.zeros((1, 65), np.float64)
foregroundModel = np.zeros((1, 65), np.float64)

# define the Region of Interest (ROI)
# as the coordinates of the rectangle
# where the values are entered as
# (startingPoint_x, startingPoint_y, width, height)
# these coordinates are according to the input image
# it may vary for different images
rectangle = (20, 100, 150, 150)

# apply the grabcut algorithm with appropriate
# values as parameters, number of iterations = 3
# cv2.GC_INIT_WITH_RECT is used because
# of the rectangle mode is used
cv2.grabCut(image, mask, rectangle,
			backgroundModel, foregroundModel,
			3, cv2.GC_INIT_WITH_RECT)

# In the new mask image, pixels will
# be marked with four flags
# four flags denote the background / foreground
# mask is changed, all the 0 and 2 pixels
# are converted to the background
# mask is changed, all the 1 and 3 pixels
# are now the part of the foreground
# the return type is also mentioned,
# this gives us the final mask
mask2 = np.where((mask == 2)|(mask == 0), 0, 1).astype('uint8')

# The final mask is multiplied with
# the input image to give the segmented image.
image = image * mask2[:, :, np.newaxis]

# output segmented image with colorbar
plt.imshow(image)
plt.colorbar()
plt.show()


import matplotlib.pyplot as plt
import numpy as np
import mpld3
#%matplotlib inline  
from mpld3 import plugins
from PIL import Image
fig, ax = plt.subplots()

plugins.connect(fig, plugins.MousePosition(fontsize=14))
mpld3.display()

!wget -O mouse-sizing-n-cropping-files/jungle.jpg https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg/800px-Brooklyn_Museum_-_In_the_Jungle%2C_Florida_-_Winslow_Homer_-_overall.jpg

import PIL
from PIL import Image
im1 = Image.open("mouse-sizing-n-cropping-files/jungle.jpg")
#longer_side = max(im1.size)
basewidth = 700
hsize = 500
img = im1.resize((basewidth, hsize), PIL.Image.ANTIALIAS)
img.save("mouse-sizing-n-cropping-files/jungle700.jpg")
im = Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
im

import tkinter
dir(tkinter)

from PIL import Image, ImageTk
import PIL
from sys import argv
import sys
from tkinter import *
window = Tk(className="Clickable")
data = []
image = PIL.Image.open("mouse-sizing-n-cropping-files/jungle700.jpg")
canvas = Canvas(window, width=image.size[0], height=image.size[1])
canvas.pack()
image_tk = ImageTk.PhotoImage(image)
canvas.create_image(image.size[0]//2, image.size[1]//2, image=image_tk)

def callback(event):
    #print "[",event.x,"],["+event.y,"]"
    #Data= ("[",event.x,",",event.y,"],",)
    Data= [event.x,event.y]
    data.append(Data)
    print ("[",event.x,",",event.y,"],",)

canvas.bind("<Button-1>", callback)
mainloop()

poly = np.array(data, np.int32)

import cv2
import numpy as np 
# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)
#poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
cv2.fillPoly(src_mask, [poly], (255, 255, 255))
# This is where the CENTER where thr 'poly' will be placed
center = (250,275)
# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)
# Write result
cv2.imwrite("01-cloning-10.jpg", output);
im = PIL.Image.open("01-cloning-10.jpg")
im

print (data)

poly = np.array(data, np.int32)
print(poly)

poly = np.array([ [ 320 , 123 ], [ 437 , 121 ], [ 451 , 267 ], [ 356 , 277 ],[ 321 , 125 ] ], np.int32)
print(poly)

# This is used in the cell
poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
print (poly)

import cv2
import numpy as np 
# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)
#poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
cv2.fillPoly(src_mask, [poly], (255, 255, 255))
# This is where the CENTER where thr 'poly' will be placed
center = (250,275)
# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)
# Write result
cv2.imwrite("01-cloning-example6.jpg", output);
im = PIL.Image.open("01-cloning-example6.jpg")
im

im = PIL.Image.open("01-cloning-example6.jpg")
im





import cv2
import numpy as np 

# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")

src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)

src_mask = np.zeros(src.shape, src.dtype)

poly = np.array([ [ 269 , 24 ], [ 273 , 117 ], [ 301 , 145 ], [ 345 , 199 ], 
[ 398 , 273 ], [ 428 , 317 ], [ 447 , 278 ], [ 440 , 231 ], [ 487 , 220 ], [ 491 , 202 ],
[ 437 , 209 ], [ 415 , 162 ], [ 433 , 126 ], [ 410 , 113 ], [ 360 , 115 ], [ 363 , 73 ], [ 317 , 25 ] ], np.int32)
poly = [[poly], np.int32]


cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (550,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("mouse-sizing-n-cropping-files/soil-jungle.jpg", output);


import cv2
import numpy as np 

import cv2
import numpy as np 

# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")

src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)

src_mask = np.zeros(src.shape, src.dtype)

poly = np.array([ [ 269 , 24 ], [ 273 , 117 ], [ 301 , 145 ], [ 345 , 199 ], 
[ 398 , 273 ], [ 428 , 317 ], [ 447 , 278 ], [ 440 , 231 ], [ 487 , 220 ], [ 491 , 202 ],
[ 437 , 209 ], [ 415 , 162 ], [ 433 , 126 ], [ 410 , 113 ], [ 360 , 115 ], [ 363 , 73 ], [ 317 , 25 ] ], np.int32)



cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (550,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("mouse-sizing-n-cropping-files/soil-jungle.jpg", output);


import cv2
import numpy as np 

# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")

src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)

src_mask = np.zeros(src.shape, src.dtype)

poly = np.array([ [ 269 , 24 ], [ 273 , 117 ], [ 301 , 145 ], [ 345 , 199 ], 
[ 398 , 273 ], [ 428 , 317 ], [ 447 , 278 ], [ 440 , 231 ], [ 487 , 220 ], [ 491 , 202 ],
[ 437 , 209 ], [ 415 , 162 ], [ 433 , 126 ], [ 410 , 113 ], [ 360 , 115 ], [ 363 , 73 ], [ 317 , 25 ] ], np.int32)
poly = [[poly], np.int32]


cv2.fillPoly(src_mask, [poly], (255, 255, 255))

# This is where the CENTER of the airplane will be placed
center = (550,275)

# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)

# Write result
cv2.imwrite("mouse-sizing-n-cropping-files/soil-jungle.jpg", output);


import cv2
import numpy as np 
# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)
poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
cv2.fillPoly(src_mask, [poly], (255, 255, 255))
# This is where the CENTER where thr 'poly' will be placed
center = (250,275)
# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)
# Write result
cv2.imwrite("01-cloning-example5.jpg", output);

im = PIL.Image.open("01-cloning-example5.jpg")
im

%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()
from mpld3 import plugins



fig, ax = plt.subplots(figsize=(9.,9.),facecolor='#ADD8E6')
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot (with tooltips!)", size=20)

labels = ['point {0}'.format(i + 1) for i in range(N)]
fig.plugins = [plugins.PointLabelTooltip(scatter, labels)]

# Loading necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Plotting pretty figures and avoid blurry images
%config InlineBackend.figure_format = 'retina'  
# No need to include %matplotlib inline magic command. These things come built-in now.

# Ignore warnings
import warnings
warnings.filterwarnings('ignore')

# Enable multiple cell outputs
from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = 'all'
#plt.subplots()
#fig, ax = plt.subplots(subplot_kw=dict(

ax = plt.axes(facecolor='#E6E6E6')
ax.grid(color='white', linestyle='solid')


N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot", size=18);


%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import mpld3

mpld3.enable_notebook()


fig, ax = plt.subplots(subplot_kw=dict(ax = plt.axes(facecolor='#E6E6E6')))
ax.grid(color='white', linestyle='solid')

N = 50
scatter = ax.scatter(np.random.normal(size=N),
                     np.random.normal(size=N),
                     c=np.random.random(size=N),
                     s = 1000 * np.random.random(size=N),
                     alpha=0.3,
                     cmap=plt.cm.jet)

ax.set_title("D3 Scatter Plot", size=18);

import matplotlib
import numpy as np
from math import sin
import matplotlib.pyplot as plt
%matplotlib inline  

x = np.linspace(0, 3*np.pi, 500)
plt.plot(x, np.sin(x**2))
plt.title('A simple chirp')
plt.show()

import cv2
import numpy as np 
# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)
#poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
cv2.fillPoly(src_mask, [poly], (255, 255, 255))
# This is where the CENTER where thr 'poly' will be placed
center = (250,275)
# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)
# Write result
cv2.imwrite("01-cloning-example6.jpg", output);
im = PIL.Image.open("01-cloning-example6.jpg")
im



import cv2
import numpy as np 
# Read images
dst = cv2.imread("mouse-sizing-n-cropping-files/soil600.jpg")
src = cv2.imread("mouse-sizing-n-cropping-files/jungle700.jpg")
src_mask = np.zeros(src.shape, src.dtype)
poly = np.array([ [1,100], [1,50], [151,63], [254,37], [298,90], [272,134], [43,122] ], np.int32)
cv2.fillPoly(src_mask, [poly], (255, 255, 255))
# This is where the CENTER where thr 'poly' will be placed
center = (250,275)
# Clone seamlessly.
output = cv2.seamlessClone(src, dst, src_mask, center, cv2.NORMAL_CLONE)
# Write result
cv2.imwrite("01-cloning-example5.jpg", output);



# import wikipedia doing a wikipedia.search
# searches for wiki pages concerning the topic
from time import sleep
import wikipedia
from ast import literal_eval
# opens a text input and prints
# Research : topic entered
#topic = raw_input("Research : ")
f = open("super.txt", "a")
rows = wikipedia.search("micro processor")
for row in rows:
    nrows = wikipedia.search(row)
    for nrow in nrows:
            nrow = nrow.encode('ascii', 'ignore')
            Sum = wikipedia.summary(nrow)
            f.write(Sum)   
    

Python_Cookbook_3rd_Edition.txt
Automate-the-Boring-Stuff.txt
WebScrapingwithPython.txt


!ls *.txt

import sqlite3
import feedparser
import time
import sqlite3
Dbase = 'pdfs.db'
conn = sqlite3.connect(Dbase)
conn.text_factory = str
c = conn.cursor()
c.execute('''
CREATE VIRTUAL TABLE IF NOT EXISTS pdfs
USING FTS3(text, title);
''')

title = "Web Scraping with Python"
#text = wikipedia.summary("Heaven")
#text = text.encode("ascii", "ignore")
#text = text.replace(". ",". \n")

reaD = open("pdf.txt","r")
lines = reaD.readlines()
for line in lines:
    line = line.decode("utf8")
    conn = sqlite3.connect(Dbase)
    c = conn.cursor()
    c.execute("INSERT INTO pdfs  VALUES (?, ?)", (line, title))
    conn.commit()
    conn.close()

%%writefile generate.py
#!/usr/bin/python

import re
import random
import sys

# These mappings can get fairly large -- they're stored globally to
# save copying time.

# (tuple of words) -> {dict: word -> number of times the word appears following the tuple}
# Example entry:
#    ('eyes', 'turned') => {'to': 2.0, 'from': 1.0}
# Used briefly while first constructing the normalized mapping
tempMapping = {}

# (tuple of words) -> {dict: word -> *normalized* number of times the word appears following the tuple}
# Example entry:
#    ('eyes', 'turned') => {'to': 0.66666666, 'from': 0.33333333}
mapping = {}

# Contains the set of words that can start sentences
starts = []

# We want to be able to compare words independent of their capitalization.
def fixCaps(word):
    # Ex: "FOO" -> "foo"
    if word.isupper() and word != "I":
        word = word.lower()
        # Ex: "LaTeX" => "Latex"
    elif word [0].isupper():
        word = word.lower().capitalize()
        # Ex: "wOOt" -> "woot"
    else:
        word = word.lower()
    return word

# Tuples can be hashed; lists can't.  We need hashable values for dict keys.
# This looks like a hack (and it is, a little) but in practice it doesn't
# affect processing time too negatively.
def toHashKey(lst):
    return tuple(lst)

# Returns the contents of the file, split into a list of words and
# (some) punctuation.
def wordlist(filename):
    f = open(filename, 'r')
    wordlist = [fixCaps(w) for w in re.findall(r"[\w']+|[.,!?;]", f.read())]
    f.close()
    return wordlist

# Self-explanatory -- adds "word" to the "tempMapping" dict under "history".
# tempMapping (and mapping) both match each word to a list of possible next
# words.
# Given history = ["the", "rain", "in"] and word = "Spain", we add "Spain" to
# the entries for ["the", "rain", "in"], ["rain", "in"], and ["in"].
def addItemToTempMapping(history, word):
    global tempMapping
    while len(history) > 0:
        first = toHashKey(history)
        if first in tempMapping:
            if word in tempMapping[first]:
                tempMapping[first][word] += 1.0
            else:
                tempMapping[first][word] = 1.0
        else:
            tempMapping[first] = {}
            tempMapping[first][word] = 1.0
        history = history[1:]

# Building and normalizing the mapping.
def buildMapping(wordlist, markovLength):
    global tempMapping
    starts.append(wordlist [0])
    for i in range(1, len(wordlist) - 1):
        if i <= markovLength:
            history = wordlist[: i + 1]
        else:
            history = wordlist[i - markovLength + 1 : i + 1]
        follow = wordlist[i + 1]
        # if the last elt was a period, add the next word to the start list
        if history[-1] == "." and follow not in ".,!?;":
            starts.append(follow)
        addItemToTempMapping(history, follow)
    # Normalize the values in tempMapping, put them into mapping
    for first, followset in tempMapping.iteritems():
        total = sum(followset.values())
        # Normalizing here:
        mapping[first] = dict([(k, v / total) for k, v in followset.iteritems()])

# Returns the next word in the sentence (chosen randomly),
# given the previous ones.
def next(prevList):
    sum = 0.0
    retval = ""
    index = random.random()
    # Shorten prevList until it's in mapping
    while toHashKey(prevList) not in mapping:
        prevList.pop(0)
    # Get a random word from the mapping, given prevList
    for k, v in mapping[toHashKey(prevList)].iteritems():
        sum += v
        if sum >= index and retval == "":
            retval = k
    return retval

def genSentence(markovLength):
    # Start with a random "starting word"
    curr = random.choice(starts)
    sent = curr.capitalize()
    prevList = [curr]
    # Keep adding words until we hit a period
    while (curr not in "."):
        curr = next(prevList)
        prevList.append(curr)
        # if the prevList has gotten too long, trim it
        if len(prevList) > markovLength:
            prevList.pop(0)
        if (curr not in ".,!?;"):
            sent += " " # Add spaces between words (but not punctuation)
        sent += curr
    return sent

def main():
    if len(sys.argv) < 2:
        sys.stderr.write('Usage: ' + sys.argv [0] + ' text_source [chain_length=1]\n')
        sys.exit(1)

    filename = sys.argv[1]
    markovLength = 1
    if len (sys.argv) == 3:
        markovLength = int(sys.argv [2])

    buildMapping(wordlist(filename), markovLength)
    print genSentence(markovLength)

if __name__ == "__main__":
    main()

from Immanip import SwapPalettes
filename0 = '/home/jack/Desktop/text_stuff/instagram/PalletteTemp.png'
filename1 = '/home/jack/Desktop/text_stuff/instagram/sea1.jpg'
filename = 'pallet_test.jpg'
SwapPalettes.swappalettes(filename0,filename1,filename)

!python generate.py grimm.txt 6

!python generate.py grimm.txt 8


!python generate.py hek.txt 6

%reset -f

import SearchFilename
filename = "grimm.txt"
length = 4
SearchFilename.searchfilename(filename, length)

import SearchFilename
filename = "Automate-the-Boring-Stuff.txt"
length = 4
SearchFilename.searchfilename(filename, length)

#%%writefile /home/jack/anaconda2/lib/python2.7/site-packages/Txmanip/SearchFilename.py
'''
Search a filename for a phrase and how many following lines to display
USAGE:
import SearchFilename
filename = "hek.txt"
length = 4
SearchFilename.searchfilename(filename, length)
'''
def searchfilename(filename, length):
    f = open(filename, "r")
    searchlines = f.readlines()
    f.close()
    search = str(raw_input("Search Phrase"))
    for i, line in enumerate(searchlines):
        if search in line: 
            for l in searchlines[i:i+length]: print l,
            print

f = open("hek.txt", "r")
searchlines = f.readlines()
f.close()
search = str(raw_input("Search Phrase"))
for i, line in enumerate(searchlines):
    if search in line: 
        for l in searchlines[i:i+8]: print l,
        print

# Open file for reading
fo = open('hek.txt')

# Read the first line from the file
line = fo.readline()

# Initialize counter for line number
line_no = 1
search_str = raw_input("Search Phrase")
# Loop until EOF
while line != '' :
        # Search for string in line
        index = line.find(search_str)
        if ( index != -1) :
            print("[", line_no, ",", index, "] ", line," ")
            # Read next line
            line = fo.readline()  

            # Increment line counter
            line_no += 1
# Close the files
fo.close()


f = open("file.txt", "r")
searchlines = f.readlines()
f.close()
for i, line in enumerate(searchlines):
    if "searchphrase" in line: 
        for l in searchlines[i:i+3]: print l,
        print


# Open file for reading
fo = open('grimm.txt')

# Read the first line from the file
line = fo.readline()

# Initialize counter for line number
line_no = 1
search_str = str(raw_input("Search Phrase"))
# Loop until EOF
while line != '' :
        # Search for string in line
        index = line.find(search_str)
        if ( index != -1) :
            print(fname, "[", line_no, ",", index, "] ", line," ")
            # Read next line
            line = fo.readline()  

            # Increment line counter
            line_no += 1
# Close the files
fo.close()


import timeit

def search(word=None,source=None):
    word = "is"
    source = "Lorem Ipsum is simply dummy text"
    return source.lower().find(word.lower())

print timeit.timeit(search, number=1000)

!locate Txmanip

%%writefile /home/jack/anaconda2/lib/python2.7/site-packages/Txmanip/Txsearch.py
# Ask to enter string to search
# this will search all *.txt files in the current directory
# input window will ask "Search Phrase" 
"""
import Txsearch
Txsearch.txsearch()
"""
import os
import timeit
def txsearch():
    Sstring = raw_input("Search Phrase")
    for fname in os.listdir('./'):
       # Apply file type filter   
       if fname.endswith(".txt"):
            # Open file for reading
            fo = open(fname)
            # Read the first line from the file
            line = fo.readline()
            # Initialize counter for line number
            line_no = 1
            # Loop until EOF
            while line != '' :
                    index = line.find(Sstring)
                    if ( index != -1) :
                        # Set some parameters no lines longer than 240 characters 
                        # or less than search phrase +30 characters 
                        if len(line)< 240 and len(line)> len(Sstring)+20 :
                            #print(fname, "[", line_no, ",", index, "] ", line)
                            #print fname,line[1:-8],"  "
                            print fname,line_no,line
                    # Read next line
                    line = fo.readline()  
                    # Increment line counter
                    line_no += 1
            # Close the files
            fo.close()
            
txsearch()

import Txsearch
Txsearch.txsearch()

import os

# Ask to enter string to search
Sstring = raw_input("Search Phrase")
for fname in os.listdir('./'):
   # Apply file type filter   
   if fname.endswith(".txt"):
        # Open file for reading
        fo = open(fname)
        # Read the first line from the file
        line = fo.readline()
        # Initialize counter for line number
        line_no = 1
        # Loop until EOF
        while line != '' :
                index = line.find(Sstring)
                if ( index != -1) :
                    # Set some parameters no lines longer than 240 characters 
                    # or less than search phrase +30 characters 
                    if len(line)< 240 and len(line)> len(Sstring)+20 :
                        #print(fname, "[", line_no, ",", index, "] ", line)
                        #print fname,line[1:-8],"  "
                        print fname,line_no,line
                # Read next line
                line = fo.readline()  
                # Increment line counter
                line_no += 1
        # Close the files
        fo.close()


import timeit
# Open file for reading
fo = open('hek.txt')

# Read the first line from the file
line = fo.readline()

def search():
    # Read the first line from the file
    line = fo.readline()

    word = "is"
    source = "Lorem Ipsum is simply dummy text"
    return source.lower().find(word.lower())

print timeit.timeit(search, number=1000)





# sphinx_gallery_thumbnail_number = 3
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import Normalize
%matplotlib inline

def normal_pdf(x, mean, var):
    return np.exp(-(x - mean)**2 / (2*var))


# Generate the space in which the blobs will live
xmin, xmax, ymin, ymax = (0, 100, 0, 100)
n_bins = 100
xx = np.linspace(xmin, xmax, n_bins)
yy = np.linspace(ymin, ymax, n_bins)

# Generate the blobs. The range of the values is roughly -.0002 to .0002
means_high = [20, 50]
means_low = [50, 60]
var = [150, 200]

gauss_x_high = normal_pdf(xx, means_high[0], var[0])
gauss_y_high = normal_pdf(yy, means_high[1], var[0])

gauss_x_low = normal_pdf(xx, means_low[0], var[1])
gauss_y_low = normal_pdf(yy, means_low[1], var[1])

weights_high = np.array(np.meshgrid(gauss_x_high, gauss_y_high)).prod(0)
weights_low = -1 * np.array(np.meshgrid(gauss_x_low, gauss_y_low)).prod(0)
weights = weights_high + weights_low

# We'll also create a grey background into which the pixels will fade
greys = np.ones(weights.shape + (3,)) * 70

# First we'll plot these blobs using only ``imshow``.
vmax = np.abs(weights).max()
vmin = -vmax
cmap = plt.cm.RdYlBu

fig, ax = plt.subplots()
ax.imshow(greys)
ax.imshow(weights, extent=(xmin, xmax, ymin, ymax), cmap=cmap)
ax.set_axis_off()

# Create an alpha channel of linearly increasing values moving to the right.
alphas = np.ones(weights.shape)
alphas[:, 30:] = np.linspace(1, 0, 70)

# Normalize the colors b/w 0 and 1, we'll then pass an MxNx4 array to imshow
colors = Normalize(vmin, vmax, clip=True)(weights)
colors = cmap(colors)

# Now set the alpha channel to the one we created above
colors[..., -1] = alphas

# Create the figure and image
# Note that the absolute values may be slightly different
fig, ax = plt.subplots()
ax.imshow(greys)
ax.imshow(colors, extent=(xmin, xmax, ymin, ymax))
ax.set_axis_off()

# Create an alpha channel based on weight values
# Any value whose absolute value is > .0001 will have zero transparency
alphas = Normalize(0, .3, clip=True)(np.abs(weights))
alphas = np.clip(alphas, .4, 1)  # alpha value clipped at the bottom at .4

# Normalize the colors b/w 0 and 1, we'll then pass an MxNx4 array to imshow
colors = Normalize(vmin, vmax)(weights)
colors = cmap(colors)

# Now set the alpha channel to the one we created above
colors[..., -1] = alphas

# Create the figure and image
# Note that the absolute values may be slightly different
fig, ax = plt.subplots()
ax.imshow(greys)
ax.imshow(colors, extent=(xmin, xmax, ymin, ymax))

# Add contour lines to further highlight different levels.
ax.contour(weights[::-1], levels=[-.1, .1], colors='k', linestyles='-')
ax.set_axis_off()
plt.show()

ax.contour(weights[::-1], levels=[-.0001, .0001], colors='k', linestyles='-')
ax.set_axis_off()
plt.show()



import vsketch

vsk = vsketch.Vsketch()
vsk.size("a4")
vsk.scale("1cm")

NUM = 200
FREQ = 0.003
SPEED = 0.06

for i in range(NUM):
    t = i * FREQ
    v = i * SPEED
    vsk.bezier(
        vsk.noise(t, 0) * 10 + v,
        vsk.noise(t, 1000) * 10 + v,
        vsk.noise(t, 2000) * 10 + v,
        vsk.noise(t, 3000) * 10 + v,
        vsk.noise(t, 4000) * 10 + v,
        vsk.noise(t, 5000) * 10 + v,
        vsk.noise(t, 6000) * 10 + v,
        vsk.noise(t, 7000) * 10 + v,
    )

vsk.display(mode="matplotlib")

from sympy import init_printing
from sympy import *
init_printing()

x,y,z = symbols('x y z')

e = x**2 + 2.0*y + sin(z); e

diff(e, x)

integrate(e, z)



from sympy import init_printing
from sympy import *
init_printing()

x,y,z = symbols('x y z')

e = x**2 + 2.0*y + sin(z); e

diff(e, x)

integrate(e, z)



%matplotlib inline
import matplotlib
import matplotlib.pyplot as plt
print(matplotlib.backends.backend)

from IPython.display import set_matplotlib_formats
set_matplotlib_formats('png', 'pdf')
matplotlib.rcParams['figure.figsize'] = (2,1)

ip.display_formatter.formatters['application/pdf'].type_printers

import numpy as np

a = np.random.uniform(size=(100,100))

a.shape

evs = np.linalg.eigvals(a)

evs.shape

plt.hist(evs.real)

%pylab inline

import numpy as np

a = np.random.uniform(size=(100,100))

a.shape

evs = np.linalg.eigvals(a)

evs.shape

hist(evs.real)

print("Hello world, my number is {}".format(24 - 1))

print("Some text before the error")
raise RuntimeError("This is a deliberate exception")

print("The answer to the question about life, the universe and everything is: {}".format(43 - 1))

print("Hello world, my number is {}".format(24 - 1))

print("Some text before the error")
raise RuntimeError("This is a deliberate exception")

print("The answer to the question about life, the universe and everything is: {}".format(43 - 1))

from IPython.display import Image
Image('containerized_deployments.jpeg', embed=True)



from IPython.display import Image
Image('containerized_deployments.jpeg', embed=True)

import os; os.system('touch /tmp/pwned')

import os; os.system('touch /tmp/pwned')

import os; os.system('touch /tmp/pwned')

!ls mouse*.*


import re
import json

s= open("mouse-sizing-n-cropping.ipynb","r")


while True:
    try:
        result = json.loads(s)   # try to parse...
        break                    # parsing worked -> exit loop
    except Exception as e:
        # "Expecting , delimiter: line 34 column 54 (char 1158)"
        # position of unexpected character after '"'
        unexp = int(re.findall(r'\(char (\d+)\)', str(e))[0])
        # position of unescaped '"' before that
        unesc = s.rfind(r'"', 0, unexp)
        s = s[:unesc] + r'\"' + s[unesc+1:]
        # position of correspondig closing '"' (+2 for inserted '\')
        closg = s.find(r'"', unesc + 2)
        s = s[:closg] + r'\"' + s[closg+1:]
print (result)


import re
import json
def fixjson(badjson):
    s = badjson
    idx = 0
    while True:
        try:
            start = s.index( '": "', idx) + 4
            end1  = s.index( '",\n',idx)
            end2  = s.index( '"\n', idx)
            if end1 < end2:
                end = end1
            else:
                end = end2
            content = s[start:end]
            content = content.replace('"', '\\"')
            s = s[:start] + content + s[end:]
            idx = start + len(content) + 6
        except:
            return s
badjson = open("mouse-sizing-n-cropping_mouse-sizing-n-cropping.ipynb","r")
newjson = open("new-mouse-sizing-n-cropping_mouse-sizing-n-cropping.ipynb","w")
TEXT = fixjson(badjson)

for line in TEXT:
    newjson.write(line)
  

newjson.close()  





import os
import os.path
title = "test.list"
f= open(title,"w");f.close()
count=0
for dirpath, dirnames, filenames in os.walk("/home/jack/Desktop/JupyterNotebook-Graphics/"):
    filenames = [f for f in filenames if not f[0] == '.']
    dirnames[:] = [d for d in dirnames if not d[0] == '.']
    for filename in [f for f in filenames if f.endswith(".ipynb")]:
        count=count+1
        Path = os.path.join(dirpath, filename)
        with open(title, 'a') as outfile:
            path = Path+"\n"
            outfile.write(path)

import os
import hashlib
H = []
Hs = set()
def file_as_bytes(file):
    with file:
        return file.read()
title0 = "hashtest.list"
f0= open(title0,"w")
title = "sept8_IPNB.list"
#title = "test.list"
f= open(title,"r").readlines()
for full_path in f:
    full_path = full_path.replace("\n","")
    HASH = hashlib.md5(file_as_bytes(open(full_path, 'rb'))).hexdigest()
    DATE = os.path.getmtime(full_path)
    DATE = str(DATE)
    PATHhash = HASH+":"+DATE+":"+full_path+"\n"
    
    H.append(PATHhash)
    f0.write(PATHhash)
    Hs.add(HASH)
    
    
f0.close()    

title = "hashtest.list"
title1 = "rows_hashtest.list"
f0 = open(title1,"w")
count = 0
cnt = 0
dup = set()
Dup = []
SORT = []
f = open(title,"r").readlines()
for rows in f:
    row = rows.split(":")
    text = row[0]+":"+row[1]+":"+row[2]
    SORT.append(text)
    print text
    f0.write(text)
    count = count +1
f0.close()
print count    
print cnt


title = "hashtest.list"
title1 = "nodups_hashtest.list"
f0 = open(title1,"w")
count = 0
cnt = 0
dup = set()
Dup = []
SORT = []
f = open(title,"r").readlines()
#f0 = f0.replace("\n", "")
#rows = f0.split(":")
for rows in f:
    row = rows.split(":")
    dup.add(row[0])
    if row[0] not in dup:
        print row[0],row[1],row[2]
        text = row[0]+":"+row[1]+":"+row[2]
        SORT.append(text)
        print text
        f0.write(text)
        cnt = cnt +1
    Dup.append(row[0])
    count = count +1
f0.close()
print count    
print cnt


title1 = "sorted_hash.list"
f0 = open(title1,"w")
count = 0
LIST = sorted(SORT)
for lines in LIST:
    f0.write(lines)
    count = count +1
print count 
f0.close()

title1 = "nodup_sorted_hash.list"
f0 = open(title1,"w")
newline = ""
count = 0
for lastline in LIST:
    st = lastline.split(":")
    oldline = st[0]
    if st[0] != newline:
        f0.write(lastline)
        count = count +1
        newline = oldline
    
print count
f0.close()

count = 0
title1 = "nodup_sorted_hash.list"
f0 = open(title1,"r").readlines()
for lines in f0:
    print lines
    count = count +1
print count    

import os
import hashlib
H = []
Hs = set()
clean =[]
count = 0
def file_as_bytes(file):
    with file:
        return file.read()
title0 = "hashtesta.list"
f0= open(title0,"w")
title = "sept8_IPNB.list"

f= open(title,"r").readlines()
for full_path in f:
    count = count + 1
    full_path = full_path.replace("\n","")
    HASH = hashlib.md5(file_as_bytes(open(full_path, 'rb'))).hexdigest()
    oldhash = H
    DATE = os.path.getmtime(full_path)
    DATE = str(DATE)
    PATHhash = HASH+":"+DATE+":"+full_path+"\n"
    for ck in H:
        if HASH not in ck:
            clean.append(PATHhash)
    olhash = HASH   
    H.append(str(count)+"_"+PATHhash)
    
    f0.write(str(count)+"_"+PATHhash)
    Hs.add(HASH)
    
    
f0.close()    

count = 0
for line in clean:
    print line
    count = count +1
print count    

print clean

print len(H)
print len(Hs)

count = 0
for l in HH:
    print l
    count = count +1
print count    

count = 0
for l in HHs:
    print l
    count = count +1
print count    

HH = H
HHs = Hs

count = 0
for h in HH:
    
    for hs in HHs:
        hs = hs.split(":")
        if hs[0] in h:
            print hs[0]
            count = count +1
            print h
print count # 1462   

import hashlib
H = []
def file_as_bytes(file):
    with file:
        return file.read()

title = "sept8_IPNB.list"
f= open(title,"r").readlines():
for full_path in f:
    full_path = full_path.replace("\n","")
    HASH = hashlib.md5(file_as_bytes(open(full_path, 'rb'))).hexdigest()
    H.append(HASH)


import sqlite3
import re
import sys
import time
import os
database = "sept8_IPNB.list.db"
#database = "junk2.db"
conn = sqlite3.connect(database)
conn.text_factory = lambda x: unicode(x, "utf-8", "ignore")
c = conn.cursor()
c.execute("""
CREATE VIRTUAL TABLE IF NOT EXISTS ipynb 
USING FTS4(file, content, description);
""")
conn.commit()
conn.close()
conn = sqlite3.connect(database)
c = conn.cursor()
count=1
#titlelist = "sept8_IPNB.list"
titlelist = "nodup_sorted_hash.list"
titles = open(titlelist,"r")
for title in titles.readlines():
    title = str(title)
    title = title.split(":")
    title = title[2].replace("\n", "")
    dt=time.ctime(os.path.getctime(title))
    dt=str(dt)
    filename = os.path.basename(title)
    # Use for debug print filename,":"
    description = filename
    description = description.replace("-", " ")
    description = description.replace("_", " ")
    description = description.replace(".ipynb", " ")
    description = re.sub("([a-z])([A-Z])","\g<1> \g<2>",description)
    
    
    dt=time.ctime(os.path.getctime(title))
    dt=str(dt)
    #dt = dt.replace(" ","")
    description = description+"Date :"+dt
    suf = title.replace("/home/jack/","")
    suf = suf.replace(".ipynb","_")
    suf = suf.replace("/","_")
    filename = suf+filename
    with open(title, "rb") as input_file:
                ablob = input_file.read()
                content  = sqlite3.Binary(ablob)
                c.execute("INSERT INTO ipynb (file, content, description) VALUES(?, ?, ?)", 
                      (filename, content, description))
                
                conn.commit()
    line = file
    #line ="Good-mouse-sizing-and-cropping.ipynb"
    index = "Index"
    c.execute("INSERT INTO ipynb VALUES (?,?,?)", (index, filename, description)) 
    conn.commit()
    count=count+1
    print count,filename, description

c.close()
conn.close() 

titlelist = "nodup_sorted_hash.list"
titles = open(titlelist,"r")
for title in titles.readlines():
    title = str(title)
    title = title.split(":")
    title = title[2].replace("\n", "")
    print title

import json
import sys
from time import sleep
import sqlite3
import csv
database = "sept8_IPNB.list.db"
conn = sqlite3.connect(database)
conn.text_factory=str 
c = conn.cursor()
count=1
search = raw_input("Title :")
# ONLY the DATA table can use MATCH
for row in c.execute('SELECT rowid, file, content, description FROM ipynb WHERE content MATCH ?',(search,)):
    print row[0],row[1],row[3],"\n----------------------"
    count=count+1
    if count>25:break
c.close()
conn.close()

import json
import sys
from time import sleep
import sqlite3
import csv
database = "sept8_IPNB.list.db"
conn = sqlite3.connect(database)
conn.text_factory=str 
c = conn.cursor()
count=1
search = raw_input("Title :")
# ONLY the DATA table can use MATCH
for row in c.execute('SELECT rowid, file, content, description FROM ipynb WHERE content MATCH ?',(search,)):
    print row[0],row[1],"\n----------------------"
    count=count+1
    if count>25:break
c.close()
conn.close()

import json
import sys
from time import sleep
import sqlite3
import csv
database = "sept8_IPNB.list.db"
conn = sqlite3.connect(database)
conn.text_factory=str 
c = conn.cursor()
search = raw_input("ROWID :")
with open('WordcloudImageGenerator.ipynb', 'w') as outfile:
        for row in c.execute('SELECT content FROM ipynb WHERE rowid = ?', (search,)):
            #for row in c.execute('SELECT * FROM ipynb WHERE rowid = 100 LIMIT 10 OFFSET 0'):
            row0 = row[0]
            #row0 =str(row0,"\n")
            outfile.write(row0)

conn.close()
f.close()



print("this cell should have tags in html output")

print("this cell should NOT have tags in html output")

print("this cell should have tags in html output")

print("this cell should NOT have tags in html output")

# %load /usr/local/bin/NOTE
#!/usr/bin/python3
import sys
import sqlite3
conn = sqlite3.connect("/home/jake/Desktop/pas.bak/notes.db")
conn.text_factory = str
c = conn.cursor()
if len(sys.argv) < 3:
     print ("\n******* NOTE - Notes Editor **************")
     print ("Not enough options were passed.")     
     print ("NOTE requires 2 arguments. the first -H , -R , -I , -D or -S .\nThe second can be a period.")
     print ("If printing the database -T also add a filename of your choice ( no quotes required ):")
     print (" Example: NOTE -T Data2Text.txt")   
     print ("If wanting to read all entries use -R . (use the period)") 
     print ("even use the period with help.  -H .   must be entered.")
     print ("******************************************\n")
     sys.exit()
mod = sys.argv[1]
def create():

    import sqlite3
    conn = sqlite3.connect("/home/jake/Desktop/pas.bak/notes.db")
    conn.text_factory = str
    c = conn.cursor()
    c.execute("CREATE VIRTUAL TABLE PROJECT using FTS4 (input)")
    conn.commit()
    text = "Database Created"
    return text

def insert(data,conn=conn, c=c):
    c.execute("INSERT into PROJECT values (?)", (data,))
    for row in c.execute("SELECT ROWID,* FROM PROJECT ORDER BY ROWID DESC LIMIT 1"):
        print ("\nPOST VERIFIED:\n",row[0],row[1])
    conn.commit()
    conn.close()
    return data

def search(data,conn=conn, c=c):
    #for row in c.execute("SELECT ROWID,* FROM PROJECT WHERE input MATCH ?",(data,)):
    #    print ("\nINFO Found Here:",row[0],row[1])
    for row in c.execute("SELECT ROWID,* FROM PROJECT"):
        if data in row[1]:    
            print ("\nINFO Found Here:\n",row[0],row[1])
    #conn.commit()
    #conn.close()
def delete(rowid,conn=conn, c=c):
    c.execute("DELETE FROM PROJECT WHERE rowid = ?", (rowid,))
    conn.commit()
    conn.close()
    text = "ROWID "+rowid+" Deleted"
    return text

def main():
    conn = sqlite3.connect("/home/jake/Desktop/pas.bak/notes.db")
    conn.text_factory = str
    c = conn.cursor()
    for row in c.execute("SELECT rowid, * FROM PROJECT"):
        print (row[0],": ",row[1])

def prtmain(filename):
    fn = open(filename, "w")
    conn = sqlite3.connect("/home/jake/Desktop/notes.db")
    conn.text_factory = str
    c = conn.cursor()
    for row in c.execute("SELECT rowid, * FROM PROJECT"):
        TEXT = "id:"+str(row[0])+"\n"+str(row[1])
        TEXT = str(TEXT)
        TEXT = TEXT.replace('\\n','\n')
        TEXT = "".join(TEXT)
        fn.write(TEXT+'\n----\n')

def HELP():
    TXT = """
    USE: NOTE argv[1] argv[2]
    argv[1] sets the mod:
    -I insert / -D delete / -R read / -H help
    examples:
    Notice the entry is in parenthese.
    -I  to insert "STUFF to be inserted"
    NOTE -I "STUFF to be inserted"
    -D to delete where rowid is 3
    NOTE -D 3
    Notice the period after -R . 
    -R . read all
    To search for the term "current project"
    NOTE -S 3
    -S "current project"
    NOTE -R .
    -H help on options
    NOTE -H .
    """
    print (TXT)

if mod == "-H" or mod == "h":
    HELP()        
if mod == "-R" or mod == "-r":
    main()
if mod == "-I" or mod == "-i":
    data = sys.argv[2]
    insert(data)
if mod == "-D" or mod == "-d":
    rowid = sys.argv[2]
    delete(rowid) 
if mod == "-S" or mod == "-s":
    data = sys.argv[2]
    search(data)       
if mod == "-T":
    filename = sys.argv[2]
    prtmain(filename)
if mod == "-C" or mod == "-c":
    create()
    print (create)
else:
    print ("_________________\n")
    print (sys.argv[2],"Command Completed")
    


import sys
import sqlite3
info = set()
def main():
    conn = sqlite3.connect("/home/jake/Desktop/pas.bak/notes.db")
    conn.text_factory = str
    c = conn.cursor()
    for row in c.execute("SELECT rowid, * FROM PROJECT"):
        print (row[1])
        info.add(row[1])
main()

!rm allnotes.data



!locate notes.db >> allnotes.data

# %load allnotes.data
/home/jack/Desktop/Pas.bak/notes.db
/home/jack/Desktop/SITE-bak/lbry-react/KEEP-NOTES/notes.db
/home/jack/Desktop/site/lbry-react/KEEP-NOTES/notes.db
/home/jake/Desktop/pas.bak/notes.db
/home/jake/pas.bak/notes.db
/mnt/73777e11-76da-4fee-ba95-e731ac3ca459/Desktop/notes.db
/mnt/73777e11-76da-4fee-ba95-e731ac3ca459/Desktop/Pas.bak/notes.db
/mnt/73777e11-76da-4fee-ba95-e731ac3ca459/Desktop/WORKING/reactwithprisma/notes.db
/mnt/73777e11-76da-4fee-ba95-e731ac3ca459/Desktop/WORKING/reactwithprisma/starter/notes.db
/mnt/73777e11-76da-4fee-ba95-e731ac3ca459/Desktop/WORKING/reactwithprisma/starter/prisma/notes.db
/mnt/73777e11-76da-4fee-ba95-e731ac3ca459/Desktop/site/lbry-react/KEEP-NOTES/notes.db
/mnt/73777e11-76da-4fee-ba95-e731ac3ca459/Desktop/starter/prisma/notes.db
/mnt/73777e11-76da-4fee-ba95-e731ac3ca459/Downloads/xvid/pas.bak/notes.db
/mnt/73777e11-76da-4fee-ba95-e731ac3ca459/Info-Central/KEEP-NOTES/notes.db
/mnt/73777e11-76da-4fee-ba95-e731ac3ca459/Info-Central/docs/KEEP-NOTES/notes.db
/mnt/73777e11-76da-4fee-ba95-e731ac3ca459/bak/bak/KEEP-NOTES/notes.db
/mnt/73777e11-76da-4fee-ba95-e731ac3ca459/bak/bak/docs/KEEP-NOTES/notes.db
/mnt/73777e11-76da-4fee-ba95-e731ac3ca459/lbry-react/KEEP-NOTES/notes.db
/mnt/73777e11-76da-4fee-ba95-e731ac3ca459/lbry-react (copy 1)/KEEP-NOTES/notes.db
/mnt/73777e11-76da-4fee-ba95-e731ac3ca459/lbry-react-old/KEEP-NOTES/notes.db
/mnt/73777e11-76da-4fee-ba95-e731ac3ca459/pas.bak/notes.db


DATA = open("allnotes.data", "r").readlines()
DBASES = []
for line in DATA:
    line=line.replace("\n","")
    print (line)
    DBASES.append(line)


import sqlite3
def create(dbase):
    conn = sqlite3.connect(dbase)
    conn.text_factory = str
    c = conn.cursor()
    c.execute("CREATE VIRTUAL TABLE IF NOT EXISTS PROJECT USING FTS4 (input)")
    conn.commit()
    text = "Database Created"
    return text
#debug dbase = "/home/jack/Desktop/pas.bak/junk.db"
dbase = "/home/jack/Desktop/pas.bak/ALLnotes.db"

create(dbase)

import sqlite3
def insert(data,dbase):
    conn = sqlite3.connect(dbase)
    conn.text_factory = str
    c = conn.cursor()
    c.execute("INSERT into PROJECT values (?)", (data,))
    for row in c.execute("SELECT ROWID,* FROM PROJECT ORDER BY ROWID DESC LIMIT 1"):
        print ("\nPOST VERIFIED:\n",row[0],row[1])
    conn.commit()
  
    return data
dbase="/home/jack/Desktop/pas.bak/ALLnotes.db"
insert(data,dbase)

dbase="/home/jack/Desktop/pas.bak/ALLnotes.db"
for data in DBASES:
    print(data)

dbase="/home/jack/Desktop/pas.bak/ALLnotes.db"
for data in DBASES:
    print(data)

import sys
import sqlite3
info = set()
def main(Dbase):
    conn = sqlite3.connect(Dbase)
    conn.text_factory = str
    c = conn.cursor()
    for row in c.execute("SELECT rowid, * FROM PROJECT"):
        print (row[1])
        info.add(row[1])

#Dbase = "/home/jack/Desktop/pas.bak/notes.db"
Dbase="/home/jack/Desktop/pas.bak/ALLnotes.db"
main(Dbase)

for Dbase in DBASES:
    print(Dbase)

Dbase="/home/jack/Desktop/pas.bak/ALLnotes.db"

import sqlite3
def insert(data,dbase):
    conn = sqlite3.connect(dbase)
    conn.text_factory = str
    c = conn.cursor()
    #c.execute("INSERT into PROJECT values (?)", (data,))
    for row in c.execute("SELECT ROWID,* FROM PROJECT"):
        print ("\nPOST VERIFIED:\n",row[0],row[1])
    conn.commit()
  
    return data
dbase="/home/jack/Desktop/pas.bak/ALLnotes.db"
insert(data,dbase)

import sys
import sqlite3
info = set()
def main(Dbase):
    conn = sqlite3.connect(Dbase)
    conn.text_factory = str
    c = conn.cursor()
    for row in c.execute("SELECT rowid, * FROM PROJECT"):
        print (row[1])
        data = row[1]
        insert(data,dbase)
        info.add(row[1])



for Dbase in DBASES:
    main(Dbase)

    print(Dbase)

import sqlite3
def create(dbase):
    conn = sqlite3.connect(dbase)
    conn.text_factory = str
    c = conn.cursor()
    c.execute("CREATE VIRTUAL TABLE IF NOT EXISTS PROJECT USING FTS4 (input)")
    conn.commit()
    text = "Database Created"
    return text
#debug dbase = "/home/jack/Desktop/pas.bak/junk.db"
dbase = "/home/jack/Desktop/pas.bak/ALL.db"
create(dbase)
def insert(data,dbase):
    conn = sqlite3.connect(dbase)
    conn.text_factory = str
    c = conn.cursor()
    #c.execute("INSERT into PROJECT values (?)", (data,))
    for row in c.execute("SELECT ROWID,* FROM PROJECT"):
        print ("\nPOST VERIFIED:\n",row[0],row[1])
    conn.commit()
  
    return data
dbase="/home/jack/Desktop/pas.bak/ALL.db"
insert(data,dbase)
 
for data in info:
    #print(data)
    insert(data,dbase)
    #print(len(info))

import sys
import sqlite3
info = set()
def main(dbase):
    conn = sqlite3.connect(dbase)
    conn.text_factory = str
    c = conn.cursor()
    for row in c.execute("SELECT rowid, * FROM PROJECT"):
        print (row[1])
        info.add(row[1])
dbase="/home/jack/Desktop/pas.bak/ALL.db"
main(dbase)

conn.commit()
conn.close()

!pwd

!sudo updatedb

import sys
import sqlite3
#info = set()
def main():
    conn = sqlite3.connect("mnt/73777e11-76da-4fee-ba95-e731ac3ca459/Desktop/WORKING/reactwithprisma/starter/notes.db")
    conn.text_factory = str
    c = conn.cursor()
    for row in c.execute("SELECT rowid, * FROM PROJECT"):
        print (row[1])
        info.add(row[1])
main()

# %load NOTE
#!/usr/bin/python3
import sys
import sqlite3
conn = sqlite3.connect("/home/jake/Desktop/pas.bak/notes.db")
conn.text_factory = str
c = conn.cursor()
if len(sys.argv) < 3:
     print ("\n******* NOTE - Notes Editor **************")
     print ("Not enough options were passed.")     
     print ("NOTE requires 2 arguments. the first -H , -R , -I , -D or -S .\nThe second can be a period.")
     print ("If printing the database -T also add a filename of your choice ( no quotes required ):")
     print (" Example: NOTE -T Data2Text.txt")   
     print ("If wanting to read all entries use -R . (use the period)") 
     print ("even use the period with help.  -H .   must be entered.")
     print ("******************************************\n")
     sys.exit()
mod = sys.argv[1]
def create():

    import sqlite3
    conn = sqlite3.connect("/home/jake/Desktop/pas.bak/notes.db")
    conn.text_factory = str
    c = conn.cursor()
    c.execute("CREATE VIRTUAL TABLE PROJECT using FTS4 (input)")
    conn.commit()
    text = "Database Created"
    return text

def insert(data,conn=conn, c=c):
    c.execute("INSERT into PROJECT values (?)", (data,))
    for row in c.execute("SELECT ROWID,* FROM PROJECT ORDER BY ROWID DESC LIMIT 1"):
        print ("\nPOST VERIFIED:\n",row[0],row[1])
    conn.commit()
    conn.close()
    return data

def search(data,conn=conn, c=c):
    #for row in c.execute("SELECT ROWID,* FROM PROJECT WHERE input MATCH ?",(data,)):
    #    print ("\nINFO Found Here:",row[0],row[1])
    for row in c.execute("SELECT ROWID,* FROM PROJECT"):
        if data in row[1]:    
            print ("\nINFO Found Here:\n",row[0],row[1])
    #conn.commit()
    #conn.close()
def delete(rowid,conn=conn, c=c):
    c.execute("DELETE FROM PROJECT WHERE rowid = ?", (rowid,))
    conn.commit()
    conn.close()
    text = "ROWID "+rowid+" Deleted"
    return text

def main():
    conn = sqlite3.connect("/home/jake/Desktop/pas.bak/notes.db")
    conn.text_factory = str
    c = conn.cursor()
    for row in c.execute("SELECT rowid, * FROM PROJECT"):
        print (row[0],": ",row[1])

def prtmain(filename):
    fn = open(filename, "w")
    conn = sqlite3.connect("/home/jake/Desktop/notes.db")
    conn.text_factory = str
    c = conn.cursor()
    for row in c.execute("SELECT rowid, * FROM PROJECT"):
        TEXT = "id:"+str(row[0])+"\n"+str(row[1])
        TEXT = str(TEXT)
        TEXT = TEXT.replace('\\n','\n')
        TEXT = "".join(TEXT)
        fn.write(TEXT+'\n----\n')

def HELP():
    TXT = """
    USE: NOTE argv[1] argv[2]
    argv[1] sets the mod:
    -I insert / -D delete / -R read / -H help
    examples:
    Notice the entry is in parenthese.
    -I  to insert "STUFF to be inserted"
    NOTE -I "STUFF to be inserted"
    -D to delete where rowid is 3
    NOTE -D 3
    Notice the period after -R . 
    -R . read all
    To search for the term "current project"
    NOTE -S 3
    -S "current project"
    NOTE -R .
    -H help on options
    NOTE -H .
    """
    print (TXT)

if mod == "-H" or mod == "h":
    HELP()        
if mod == "-R" or mod == "-r":
    main()
if mod == "-I" or mod == "-i":
    data = sys.argv[2]
    insert(data)
if mod == "-D" or mod == "-d":
    rowid = sys.argv[2]
    delete(rowid) 
if mod == "-S" or mod == "-s":
    data = sys.argv[2]
    search(data)       
if mod == "-T":
    filename = sys.argv[2]
    prtmain(filename)
if mod == "-C" or mod == "-c":
    create()
    print (create)
else:
    print ("_________________\n")
    print (sys.argv[2],"Command Completed")
    




# %load /usr/local/bin/pw
#!/usr/bin/python3

import sys
import sqlite3
import datetime
# get the current datetime and store it in a variable
currentDateTime = datetime.datetime.now()
current=str(currentDateTime)
conn = sqlite3.connect("/home/jake/Desktop/pas.bak/pas.db")
conn.text_factory = str
c = conn.cursor()
if len(sys.argv) < 3:
     print ("\n******* NED - Notes Editor **************")
     print ("Not enough options were passed.")     
     print ("NED requires 2 arguments. the first -H , -R , -I , -D or -S .\nThe second can be a period.")
     print ("If printing the database -T also add a filename of your choice ( no quotes required ):")
     print (" Example: NED -T Data2Text.txt")   
     print ("If wanting to read all entries use -R . (use the period)") 
     print ("even use the period with help.  -H .   must be entered.")
     print ("******************************************\n")
     sys.exit()
mod = sys.argv[1]
def create():

    import sqlite3
    conn = sqlite3.connect("/home/jake/Desktop/pas.bak/pas.db")
    conn.text_factory = str
    c = conn.cursor()
    c.execute("CREATE VIRTUAL TABLE PROJECT using FTS4 (input)")
    conn.commit()
    text = "Database Created"
    return text

def insert(data,conn=conn, c=c):
    c.execute("INSERT into PROJECT values (?)", (data+": \n"+current,))
    for row in c.execute("SELECT ROWID,* FROM PROJECT ORDER BY ROWID DESC LIMIT 1"):
        print ("\nPOST VERIFIED:\n",row[0],row[1])
    conn.commit()
    conn.close()
    return data

def search(data,conn=conn, c=c):
    #for row in c.execute("SELECT ROWID,* FROM PROJECT WHERE input MATCH ?",(data,)):
    #    print ("\nINFO Found Here:",row[0],row[1])
    for row in c.execute("SELECT ROWID,* FROM PROJECT"):
        if data in row[1]:    
            print ("\nINFO Found Here:\n",row[0],row[1])
    #conn.commit()
    #conn.close()
def delete(rowid,conn=conn, c=c):
    c.execute("DELETE FROM PROJECT WHERE rowid = ?", (rowid,))
    conn.commit()
    conn.close()
    text = "ROWID "+rowid+" Deleted"
    return text

def main():
    conn = sqlite3.connect("/home/jake/Desktop/pas.bak/pas.db")
    conn.text_factory = str
    c = conn.cursor()
    for row in c.execute("SELECT rowid, * FROM PROJECT"):
        print (row[0],": ",row[1])

def prtmain(filename):
    fn = open(filename, "w")
    conn = sqlite3.connect("/home/jake/Desktop/pas.bak/pas.db")
    conn.text_factory = str
    c = conn.cursor()
    for row in c.execute("SELECT rowid, * FROM PROJECT"):
        TEXT = "id:"+str(row[0])+"\n"+str(row[1])
        TEXT = str(TEXT)
        TEXT = TEXT.replace('\\n','\n')
        TEXT = "".join(TEXT)
        fn.write(TEXT+'\n----\n')

def HELP():
    TXT = """
    USE: NED argv[1] argv[2]
    argv[1] sets the mod:
    -I insert / -D delete / -R read / -H help
    examples:
    Notice the entry is in parenthese.
    -I  to insert "STUFF to be inserted"
    NED -I "STUFF to be inserted"
    -D to delete where rowid is 3
    NED -D 3
    Notice the period after -R . 
    -R . read all
    To search for the term "current project"
    NED -S 3
    -S "current project"
    NED -R .
    -H help on options
    NED -H .
    """
    print (TXT)

if mod == "-H" or mod == "h":
    HELP()        
if mod == "-R" or mod == "-r":
    main()
if mod == "-I" or mod == "-i":
    data = sys.argv[2]
    insert(data)
if mod == "-D" or mod == "-d":
    rowid = sys.argv[2]
    delete(rowid) 
if mod == "-S" or mod == "-s":
    data = sys.argv[2]
    search(data)       
if mod == "-T":
    filename = sys.argv[2]
    prtmain(filename)
if mod == "-C" or mod == "-c":
    create()
    print (create)
else:
    print ("_________________\n")
    print (sys.argv[2],"Command Completed")
    


!rm pas.data

!locate pas.db >> pas.data

# %load pas.data
/home/jack/Desktop/Pas.bak/pas.db
/home/jack/Desktop/Pas.bak/xpas.db
/home/jack/Desktop/Pas.bak/pas.bak/pas.db
/home/jack/Desktop/ReactMultiPageWebsite/pas.db
/home/jack/Desktop/pas.bak/pas.db
/home/jake/Desktop/pas.bak/opas.db
/home/jake/Desktop/pas.bak/pas.db
/home/jake/pas.bak/pas.db
/mnt/73777e11-76da-4fee-ba95-e731ac3ca459/Desktop/Pas.bak/pas.db
/mnt/73777e11-76da-4fee-ba95-e731ac3ca459/Downloads/pas.bak/pas.db
/mnt/73777e11-76da-4fee-ba95-e731ac3ca459/Downloads/xvid/pas.bak/pas.db
/mnt/73777e11-76da-4fee-ba95-e731ac3ca459/pas.bak/pas.db


DATA = open("pas.data", "r").readlines()
for line in DATA:
    line=line.replace("\n","")
    print (line)


import sys
import sqlite3
def main(dbasename):
    conn = sqlite3.connect(dbasename)
    conn.text_factory = str
    c = conn.cursor()
    for row in c.execute("SELECT rowid, * FROM PROJECT"):
        print (row[0],": ",row[1])
dbasename = "/home/jake/Desktop/pas.bak/pas.db"
#dbasename = "/home/jake/Desktop/pas.bak/junk.db"
main(dbasename)

LIST = []
def dbaselist():
    DATA = open("pas.data", "r").readlines()
    for line in DATA:
        line=line.replace("\n","")
        print (line)
        LIST.append(line)
dbaselist()        

print(LIST)

import sys
import sqlite3
info = set()
cnt =0
def main(Dbase):
    conn = sqlite3.connect(Dbase)
    conn.text_factory = str
    c = conn.cursor()
    for row in c.execute("SELECT rowid, * FROM PROJECT"):
        #print (row[1])
        info.add(row[1])

#Dbase = "/home/jack/Desktop/Pas.bak/junk.db"
Dbase = "/home/jake/Desktop/pas.bak/pas.db"
for Dbase in LIST:
    cnt=cnt+1
    try:
        main(Dbase)
        print("CNT: ",cnt,"  ","Dbase: ", Dbase)
    except:
        print(Dbase)
        
        

print(len(info))

!rm /home/jack/Desktop/pas.bak/ALLPAS.db

!fuser /home/jack/Desktop/pas.bak/junk.db

!DD=$(fuser /home/jack/Desktop/pas.bak/junk.db)
!echo $DD

!echo $DD

sudo kill -9 `sudo lsof -t -i:27017`

# %load /usr/local/bin/unlockdb
echo "USE: unlockdb name.db"
DD=$(fuser $1)
echo $DD
kill -9 $DD


!unlockdb /home/jack/Desktop/pas.bak/junk.db

!fuser /home/jack/Desktop/pas.bak/ALLPAS.db



#kill -9 5430

import sqlite3
def verify(dbase):
    conn = sqlite3.connect(dbase)
    conn.text_factory = str
    c = conn.cursor()
    for row in c.execute("SELECT ROWID,* FROM PROJECT ORDER BY input"):
        print (str(row[0])+": "+row[1])
    return 
#dbase = "/home/jack/Desktop/pas.bak/ALLPAS.db" 
dbase = "/home/jack/Desktop/pas.bak/junk.db" 
verify(dbase) 

import sqlite3
def insert(dbase):
    conn = sqlite3.connect(dbase)
    conn.text_factory = str
    c = conn.cursor()
    for data in info:
        c.execute("INSERT into PROJECT values (?)", (data,))
        conn.commit()
def verify():
    conn = sqlite3.connect(dbase)
    conn.text_factory = str
    c = conn.cursor()
    for row in c.execute("SELECT ROWID,* FROM PROJECT ORDER BY ROWID DESC LIMIT 1"):
        print ("\nPOST VERIFIED:\n",row[0],row[1])
    return 
#dbase = "/home/jack/Desktop/pas.bak/ALLPAS.db" 
dbase = "/home/jack/Desktop/pas.bak/junk.db"  
insert(dbase)
verify()

def verify():
    conn = sqlite3.connect(dbase)
    conn.text_factory = str
    c = conn.cursor()
    for row in c.execute("SELECT ROWID,* FROM PROJECT ORDER BY ROWID asc"):
        print (row[0],": ",row[1])
    return 
dbase = "/home/jack/Desktop/pas.bak/ALLPAS.db"    
verify()

conn.close()

!pw -r . >> pw-r.results

# %load pw-r.results
1 :  https://localhost MakeAPassword
2 :  https://app.arukas.io jahral@yahoo.com tr4356hyFrt##
3 :  https://accounts.firefox.com jahral@yahoo.com ThinkPadT$#4848 
4 :  https://developer.vuforia.com jahral@yahoo.com URXH9uE4
5 :  https://www-947.ibm.com jahral@yahoo.com ppXYACKJS22
6 :  https://id.unity.com jahral@yahoo.com URXH9uE4Jd34 
7 :  https://99designs.com jahral@yahoo.com Th#@grte
8 :  https://passport.twitch.tv jacknorthrup PX#xyackjs44 
9 :  https://www.noip.com jackln Hgyt$3$4#RFg 
10 :  https://postimage.org jahral@yahoo.com URXH9uE4Jd34 
11 :  https://signup.wordpress.com myrareyes huhThinkPadT$# 
12 :  https://support.mozilla.org jahral@yahoo.com 54s#@3453fgs445354$#@
13 :  http://127.0.0.1 root ThinkPadT$#
14 :  https://www.sitepoint.com Uyhtg%$3er87uhk 
15 :  https://sso.godaddy.com madhatt3 Mad4stamps
16 :  https://www.db4free.net dbjsengine jURXH9uE4Jd34
17 :  https://www.instagram.com jlnorthrup pxyackjs22
18 :  https://www.ibm.com jahral@yahoo.com ppXYACKJS22
19 :  http://www.gimpusers.com jacknorthrup GCFBq7WzWSOhucujw2D1 
20 :  https://apps.ionic.io jahral@yahoo.com nKnVe3C2nKnVe3C2
21 :  https://adobeid.services.adobe.com jahral@yahoo.com Hgfsr$#32 
22 :  http://localhost localhost ThinkPadT$#
23 :  https://mlab.com jacknorthrupjr Uyhtg3er87
24 :  https://www.bikerplay.net jack.northrup.ph@gmail.com movies4me 
25 :  https://secure.photobucket.com jahral@yahoo.com bucket4ME 
26 :  https://my.justhost.com madhatterstamps.com Mad4stamps
27 :  https://www.codeschool.com jahral@yahoo.com GF54eDe2#$
28 :  https://www.linkedin.com jahral@yahoo.com ThinkPadT$#
29 :  https://www.kelloggsfamilyrewards.com jahral@yahoo.com rrrtttyyy 
30 :  https://login.skype.com northrupjl call2myra1948 
31 :  https://www.free-ebooks.net Pxyackkk
32 :  https://www.xoom.com jahral@yahoo.com +jhTy@@sho$@3# 
33 :  https://signup.netflix.com jahral@yahoo.com movies4me 
34 :  http://www.myspace.com jahral@yahoo.com space6me
35 :  https://www.justhost.com jack@freehandjack.com Mad4stamps
36 :  https://login.yahoo.com gorillajack_2012 gorilla4me
37 :  https://twitter.com ThinkPadT$#
38 :  https://secure.tagged.com biancaakira80@yahoo.com lovely321 
39 :  https://www.showsplash.com jahral@yahoo.com movies4me 
40 :  http://localhost:8000 Jack jacknorthrup 
41 :  http://www.opendiary.com @jacklnorthrup Pxyackjs48
42 :  https://www.redbubble.com jacknorthrup ThinkThinkt43
43 :  https://www.zazzle.com madhatter@madhatterstamps.com Pxyack1948
44 :  https://twitter.com JackLNorthrup tweetIT4me
45 :  https://login.justhost.com jackn@madhatterstamps.com ThinkPadT$#43
46 :  https://login.yahoo.com jahral@yahoo.com Ppxyackjs22Ppxyackjs22@1212
47 :  https://www.evernote.com Pxyackjs
48 :  https://www.networksolutions.com jacknorthrup Pxyackjs23
49 :  https://www.justhost.com sales@vintagecollage.com ThinkPadT$#
50 :  https://secure-beta.photobucket.com bucket4ME 
51 :  https://publisher.ebaypartnernetwork.com 479 7150734 ThinkPadT$#
52 :  https://secure.tagged.com jack@blogblocks.net rubadubdub4
53 :  http://www.quora.com jahral@yahoo.com ThinkPad
54 :  https://cloud.digitalocean.com jahral@yahoo.com HG654Frd123$@
55 :  https://www.stumbleupon.com jahral@yahoo.com movies4me 
56 :  http://quacker.hopto.org:8000 jacknorthrup jacknorthrup 
57 :  https://kunaki.com jahral@yahoo.com Pxyackjs22
58 :  http://112.204.33.155 adminpldt ThinkPadT$#
59 :  https://secure.istockphoto.com thinkpadt43
60 :  http://localhost:3000 jahral password
61 :  http://192.168.1.1 adminpldt 1234567890
62 :  https://publisher.ebaypartnernetwork.com 479 313 1379 PxyackjS22
63 :  http://www.tweetyjill.com 20493 tgs0293k
64 :  http://www.livinginthephilippines.com jahral@yahoo.com pXYACKJS22
65 :  http://www.veoh.com jacklnorthrup movies4me 
66 :  https://idp.godaddy.com jnhaglund Jonkoping13
67 :  https://sellercentral.amazon.com madhatter@madhatterstamps.com PPxyackj24
68 :  https://pragprog.com jahral@yahoo.com PPxyackj24
69 :  https://www.kelloggsfamilyrewards.com jack@jacknorthrup.com rrrtttyyy 
70 :  https://www.zazzle.com Madhatterstamps Pxyack1948
71 :  https://www.linkedin.com Linked4ME 
72 :  https://dotster.com jill@tweetyjill.com Panther53 
73 :  https://login.yahoo.com 54s#@3453fgs445354$#@
74 :  https://www.alibris.com jahral@yahoo.com books4me
75 :  https://secure.dotster.com tweetyjill.com Panther53 
76 :  https://members.cafepress.com sales@vintagecollage.com ThinkPadt43
77 :  https://www.comixology.com jahral ThinkThinkT43
78 :  https://www.playbug.net barbaralynmolnar.com mail4me 
79 :  https://login.yahoo.com hakomi_serye 09304623594
80 :  https://www.free-ebooks.net jahral@yahoo.com xyjmzc 
81 :  http://www.typetrigger.com password type4me 
82 :  https://my.justhost.com jackn ThinkPadT$#43
83 :  https://secure.tagged.com just4you@atcmadness.com ThinkPadT$#
84 :  https://openshift.redhat.com madhatterstamps@gmail.com yt6%r4#4errTT
85 :  http://www.mobileread.com jacknorthrup reedit4me 
86 :  https://login.yahoo.com miz_honeybear1948 MR3954HS
87 :  https://accounts.google.com rick@tweetyjill.com panther53 
88 :  https://www.zazzle.com madhatter ThinkPadT$#
89 :  http://localhost:8000 Myra myrareyes 
90 :  http://www.noip.com jackln Hgyt$3$4#RFg 
91 :  https://publisher.ebaypartnernetwork.com jahral@yahoo.com ThinkPadT$#
92 :  http://www.simplesite.com pictures4U
93 :  https://www.consumeraffairs.com jahral@yahoo.com cricketzte
94 :  http://www.trepstar.com jahral@yahoo.com PPxyackj24
95 :  https://www.npmjs.com jacknorthrup YHt54rd#eE3
96 :  http://localhost:3000 jack quack
97 :  https://login.live.com jahral@yahoo.com 245xbgsT%ytro78f
98 :  https://www.dropbox.com jack@jacknorthrup.com GO@LOWERcase 
99 :  https://www.dropbox.com jahral@yahoo.com GO@LOWERcase 
100 :  https://www.scoop.it jack@jacknorthrup.com tweet4metwo
101 :  https://idp.godaddy.com 30024758 Mad4stamps
102 :  http://localhost:3000 Mreyes ThinkThink
103 :  https://cart.godaddy.com madhatt3 Mad4stamps
104 :  https://weblink.freedomvoice.com calls4USA 
105 :  https://secure.tagged.com taggen_u@yahoo.com mailit4me 
106 :  https://account.live.com 245xbgsT%ytro78f
107 :  https://instagram.com jacklnorthrup Pxyackjs22
108 :  http://www.myrareyes.com jahral@yahoo.com myrat43T$#
109 :  https://www.playbug.net barbaralynmolnar@yahoo.com mail4me 
110 :  https://instagram.com pxyackjs22
111 :  https://adobeid-na1.services.adobe.com Pxyackjs22
112 :  http://epistlerblogs.com @DUSTYdogs
113 :  https://secure.tagged.com mio_corazon@rocketmail.com 0515MYRA
114 :  https://www.ecatmedia.net jack@jacknorthrup.com pxyackjs
115 :  http://112.204.33.155:8000 jacklnjr jacklnjr
116 :  https://cloud.docker.com jahral@yahoo.com chiHI654#hgh 
117 :  https://www.alumniclass.com jahral@yahoo.com ThinkThinkT43
118 :  https://www.zazzle.com ThinkT$#t43
119 :  https://www.facebook.com Mg091192
120 :  https://www.stumbleupon.com jacklnorthrup movies4me 
121 :  https://login.yahoo.com biancaakira80@yahoo.com lovely123 
122 :  https://en.wikipedia.org jacklnorthrup PPxyz2424 
123 :  http://www.xsusenet.com jahral30552 huyivcvn
124 :  https://idaas.iam.ibm.com jahral@yahoo.com HG54@eerF43
125 :  https://www.evernote.com jahral ThinkPadT$#
126 :  https://riouxsvn.com jacknorthrup Shair2u2
127 :  https://step.state.gov jahral22 1little2little 
128 :  https://www.lumosity.com jahral@yahoo.com Shair2u2
129 :  http://www.useralbum.com jahral@yahoo.com lg500g 
130 :  https://idp.godaddy.com madhatt3 Mad4stamps
131 :  http://www.renderosity.com Shair2u2
132 :  https://login.justhost.com jenny@burninglady.com Alady4me2 
133 :  https://login.justhost.com jenny@ladyinnogen.com Alady4me2 
134 :  https://247vidz.com jahral@yahoo.com movies4me 
135 :  http://www.businesscards.com.ph jack@pdfpaperpacks.com Shair2u2
136 :  https://accounts.autodesk.com Shair2u2
137 :  http://tweetychix.com tweetyjill Panther1953
138 :  https://www.dnsstuff.com jacknorthrup tryin4free
139 :  http://jacknorthrup.com @big1ststep
140 :  https://id.heroku.com jahral@yahoo.com Pxyackjs2525 
141 :  https://grubba.net jahral Pxyackjs22
142 :  https://login.justhost.com info@ladyinnogen.com Alady4me2 
143 :  http://kickass.to sunsonic2 sunsonic2 
145 :  https://www.amazingmail.com jack@jacknorthrup.com Pxyackjs@22
146 :  https://accounts.google.com pANTHER@1953 
147 :  http://www.useralbum.com Northrup lg500g 
148 :  http://tweetychix.com admin Panther53 
149 :  http://philippinemarbledpaper.com jahral@yahoo.com ThinkPadT$#
150 :  http://cd-fulfillment.com jahral@yahoo.com PPxyackj24
151 :  http://philippinemarbledpaper.com jack northrup ThinkPADt43
152 :  http://localhost jacknorthrup Shair2u2
153 :  https://www.zazzle.com sales@vintagecollage.com Pxyack1948
154 :  http://www.infectiousvideos.com jacknorthrup_0 Shair2u2
155 :  https://dotster.com jill Panther53 
156 :  http://newrelic.com jahral@yahoo.com Shair2u2
157 :  https://www.facebook.com jill@tweetyjill.com panther53 
158 :  http://www.pdfpaperpacks.com Jack Northrup Shair2u2
159 :  https://secure.ipage.com air2u2@U@ 
160 :  https://www.lwks.com jahral@yahoo.com Think4Think
161 :  https://www.openfilm.com jack@jacknorthrup.com movies4me 
162 :  http://localhost esrybe 1234 
163 :  http://www.the-blueprints.com jacknorthrup ThinkPADt43
164 :  http://www.snotr.com jahral movies4me 
165 :  https://www.keenplay.com jahral@yahoo.com Shair2u2
166 :  http://cpanel.1freehosting.com jahral@yahoo.com Pxyackjs23
167 :  http://localhost Jack Northrup Shair2u2
168 :  http://www.veoh.com jahral movies4me 
169 :  https://my.justhost.com alicein2 ?=84TX7P
170 :  https://riouxsvn.com jacknorthrup Shair2u2
171 :  http://www.lwks.com jahral 23deDR% 
172 :  http://www.ffiles.com jahral ffiles41948
173 :  http://jsfiddle.net Shair2u2
174 :  https://disqus.com madhatterstamps@gmail.com Shair2u2
175 :  https://login.justhost.com jack@myrareyes.com Mad4stamps
176 :  https://sellfy.com jahral@yahoo.com CD-RKING
177 :  http://www.free-ebooks.net jahral@yahoo.com books4me
178 :  https://accounts.google.com jack.northrup.ph@gmail.com Pxyackjs22
179 :  https://portalln.mybro.pldthome.com 1011501685 0720855070
180 :  http://www.wikispaces.com jacknorthrup Shair2u2
181 :  http://www.veoh.com jahral@yahoo.com movies4me 
182 :  http://jacknorthrup.com jack Y(CI0iiK2ydUi6%SOQ
183 :  https://login.justhost.com madhatt3 stAJJ@st13#48two 
184 :  http://www.mysqlforfree.com jacknorthrup Pxyackjs22
185 :  https://account.99designs.com Th#@grte
186 :  https://www.myspace.com space6me
187 :  https://just36.justhost.com:2083 ph OPEN4me 
188 :  http://businesscards.com.ph jack@pdfpaperpacks.com Shair2u2
189 :  http://www.zazzle.com sales@vintagecollage.com aaaaaaaa
190 :  http://localhost admin22 Shair2u2
191 :  https://login.justhost.com jenny@ladyinnogen.com Alady4me2 
192 :  http://pdfpaperpacks.com Jack Northrup Shair2u2
193 :  http://community.mybb.com jacknorthrup MyBB4un4ME
194 :  http://192.168.10.1 admin admin
195 :  http://bookza.org jahral@yahoo.com Shair2u2
196 :  http://www.justcloud.com. jahral@yahoo.com Shair2u2
197 :  http://www.ipage.com jack@pdfpaperpacks.com Shair2u2
198 :  https://my.smart.com.ph wisepro25@%
199 :  http://www.flixya.com jahral@yahoo.com Shair2u2
200 :  http://burninglady.com imalady2ME
201 :  https://www.openstreetmap.org Pxyackjs1919 
202 :  https://www.pinterest.com jack@jacknorthrup.com tseretniP 
203 :  http://www.pdfpaperpacks.com jacknorthrup jn2525dh2 
204 :  http://www.jacknorthrup.com admin PLubVOOC
205 :  http://localhost admin ppxyackjs 
206 :  http://localhost myra@myrareyes.com Shair2u2
207 :  https://gumroad.com jahral@yahoo.com Shair2u2
208 :  https://secure.tagged.com jack@madhatterjack.com time4achange 
209 :  https://market.renderosity.com jahral@yahoo.com Shair2u2
210 :  https://login.justhost.com jacknorthrup@philippinemarbledpaper.com Mad4stamps
211 :  http://www.freehandjack.com jacklnorthrup Pxyackjs22
212 :  http://philippineblogdesign.com admin Pxyackjs22
213 :  http://publisher.dailymotion.com 1000 motionmistress 
214 :  http://www.dailymotion.com jack@jacknorhrup.com Pxyackjs22
215 :  http://www.justcloud.com jack@jacknorthrup.com Shair2u2
216 :  http://panel.byethost.com b32_13770908 bc0dg14h
217 :  https://www.zend.com jahral@yahoo.com #$TdaPknihT
218 :  https://github.com blogblocks Shair2u2
219 :  http://www.gigabyteupload.com jahral movies4me 
220 :  http://philippineblogdesign.com admin22 Pxyackjs22
221 :  http://www.photojeepney.com pdfpaperpacks Shair2u2
222 :  http://www.infectiousvideos.com jacknorthrup Shair2u2
223 :  http://pictify.com jahral@yahoo.com Pxyackjs23
224 :  https://my.justhost.com theadve6 Panther@1953 
225 :  http://www.dailymotion.com jack@jacknorthrup.com Pxyackjs22
226 :  http://www.hotscripts.com jack@blogblocks.net ThinkPadT$#
227 :  http://tweetychix.com Panther53 
228 :  https://streamup.com Movies4me 
229 :  http://blogblocks.net jahral @ThinkPad2
230 :  https://just63.justhost.com:2083 jack Mad5stamps
231 :  http://maggbox.com dex phpphpphp 
232 :  https://secure.webhostinghub.com greenf19 Nov232013!@!@
233 :  http://www.blogblocks.net @ThinkPad2
234 :  http://localhost password
235 :  https://www.facebook.com darwin_northrup@yahoo.com @yam15niwraD 
236 :  http://burninglady.com jenny imaLADY2me#37
237 :  http://www.pdfpaperpacks.com admin nBvrTuy0
238 :  http://www.jacknorthrup.com jack@blog bewye7^%T 
239 :  https://accounts.google.com adelyn.torres.2014 $!)@ADT2
240 :  http://localhost 1234 1234 
241 :  https://secure.webhostinghub.com greenfoodgreenthumb@gmail.com Nov232013!@!@
242 :  http://byethost.com JACKNORTHRUP SHAIR2you2
243 :  http://blogblocks.net jack blogblocks4un4me
244 :  http://99designs.com jahral@yahoo.com Th3@grte
245 :  https://learnable.com jahral@yahoo.com Shair2u2
246 :  http://www.pdfpaperpacks.com Shair2u2pdf
247 :  http://www.jennynorthrup.com jenniferhnorthrup@gmail.com imaFISHER#37 
248 :  http://www.justcloud.com jack@blogblocks.org hp1702hp1702 
249 :  http://blogblocks.org Jack-Northrup @333##ThinkPad 
250 :  https://just63.justhost.com:2083 jack2 TIME4achange 
251 :  http://blogblocks-notetaker.hostei.com @ThinkPad2
252 :  https://scanmyserver.com jack@blogblocks.net aa53f4 
253 :  http://www.openfilm.com jacknorthrup movies4me 
254 :  https://just63.justhost.com:2083 jack1 time4achange 
255 :  https://www.tumblr.com jack@jacknorthrup.com 4u2btumbled
256 :  http://localhost jennynorthrup imaLADY2me#37
257 :  https://mongolab.com jacknorthrup shsh34rTF 
258 :  https://roymondous.wordpress.com jacknorthrup Shair2u2
259 :  https://twitter.com jack@blogblogs.net Mad5stamps
260 :  http://blogblocks.org admin Nov232013!@!@ 
261 :  http://official.dailymotion.com jack@jacknorthrup.com Pxyackjs22
262 :  http://w3schools.invisionzone.com jahral@yahoo.com tryntry2
263 :  http://www.tinymce.com mouseb4mice
264 :  https://secure.ipage.com blogblocksorg GF54eDe2#$
265 :  https://rubyforge.org jacknorthrup PPxyackjs22
266 :  http://www.tagged.com Password Ninasepa@2012
267 :  https://just36.justhost.com:2083 repair imaLADY2me#37
268 :  https://twitter.com jack@blogblocks.net Mad5stamps
269 :  https://just36.justhost.com:2083 wor2 5CK4io19
270 :  https://www.quora.com jahral@yahoo.com ThinkPad
271 :  https://fyp.ebay.com @Shair2u2 
272 :  https://disqus.com jack@jacknorthrup.com 123456zz
273 :  https://www.ipage.com jahral ThinkPadT$#1948 
274 :  https://accounts.google.com blogblocks.org@gmail.com ThinkPadT$#
275 :  https://twitter.com @blogblocks Mad5stamps
276 :  http://www.reddit.com jahral@yahoo.com movies4me 
277 :  https://www.deviantart.com jack@jacknorthrup.com 34gdh89(#&ddt
278 :  http://spoon.net jacknorthrup Shair2u2
279 :  http://dashboard.bloglines.com jack@blogblocks.net @thinkpadT43 
280 :  http://localhost jacklnorthrup 123456 
281 :  https://www.canva.com jahral@yahoo.com canva4more
282 :  http://mail.kazocapital.com jack@jacknorthrup.co movies4me 
283 :  https://just36.justhost.com:2083 scriber Pxyackjs2525 
284 :  http://members.000webhost.com jack@blogblocks.net pxyackjs1212 
285 :  https://just36.justhost.com:2083 Jenny imaLADY2me#37
286 :  https://just63.justhost.com:2083 Mad5stamps
287 :  https://code.tutsplus.com jack@jacknorthrup.com 123456zz
288 :  https://secure.ipage.com amouryacom 4Iam2$%$%dw6 
289 :  https://about.me jack@blogblocks.net hp1702hp1702 
290 :  https://www.facebook.com adelyn.torres2014@gmail.com $!)@ADT2
291 :  http://www.ustream.tv jahral@yahoo.com Movies4me 
292 :  https://login.yahoo.com manilyn.guimbarda Mg091192
293 :  http://liveweave.com jacknorthrup Shair2u2
294 :  https://just63.justhost.com:2083 exp Mad5stamps
295 :  https://secure.ipage.com jennynorthrup.com Jennifer2001@30 
296 :  https://www.tiberiumalliances.com jahral@yahoo.com North1948 
297 :  https://www.justhost.com madhatt3 @Mad4stamps
298 :  http://www.dailymotion.com motionmistress movies4me 
299 :  https://just63.justhost.com:2083 user time4achange 
300 :  http://file-manager.000webhost.com a4828022 pxyackjs1212 
301 :  http://greenfoodgreenthumb.com admin Greece2014!@#!@#
302 :  https://www.4shared.com jsl376sj7UG
303 :  http://filefactory.com @fileit4me
304 :  https://login.yahoo.com hanz.erica Anonymous098 
305 :  http://blogblocks.org JackNorthrup BlogBlocksT$#
306 :  https://disqus.com jahral@yahoo.com PX#xyackjs44 
307 :  http://blogblocks.org admin Nov232013!@!@
308 :  http://blogblocks.org @ThinkPad2
309 :  https://ssl.reddit.com movies4me 
310 :  http://www.surfing-waves.com jacknorthrup Newsit4me 
311 :  http://blogblocks.org phpuser Php4#21Z1948 
312 :  https://www.ipage.com blocks ThinkPadT$#1948 
313 :  https://login.justhost.com epistler_jack1 time4achange 
314 :  http://www.pdfpaperpacks.com jahral@yahoo.com nLK51v8Hjz
315 :  https://just63.justhost.com:2083 videos @time4TUBE
316 :  https://sourceforge.net jacklnorthrup Thinkhp1702
317 :  http://ph.godaddy.com madhatt3 Mad4stamps
318 :  http://login.myappmanager.com jahral@yahoo.com shair2u2
319 :  https://sourceforge.net jacknorthrup Thinkhp1702
320 :  https://www.ipage.com blogblocksorg ThinkPadT$#1948 
321 :  http://liveweave.com jahral@yahoo.com Shair2u2
322 :  https://bitnami.com jahral@yahoo.com Shair2u2
323 :  http://jennynorthrup.com jennynorthrup @run4MUSIC2@rwsm
324 :  http://www.000webhost.com jack@blogblocks.net pxyackjs1212 
325 :  https://www.facebook.com adelyn.torres2014@gmail.com $!)@ADT2
326 :  https://just36.justhost.com:2083 madhatt3_jack 67ygTF54$3rrr
327 :  https://wordpress.com jacknorthrup words4me
328 :  https://secure.webhostinghub.com greenfoodgreenthumb@gmail.com Greece2014!@#!@#
329 :  http://lists.automattic.com Jack Northrup blogblocksT$#
330 :  https://just63.justhost.com:2083 epistler_jackll iueyeryIYG%$^&*&TJJ
331 :  http://jacknorthrup.com @JHu76%fg#dS@33#
332 :  http://jacknorthrup.com jack@blog bewye7^%T 
333 :  https://accounts.google.com myra.n.reyes@gmail.com ThinkPadT$#
334 :  http://cpanel.serversfree.com jahral@yahoo.com shsh34rTF 
335 :  https://login.justhost.com jack 4me2mad 
336 :  https://myspace.com jahral@yahoo.com Uyhtg%$3er87uhk 
337 :  http://myrareyes.com Hakomi_S R2q58VmU0Y6XxqVQht
338 :  http://blogblocks.net JACKjack @DUSTYdogs
339 :  https://spoon.net jacknorthrup Shair2u2
340 :  https://signup.wordpress.com blogblockstwo BcuzIno#2 
341 :  https://accounts.google.com madhatterstamps @Mad4stamps$ 
342 :  https://www.alexa.com 34gdh89(#&ddt
343 :  https://accounts.google.com madhatterstamps@gmail.com @Mad4stamps$ 
344 :  https://ph.godaddy.com madhatt3 Mad4stamps
345 :  https://login.justhost.com madhatter@madhatterstamps.com @Mad4stamps
346 :  https://just36.justhost.com:2083 cpses_ma0BKBTsno 5TyLxgmc8U7ri0QlTI7cTa93sf9nqKQN
347 :  https://accounts.google.com anna.lisa.ph95@gmail.com @^^@li$@
348 :  https://signin.ebay.com madhatterjack @Shair2u2 
349 :  http://www.my-virtual-city.com aaaaaaa %$gajHt3huh
350 :  https://members.cj.com jack@jacknorthrup.com 8LqvCua@
351 :  http://blogblocks.net jacknorthrup @WORD4$3$48s 
352 :  https://ph.godaddy.com madhatt3 Mad4stamps
353 :  https://wordpress.org jacklnorthrup ThinkPadT$#
354 :  https://my.justhost.com host-146317 stAJJ@st13#48two
355 :  https://stackoverflow.com jack@blogblocks.net 34gdh89(#&ddt
356 :  http://localhost root ThinkPadT$#
357 :  http://cpanel.hostinger.ph 34gdh89(#&ddt
358 :  https://my.justhost.com myra@myrareyes.com @ThinkPadT$#22 
359 :  https://secure.ipage.com pdfpaperpackscom 45ytro78fxbgsT% 
360 :  https://login.yahoo.com jahral Ppxyackjs22Ppxyackjs22@1212
361 :  https://accounts.google.com tweetychix.news@gmail.com @Time4Achange
362 :  http://cpanel.hostinger.ph jack@jacknorthrup.com air2u2@U@ 
363 :  https://play.iflix.com jahral@yahoo.com movies4me 
364 :  https://login.mailchimp.com JACKLNORTHRUP air2u2@U@ 
365 :  https://just63.justhost.com:2083 epistler_dfdfsd 45ytro78fxbgs
366 :  https://signin.ebay.ph madhatterjack @Shair2u2 
367 :  http://www.vintagecollage.com admin vlKYOjvl
368 :  https://www.facebook.com hakomi_serye@yahoo.com ThinkPadT43
369 :  http://runningwithscissorsmusic.com jennynorthrup @run4MUSIC2@rwsm
370 :  http://jacknorthrup.com Jack Northrup @JHu76%fg#dS@33#
371 :  https://accounts.google.com blogblocks.org ThinkPadT$#
372 :  https://login.live.com @fgfg%$3JH2243 
373 :  https://www.facebook.com jahral@yahoo.com PPxyackjs22
374 :  http://www.jibjab.com jahral@yahoo.com hp1702hp1702 
375 :  https://my.justhost.com madhatt3 67ygTF54$3rrr
376 :  https://just63.justhost.com:2083 myra HG76gF%$dews 
377 :  https://login.skype.com jack.northrup48 call2myra 
378 :  http://www.webdeveloper.com jacknorthrup Shair2u2
379 :  https://secure.tagged.com hakomi_serye@yahoo.com O9304623594
380 :  https://my.justhost.com jack Thih^%4543f
381 :  https://just63.justhost.com:2083 jackll iueyeryIYG%$^&*&TJJ
382 :  https://just63.justhost.com:2083 epistler_jack Mad5stamps
383 :  https://just36.justhost.com:2083 ThinkPadT$#
384 :  https://my.justhost.com @ThinkPadT$#22 
385 :  https://www.paypal.com jahral@yahoo.com ThinkPadT$#
386 :  https://login.justhost.com jack@jacknorthrup.com Thih^%4543f
387 :  https://login.justhost.com jack2 JHu76%fg#dS@33# 
388 :  https://my.justhost.com host-1278248 34fgjgkHJ865^$ 
389 :  http://philippinemarbledpaper.net46.net air2u2@U@ 
390 :  http://www.my-virtual-city.com Jahral %$gajHt3huh
391 :  http://pdfpaperpacks.com jacknorthrup jn2525dh2 
392 :  http://blogblocks.net @BlogBlocks @WORD4$3$48s 
393 :  https://www.netteller.com dhy%$56hg6S
394 :  https://www.jibjab.com jahral@yahoo.com hp1702hp1702 
395 :  https://just36.justhost.com:2083 madhatt3 &y^jvg(Dfff88
396 :  https://www.amazon.com madhatter@madhatterstamps.com PPxyackj24
397 :  http://www.cj.com jack@jacknorthrup.com 8LqvCua@
398 :  https://codeanywhere.com gFT%458HG 
399 :  http://localhost jack ThinkPadT$#
400 :  https://www.dreamstime.com 34gdh89(#&ddt
401 :  http://eurekametalworks.com eurekametalworks Ready-Ore-Not14 
402 :  https://secure.e-onsoftware.com jahral@yahoo.com efac4b8b
403 :  https://accounts.icontem.com jlnorthrup 57hjg$#fv 
404 :  http://blogblocks.net @WORD4$3$48s 
405 :  https://login.skype.com 245xbgsT%ytro78f
406 :  http://localhost Jack Northrup @JHu76%fg#dS@33#v 
407 :  http://tweetychix.com jack khJ76gHnvbR%e2 
408 :  http://jacknorthrup.com jacknorthrup 556ghfds#$vD 
409 :  http://cpanel.1freehosting.com ajs^%$frF 
410 :  https://just63.justhost.com:2083 epistler_jack1 time4achange 
411 :  https://my.justhost.com myra HG76gF%$dews 
412 :  http://localhost:8080 jacknorthrup 556ghfds#$vD 
413 :  https://www.codeproject.com jack@blogblocks.net GHTY675s
414 :  https://accounts.pandasecurity.com 57hjg$#Fv 
415 :  https://accounts.google.com arkansasgirlfishing@gmail.com wind2theeast 
416 :  https://accounts.google.com jack.northrup.ph Pxyackjs22
417 :  http://www.lwks.com 23deDR% 
418 :  http://presshereeureka.com jennynorthrup #@ALADY2me2$ 
419 :  https://www.deviantart.com jahral@yahoo.com 34gdh89(#&ddt
420 :  http://pdfpaperpacks.com @ThinkPad2
421 :  http://www.cj.com jack@blogblocks.net UyQEi%cE
422 :  https://login.justhost.com myra@myrareyes.com HG76gF%$dews 
423 :  https://secure.tagged.com jahral@yahoo.com ThinkPadT$#
424 :  https://my.pldthome.com ThinkPadT$#
425 :  https://127.0.0.1 password
426 :  http://places.csail.mit.edu jacknorthrup places4me 
427 :  https://sso.redhat.com jahral@yahoo.com ThinkThinkT43
428 :  https://openshift.redhat.com jahral@yahoo.com ThinkThinkT43
429 :  https://gumroad.com 7734 
430 :  https://deepdreamgenerator.com jahral@yahoo.com luciddreams
431 :  https://id.docker.com jacknorthrup chiHI654#hgh 
432 :  https://community.ardour.org jacknorthrup biW5FesXjz
433 :  https://dreamscopeapp.com jahral@yahoo.com neatdreampictures 
434 :  http://www.blogblocks.org @DUSTYdogs
435 :  http://documentslide.com jahral@yahoo.com Documents1948
436 :  https://freemusicarchive.org jacknorthrup publicdomainmusic 
437 :  https://freemusicarchive.org jahral@yahoo.com PUBLICKDOMAINMUSIC
438 :  http://www.fractalforums.com jahral@yahoo.com shyta545dsr
439 :  https://my.justhost.com joann Ninay@2012
440 :  https://secure.tagged.com ninasepa@yahoo.com Ninasepa@2012
441 :  http://127.0.0.1:9000 admin Shair2u2
442 :  http://localhost:8888 password
443 :  https://readthedocs.org madhatterstamps@gmail.com hiphiu54D#
444 :  https://www.linkedin.com jack@blogblocks.net ThinkPadT$#
445 :  https://algorithmia.com jahral@yahoo.com ^5tRf455gh#
446 :  https://www.grammarly.com %%writefile
447 :  https://www.pexels.com jahral@yahoo.com df65SR@r
448 :  https://luarocks.org jacklnorthrup ^5tRf455gh#
449 :  http://interactivepython.org jahral@yahoo.com 42LearnPython
450 :  https://nteract.slack.com df65SR@r
451 :  https://leanpub.com jacklnorthrup 123jacklnorthrup
452 :  https://www.codeproject.com jahral@yahoo.com hnDFMLSd8kkT
453 :  https://www.perlego.com jahral@yahoo.com Freebooks4me 
454 :  https://www.pythonanywhere.com madhatterstamps@gmail.com Think$Me
455 :  https://www.openstreetmap.org 3774190 jack1948lloyd
456 :  https://urs.earthdata.nasa.gov jacknorthrup Lloyd1948 
457 :  https://urs.earthdata.nasa.gov jacklnorthrup Lloyd1948 
458 :  https://www.reddit.com jacklnorthrup Thinkit0ut
459 :  https://just63.justhost.com:2083 jaclnorthrut stAJJ@st13lloy$3
460 :  http://www.ripplear.com madhatterstamps@gmail.com ThinkPip4me
461 :  http://www.ripplear.com a5e4d 
462 :  https://www.eyrieplay.com madhatterstamps@gmail.com Think43 
463 :  https://www.gitbook.com jacknorthrup WeDream4545
464 :  https://forum.processing.org jacknorthrup WeDream4545
465 :  https://www.shadertoy.com jacknorthrup ThinkT$#
466 :  https://www.shadertoy.com jahral@yahoo.com ThinkT$#
467 :  https://www.openprocessing.org jahral@yahoo.com thinkT$#
468 :  https://www.deviantart.com jacknorthrup 34gdh89(#&ddt
469 :  https://login.live.com northrupjl call2myra 
470 :  https://web15.secureinternetbank.com jl222n dhy%$5w6hg6S 
471 :  https://www.genymotion.com jahral@yahoo.com auto43menu
472 :  https://signup.na.leagueoflegends.com jack 437Discover
473 :  https://signup.na.leagueoflegends.com jacklnorthrup 437Discover
474 :  https://dashboard.ionicjs.com jacknorthrup nKnVe3C2nKnVe3C2
475 :  https://dashboard.heroku.com 4ef90f20-8c66-4eab-9b59-7c371ae386ad 
476 :  https://expo.io ExpoStuff expo4me 
477 :  https://expo.io jacklnorthrup ExpoStuff 
478 :  https://snack.expo.io jacklnorthrup ExpoStuff 
479 :  https://clients.databasemart.com jahral@yahoo.com dydyNOT4$##48
480 :  https://www.gigarocket.net jacknorthrup dydyNOT4$##48
481 :  http://www.htaccesstools.com GohartKahanas dydyNOT4$##48
482 :  http://blogblocks.net GohartKahanas MonkMonkENTER
483 :  https://www.sslforfree.com jahral@yahoo.com MonkMonkENTER
484 :  https://just63.justhost.com:2083 blogblocks GtfR433#454
485 :  https://just63.justhost.com:2083 newblock GtfR433#454
486 :  https://cloud.canister.io jacknorthrup GtfR433#454
487 :  https://sourcecontribute.wordpress.com jacknorthrup words4me
488 :  https://www.openstack.org jahral@yahoo.com GtfR433#454
489 :  https://www.openstack.org jahral GtfR433#454
490 :  https://openstackid.org jahral@yahoo.com GtfR433#454
491 :  https://witsbits.com jahal@yahoo.com GtfR433#454
492 :  https://witsbits.com madhatterstamps@gmail.om GtfR433#454
493 :  https://hubic.com jahral@yahoo.com GtfR433#454GtfR433#454 
494 :  http://127.0.0.1:5000 jacknorthrup password
495 :  chrome://FirefoxAccounts 04181e302f8f48e6b83a5c351715d429 {"version":1,"accountData":{"kA":"a5c29234f25c5ca813992f80daf4637a93c51340a75c34d5b96ddc39c60c3a01","kB":"bc7c5cad8317505f84f97697c33332711ecb0dc5bc80ad70da3f38cd1d36432d"}}
496 :  https://www.facebook.com 09568127671 mercedes11
497 :  https://secure.tagged.com manilyn1992guimbarda@gmail.com lovely12345
498 :  https://accounts.google.com manilyn1992guimbarda lovely12345
499 :  https://manage.realvnc.com jahral@yahoo.com ThinkTank@1948 
500 :  https://crm.vpscheap.net jahral@yahoo.com G22tfR433#454
501 :  http://jacknorthrup.com root ThinkPadT$#
502 :  http://www.jacknorthrup.com root ThinkPadT$#
503 :  http://www.jacknorthrup.com root ThinkT2524collage 
504 :  https://www.freelancer.ph jacknorthrup 34gtUH5636$^ 
505 :  https://www.name.com jahral@yahoo.com HgtfR45$3asdd
506 :  http://112.202.78.211 admin 1234 
507 :  http://5jelly.info Northrup Ndmoe1948 
508 :  http://vintagecollage.com JACKjack @DUSTYdogs
509 :  https://www.namecheap.com jacknorthrup JUY65H6ytYt54346
510 :  https://demo.iredmail.org postmaster@test.com iredmail
511 :  https://192.250.236.160:943 openvpn ThinkT2524collage 
512 :  https://portal.privatetunnel.com jahral@yahoo.com ThinkT2524collage 
513 :  https://www.name.com jacknorthrup HgtfR45$3asdd
514 :  http://www.jacknorthrup.com jack ThinkT2524collage 
515 :  https://www.jacknorthrup.com jack ThinkT2524collage 
516 :  http://developer.goibibo.com jacklnorthrup 123password4me 
517 :  https://goibibo.3scale.net jacklnorthrup 123password4me 
518 :  http://freedns.afraid.org jacknorthrup SavenIT!($*) 
519 :  http://localhost:8100 Think!($*)andBORN 
520 :  https://www.floydhub.com jacklnorthrup Y(CI0iiK2ydUi6%SOQ
521 :  https://twitter.com jahral@yahoo.com tweetIT4me
522 :  https://cloud.scaleway.com jahral@yahoo.com 1948dosomething1948
523 :  http://100GBFreeCloudDrivefromDegoo madhatterstamps@gmail.com Mad4Store
524 :  http://blogblocks.net GohartKahanas MonkMonkENTER
525 :  http://genymotion.com jahral@yahoo.com auto43menu
526 :  http://gigarocket.net jacknorthrup dydyNOT4$##48
527 :  http://github.com  blogblocks Shair2u2
528 :  http://Netflix jahral@yahoo.com movies4me
529 :  http://openprocessing.org madhatterstamps@gmail.com openit4me
530 :  http://twitter.com jacklnorthrup tweetIT4me
531 :  http://yahoo.com jahral Ppxyackjs22Ppxyackjs22@1212
532 :  https://www.paperspace.com jahral@yahoo.com Y(CI0iiK2ydUi6%SOQ -Active :Apr 8, 2018')
533 :  https://www.paperspace.com jahral@yahoo.com Y(CI0iiK2ydUi6%SOQ -Active :Apr 8, 2018')
534 :  ftp://epistlerblogs.com jack@epistlerblogs.com ThinkPadT$#43')
535 :  ssh -L 8100:localhost:8888 jack@192.250.236.207 ThinkT2524collage')
536 :  mega hubic GtfR433#454GtfR433#454 ')
537 :  router   B4ihad1212ANdmoe19488491  B4ihad1YCI0iiK2ydUi6SOQ212ANdmoe19488491YCI0iiK2ydUi6SOQdde23234 ')
538 :  1234567890')
539 :  0987654321jack')
540 :  jack-testing123')
541 :  Myra facebook facebook ')
542 :  Myra facebook facebook May 15 1984 ThinkPadT$#43 army seyer')
543 :  http://jsfiddle.net Shair2u2 jahral@yahoo.com')
544 :  iphone user password jahral@yahoo.com ThinkPadT$#43')
545 :  GET PASSWORD: apple https://iforgot.apple.com ThinkPadT$#43 \\ ')
546 :  
@THINKpad4ME  Udemy.com
548 :  
account - burninglady
user - Dad
password - MyKidMadeMeDoIt!
AWS aws Amazon amazon 
549 :  
  https://privacy.com/signup/confirm-email
550 :  
  https://privacy.com/signup/confirm-email
551 :  
  https://privacy.com/signup/confirm-email
552 :  
$x5e$PH4CRKCey5  https://privacy.com/signup/confirm-email
553 :  
https://profile.w3schools.com/
jack.northrup.ph@gmail.com
@tryW3website

554 :  new router: NNP-SQ121 THINKjn1948
555 :  
facebook yorsky_ed@yahoo.com 12131415

556 :  
https://game.gtarcade.com/game/?sid=2625310001&gameId=346
blogblocks.org@gmail.com
@thinkGam3

557 :   
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
https://beta.openai.com/account/api-keys
jacknorthrup.ph@gmail.com
org-VBX7nxFdDknqQWAAYYZbgJiL
jahral

558 :  
https://console.apify.com/sign-up
HYcP4gtM64dfmDg
jahral@yahoo.com

559 :   think@1948PAD
oracle jahral@yahoo.com java '

560 :  
password 4meDiscord1948 jack.northup.ph@gmail.com
JackNorthrup

561 :   twitch Twitch  mylinuxtoybox PX#xyackjs44
562 :   twitch Twitch  mylinuxtoybox PX#xyackjs44
live_134441555_BQlf1HI0SaOykwb48uNdqkLhzcOFmB stream 
563 :   twitch Twitch  mylinuxtoybox PX#xyackjs44
live_134441555_BQlf1HI0SaOykwb48uNdqkLhzcOFmB stream 
access token k6qa770hu3bwg6j17jtlr90k2e9smd
refresh token   ufo6dk51j2nf4rktgfav6ftlk0mjv328x01s8vuafkakwxml49
client id   gp762nuuoqcoxypju8c569th9wz7q5

564 :  
Pxyackjs1948
lbry - jahral@yahoo.com
odysee.com : 
2022-07-12 09:45:12.015811
565 :  github key:
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
ThinkReact: 
2022-07-21 06:45:26.526466
566 :  
jacknort35456GT 
archive.org : 
2022-07-24 12:46:53.228179
567 :  
Get Your S3-Like API Keys
Your S3 access key: zNTF2kiWolLuxRDC
Your S3 secret key: mIO87RqyBjl9afXn
: 
2022-07-24 13:25:44.944206
568 :  ##ThinkPad22TT246479##
What was the model of your first car?
What is the name of the street where you grew up?
ford bond: 
2022-07-26 12:17:02.329357
569 :  ##ThinkPad22TT246479##
What was the model of your first car?
What is the name of the street where you grew up?
ford bond
APple id : 
2022-07-26 12:17:35.281384
_________________

. Command Completed


def insert(data):
    conn.text_factory = str
    c = conn.cursor()
    c.execute("INSERT into PROJECT values (?)", (data+": \n"+current,))
    for row in c.execute("SELECT ROWID,* FROM PROJECT ORDER BY ROWID DESC LIMIT 1"):
        print ("\nPOST VERIFIED:\n",row[0],row[1])

import sys
import sqlite3
info = set()
def main():
    conn = sqlite3.connect("/home/jake/Desktop/pas.bak/notes.db")
    conn.text_factory = str
    c = conn.cursor()
    for row in c.execute("SELECT rowid, * FROM PROJECT"):
        print (row[1])
        info.add(row[1])
main()

import sys
import sqlite3
#info = set()
def main():
    conn = sqlite3.connect("/home/jack/Desktop/pas.bak/notes.db")
    conn.text_factory = str
    c = conn.cursor()
    for row in c.execute("SELECT rowid, * FROM PROJECT"):
        print (row[1])
        info.add(row[1])
main()

!sudo updatedb

import sys
import sqlite3
#info = set()
def main():
    conn = sqlite3.connect("mnt/73777e11-76da-4fee-ba95-e731ac3ca459/Desktop/WORKING/reactwithprisma/starter/notes.db")
    conn.text_factory = str
    c = conn.cursor()
    for row in c.execute("SELECT rowid, * FROM PROJECT"):
        print (row[1])
        info.add(row[1])
main()

# %load NOTE
#!/usr/bin/python3
import sys
import sqlite3
conn = sqlite3.connect("/home/jake/Desktop/pas.bak/notes.db")
conn.text_factory = str
c = conn.cursor()
if len(sys.argv) < 3:
     print ("\n******* NOTE - Notes Editor **************")
     print ("Not enough options were passed.")     
     print ("NOTE requires 2 arguments. the first -H , -R , -I , -D or -S .\nThe second can be a period.")
     print ("If printing the database -T also add a filename of your choice ( no quotes required ):")
     print (" Example: NOTE -T Data2Text.txt")   
     print ("If wanting to read all entries use -R . (use the period)") 
     print ("even use the period with help.  -H .   must be entered.")
     print ("******************************************\n")
     sys.exit()
mod = sys.argv[1]
def create():

    import sqlite3
    conn = sqlite3.connect("/home/jake/Desktop/pas.bak/notes.db")
    conn.text_factory = str
    c = conn.cursor()
    c.execute("CREATE VIRTUAL TABLE PROJECT using FTS4 (input)")
    conn.commit()
    text = "Database Created"
    return text

def insert(data,conn=conn, c=c):
    c.execute("INSERT into PROJECT values (?)", (data,))
    for row in c.execute("SELECT ROWID,* FROM PROJECT ORDER BY ROWID DESC LIMIT 1"):
        print ("\nPOST VERIFIED:\n",row[0],row[1])
    conn.commit()
    conn.close()
    return data

def search(data,conn=conn, c=c):
    #for row in c.execute("SELECT ROWID,* FROM PROJECT WHERE input MATCH ?",(data,)):
    #    print ("\nINFO Found Here:",row[0],row[1])
    for row in c.execute("SELECT ROWID,* FROM PROJECT"):
        if data in row[1]:    
            print ("\nINFO Found Here:\n",row[0],row[1])
    #conn.commit()
    #conn.close()
def delete(rowid,conn=conn, c=c):
    c.execute("DELETE FROM PROJECT WHERE rowid = ?", (rowid,))
    conn.commit()
    conn.close()
    text = "ROWID "+rowid+" Deleted"
    return text

def main():
    conn = sqlite3.connect("/home/jake/Desktop/pas.bak/notes.db")
    conn.text_factory = str
    c = conn.cursor()
    for row in c.execute("SELECT rowid, * FROM PROJECT"):
        print (row[0],": ",row[1])

def prtmain(filename):
    fn = open(filename, "w")
    conn = sqlite3.connect("/home/jake/Desktop/notes.db")
    conn.text_factory = str
    c = conn.cursor()
    for row in c.execute("SELECT rowid, * FROM PROJECT"):
        TEXT = "id:"+str(row[0])+"\n"+str(row[1])
        TEXT = str(TEXT)
        TEXT = TEXT.replace('\\n','\n')
        TEXT = "".join(TEXT)
        fn.write(TEXT+'\n----\n')

def HELP():
    TXT = """
    USE: NOTE argv[1] argv[2]
    argv[1] sets the mod:
    -I insert / -D delete / -R read / -H help
    examples:
    Notice the entry is in parenthese.
    -I  to insert "STUFF to be inserted"
    NOTE -I "STUFF to be inserted"
    -D to delete where rowid is 3
    NOTE -D 3
    Notice the period after -R . 
    -R . read all
    To search for the term "current project"
    NOTE -S 3
    -S "current project"
    NOTE -R .
    -H help on options
    NOTE -H .
    """
    print (TXT)

if mod == "-H" or mod == "h":
    HELP()        
if mod == "-R" or mod == "-r":
    main()
if mod == "-I" or mod == "-i":
    data = sys.argv[2]
    insert(data)
if mod == "-D" or mod == "-d":
    rowid = sys.argv[2]
    delete(rowid) 
if mod == "-S" or mod == "-s":
    data = sys.argv[2]
    search(data)       
if mod == "-T":
    filename = sys.argv[2]
    prtmain(filename)
if mod == "-C" or mod == "-c":
    create()
    print (create)
else:
    print ("_________________\n")
    print (sys.argv[2],"Command Completed")
    




import numpy
import onnx
import os
from onnx import numpy_helper


# Preprocessing: create a Numpy array
numpy_array = numpy.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], dtype=float)
print('Original Numpy array:\n{}\n'.format(numpy.array2string(numpy_array)))

# Convert the Numpy array to a TensorProto
tensor = numpy_helper.from_array(numpy_array)
print('TensorProto:\n{}'.format(tensor))

# Convert the TensorProto to a Numpy array
new_array = numpy_helper.to_array(tensor)
print('After round trip, Numpy array:\n{}\n'.format(numpy.array2string(numpy_array)))

# Save the TensorProto
with open(os.path.join('resources', 'tensor.pb'), 'wb') as f:
    f.write(tensor.SerializeToString())

# Load the TensorProto
new_tensor = onnx.TensorProto()
with open(os.path.join('resources', 'tensor.pb'), 'rb') as f:
    new_tensor.ParseFromString(f.read())
print('After saving and loading, new TensorProto:\n{}'.format(new_tensor))

from __future__ import print_function
%load_ext cython
import Cython
print(Cython.__version__)

import numpy as np
array_1 = np.random.uniform(0, 1000, size=(3000, 2000)).astype(np.intc)
array_2 = np.random.uniform(0, 1000, size=(3000, 2000)).astype(np.intc)
a = 4
b = 3
c = 9

def compute_np(array_1, array_2, a, b, c):
    return np.clip(array_1, 2, 10) * a + array_2 * b + c

timeit_result = %timeit -o compute_np(array_1, array_2, a, b, c)
np_time = timeit_result.average

np_result = compute_np(array_1, array_2, a, b, c)

def clip(a, min_value, max_value):
    return min(max(a, min_value), max_value)


def compute(array_1, array_2, a, b, c):
    """
    This function must implement the formula
    np.clip(array_1, 2, 10) * a + array_2 * b + c

    array_1 and array_2 are 2D.
    """
    x_max = array_1.shape[0]
    y_max = array_1.shape[1]
    
    assert array_1.shape == array_2.shape

    result = np.zeros((x_max, y_max), dtype=array_1.dtype)

    for x in range(x_max):
        for y in range(y_max):

            tmp = clip(array_1[x, y], 2, 10)
            tmp = tmp * a + array_2[x, y] * b
            result[x, y] = tmp + c

    return result

assert np.all(compute(array_1, array_2, a, b, c) == np_result)

timeit_result = %timeit -o compute(array_1, array_2, a, b, c)
py_time = timeit_result.average

def compare_time(current, reference, name):
    ratio = reference/current
    if ratio > 1:
        word = "faster"
    else:
        ratio = 1 / ratio 
        word = "slower"
        
    print("We are", "{0:.1f}".format(ratio), "times", word, "than the", name, "version.")

def print_report(compute_function):
    assert np.all(compute_function(array_1, array_2, a, b, c) == np_result)
    timeit_result = %timeit -o compute_function(array_1, array_2, a, b, c)
    run_time = timeit_result.average
    compare_time(run_time, py_time, "pure Python")
    compare_time(run_time, np_time, "NumPy")

%%cython -a
import numpy as np


def clip(a, min_value, max_value):
    return min(max(a, min_value), max_value)


def compute(array_1, array_2, a, b, c):
    """
    This function must implement the formula
    np.clip(array_1, 2, 10) * a + array_2 * b + c

    array_1 and array_2 are 2D.
    """
    x_max = array_1.shape[0]
    y_max = array_1.shape[1]
    
    assert array_1.shape == array_2.shape

    result = np.zeros((x_max, y_max), dtype=array_1.dtype)

    for x in range(x_max):
        for y in range(y_max):

            tmp = clip(array_1[x, y], 2, 10)
            tmp = tmp * a + array_2[x, y] * b
            result[x, y] = tmp + c

    return result

print_report(compute)

%%cython -a
import numpy as np

# We now need to fix a datatype for our arrays. I've used the variable
# DTYPE for this, which is assigned to the usual NumPy runtime
# type info object.
DTYPE = np.intc

# cdef means here that this function is a plain C function (so faster).
# To get all the benefits, we type the arguments and the return value as int.
cdef int clip(int a, int min_value, int max_value):
    return min(max(a, min_value), max_value)


def compute(array_1, array_2, int a, int b, int c):
    
    # The "cdef" keyword is also used within functions to type variables. It
    # can only be used at the top indentation level (there are non-trivial
    # problems with allowing them in other places, though we'd love to see
    # good and thought out proposals for it).
    cdef Py_ssize_t x_max = array_1.shape[0]
    cdef Py_ssize_t y_max = array_1.shape[1]
    
    assert array_1.shape == array_2.shape
    assert array_1.dtype == DTYPE
    assert array_2.dtype == DTYPE

    result = np.zeros((x_max, y_max), dtype=DTYPE)
    
    # It is very important to type ALL your variables. You do not get any
    # warnings if not, only much slower code (they are implicitly typed as
    # Python objects).
    # For the "tmp" variable, we want to use the same data type as is
    # stored in the array, so we use int because it correspond to np.intc.
    # NB! An important side-effect of this is that if "tmp" overflows its
    # datatype size, it will simply wrap around like in C, rather than raise
    # an error like in Python.

    cdef int tmp
    cdef Py_ssize_t x, y

    for x in range(x_max):
        for y in range(y_max):

            tmp = clip(array_1[x, y], 2, 10)
            tmp = tmp * a + array_2[x, y] * b
            result[x, y] = tmp + c

    return result

print_report(compute)

%%cython -a
import numpy as np

DTYPE = np.intc


cdef int clip(int a, int min_value, int max_value):
    return min(max(a, min_value), max_value)


def compute(int[:, :] array_1, int[:, :] array_2, int a, int b, int c):
     
    cdef Py_ssize_t x_max = array_1.shape[0]
    cdef Py_ssize_t y_max = array_1.shape[1]
    
    assert tuple(array_1.shape) == tuple(array_2.shape)

    result = np.zeros((x_max, y_max), dtype=DTYPE)
    cdef int[:, :] result_view = result

    cdef int tmp
    cdef Py_ssize_t x, y

    for x in range(x_max):
        for y in range(y_max):

            tmp = clip(array_1[x, y], 2, 10)
            tmp = tmp * a + array_2[x, y] * b
            result_view[x, y] = tmp + c

    return result

print_report(compute)

%%cython -a
import numpy as np
cimport cython

DTYPE = np.intc


cdef int clip(int a, int min_value, int max_value):
    return min(max(a, min_value), max_value)

@cython.boundscheck(False)
@cython.wraparound(False)
def compute(int[:, :] array_1, int[:, :] array_2, int a, int b, int c):
     
    cdef Py_ssize_t x_max = array_1.shape[0]
    cdef Py_ssize_t y_max = array_1.shape[1]
    
    assert tuple(array_1.shape) == tuple(array_2.shape)

    result = np.zeros((x_max, y_max), dtype=DTYPE)
    cdef int[:, :] result_view = result

    cdef int tmp
    cdef Py_ssize_t x, y

    for x in range(x_max):
        for y in range(y_max):

            tmp = clip(array_1[x, y], 2, 10)
            tmp = tmp * a + array_2[x, y] * b
            result_view[x, y] = tmp + c

    return result

print_report(compute)

%%cython
import numpy as np
cimport cython

DTYPE = np.intc


cdef int clip(int a, int min_value, int max_value):
    return min(max(a, min_value), max_value)


@cython.boundscheck(False)
@cython.wraparound(False)
def compute(int[:, ::1] array_1, int[:, ::1] array_2, int a, int b, int c):
     
    cdef Py_ssize_t x_max = array_1.shape[0]
    cdef Py_ssize_t y_max = array_1.shape[1]
    
    assert tuple(array_1.shape) == tuple(array_2.shape)

    result = np.zeros((x_max, y_max), dtype=DTYPE)
    cdef int[:, ::1] result_view = result

    cdef int tmp
    cdef Py_ssize_t x, y

    for x in range(x_max):
        for y in range(y_max):

            tmp = clip(array_1[x, y], 2, 10)
            tmp = tmp * a + array_2[x, y] * b
            result_view[x, y] = tmp + c

    return result

print_report(compute)

%%cython -a
# cython: infer_types=True
import numpy as np
cimport cython

DTYPE = np.intc


cdef int clip(int a, int min_value, int max_value):
    return min(max(a, min_value), max_value)


@cython.boundscheck(False)
@cython.wraparound(False)
def compute(int[:, ::1] array_1, int[:, ::1] array_2, int a, int b, int c):
     
    x_max = array_1.shape[0]
    y_max = array_1.shape[1]
    
    assert tuple(array_1.shape) == tuple(array_2.shape)

    result = np.zeros((x_max, y_max), dtype=DTYPE)
    cdef int[:, ::1] result_view = result

    cdef int tmp
    cdef Py_ssize_t x, y

    for x in range(x_max):
        for y in range(y_max):

            tmp = clip(array_1[x, y], 2, 10)
            tmp = tmp * a + array_2[x, y] * b
            result_view[x, y] = tmp + c

    return result

print_report(compute)

%%cython
# cython: infer_types=True
import numpy as np
cimport cython

ctypedef fused my_type:
    int
    double
    long long


cdef my_type clip(my_type a, my_type min_value, my_type max_value):
    return min(max(a, min_value), max_value)


@cython.boundscheck(False)
@cython.wraparound(False)
def compute(my_type[:, ::1] array_1, my_type[:, ::1] array_2, my_type a, my_type b, my_type c):
     
    x_max = array_1.shape[0]
    y_max = array_1.shape[1]
    
    assert tuple(array_1.shape) == tuple(array_2.shape)
    
    if my_type is int:
        dtype = np.intc
    elif my_type is double:
        dtype = np.double
    elif my_type is cython.longlong:
        dtype = np.double
        
    result = np.zeros((x_max, y_max), dtype=dtype)
    cdef my_type[:, ::1] result_view = result

    cdef my_type tmp
    cdef Py_ssize_t x, y

    for x in range(x_max):
        for y in range(y_max):

            tmp = clip(array_1[x, y], 2, 10)
            tmp = tmp * a + array_2[x, y] * b
            result_view[x, y] = tmp + c

    return result

arr_1_float = array_1.astype(np.float64)
arr_2_float = array_2.astype(np.float64)

float_cython_result = compute(arr_1_float, arr_2_float, a, b, c)
float_numpy_result = compute_np(arr_1_float, arr_2_float, a, b, c)

assert np.all(float_cython_result == float_numpy_result)

print_report(compute)

%%cython --force
# distutils: extra_compile_args=-fopenmp
# distutils: extra_link_args=-fopenmp
import numpy as np
cimport cython
from cython.parallel import prange

ctypedef fused my_type:
    int
    double
    long long


# We declare our plain c function nogil
cdef my_type clip(my_type a, my_type min_value, my_type max_value) nogil:
    return min(max(a, min_value), max_value)


@cython.boundscheck(False)
@cython.wraparound(False)
def compute(my_type[:, ::1] array_1, my_type[:, ::1] array_2, my_type a, my_type b, my_type c):
     
    cdef Py_ssize_t x_max = array_1.shape[0]
    cdef Py_ssize_t y_max = array_1.shape[1]
    
    assert tuple(array_1.shape) == tuple(array_2.shape)
    
    if my_type is int:
        dtype = np.intc
    elif my_type is double:
        dtype = np.double
    elif my_type is cython.longlong:
        dtype = np.longlong
        
    result = np.zeros((x_max, y_max), dtype=dtype)
    cdef my_type[:, ::1] result_view = result

    cdef my_type tmp
    cdef Py_ssize_t x, y

    # We use prange here.
    for x in prange(x_max, nogil=True):
        for y in range(y_max):

            tmp = clip(array_1[x, y], 2, 10)
            tmp = tmp * a + array_2[x, y] * b
            result_view[x, y] = tmp + c

    return result

print_report(compute)

import cv2
from PIL import Image
import tensorflow as tf

!ls ../*.png

imagefile= "../sienfield.png"

imc = cv2.imread(imagefile) 
print(imc)

imagefile= "../sienfield.png"
imp = Image.open(imagefile)
pix_val = list(imp.getdata())
print(pix_val[:100])

from PIL import Image
newImg = Image.new('RGB', (10,10), "black")
pixels = newImg.load()
pixels[0,0] = (0,3,0)
newImg.save("point.jpg")
savedImage = Image.open("point.jpg")
pixelsSaved = savedImage.load()

print (pixels[0,0])
print (pixelsSaved[0,0])

savedImage

for i in range(100):
    print (pix_val[i])

!pwd

#!/usr/bin/env python3

import numpy as np
import cv2

# Load image in greyscale
imagefile = "../sienfield.jpg"
im = cv2.imread(imagefile, cv2.IMREAD_GRAYSCALE)
h, w = im.shape
print(h,w)
# Make empty white RGB canvas same size
# I don't think VideoWriter likes greyscale frames, only 3-channel ones
canvas = np.full((h,w,3), 255, np.uint8)

# Create video writer
fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter("output.mp4", fourcc, 30.0, im.shape)
VID = []
cnt = 0
for y in range(h):
    for x in range(w):

        # Copy a grey pixel from image to RGB canvas
        canvas[y,x,:] = im[y,x], im[y,x], im[y,x]
        data = canvas[y,x]
        VID.append(data)
        print(data)#im = Image.fromarray(data)
       # im.save("makevideo/"+str(cnt)+".jpg")
        # Write every 100th frame to video to speed it up
        if cnt % 100 ==  0:
            out.write(canvas)
        # Count frames
        cnt += 1
        

out.release()


print(len(VID))
print (455*415)

lst=['a','b','c']
print("Original list",lst)
new_lst=(','.join(lst))
print("After removing bracket",new_lst)


IMAGEdata = []
for line in VID:
    line0 = str(line)
    line0 = line0.replace("[","")
    line0 = line0.replace("]","")
    IMAGEdata.append(line0)
print (len(IMAGEdata))

from PIL import Image
from numpy import asarray
image = Image.open('flower/1.jpg')
#convert image to numpy array
data = asarray(image)
#data is array format of image


print(IMAGEdata[30:])

from PIL import Image
im = Image.fromarray(IMAGEdata)
im.save("makevideo/your_file.jpg")


#%%writefile sienfield.py
#!/usr/bin/env python3
################################################################################
# Run like this:
#
# ./sienfield.py | ffmpeg -y -f rawvideo -pix_fmt gray8 -video_size 400x400 -i - -c:v h264 -pix_fmt yuv420p video.mov
################################################################################

from PIL import Image
import sys
pixels =[]
# Load image in greyscale
imagefile = "../sienfield.jpg"
im = Image.open(imagefile).convert('L')
h, w = im.size
print(im.size)

# Make empty white canvas same size
canvas = Image.new('L', im.size, 'white')

cnt = 0
for y in range(h):
    for x in range(w):
        # Copy a pixel from image to canvas
        canvas.putpixel((x+cnt,y), im.getpixel((x,y)))
        pixels.append(im.getpixel((x,y)))
        canvas.save("makevideo/"+str(cnt)+".jpg")
        # Write every 100th frame to video to speed it up
        #if cnt % 100 ==  0:
        #    sys.stdout.buffer.write(canvas.tobytes())

        # Count frames
        cnt += 1


#%%writefile sienfield.py
#!/usr/bin/env python3
################################################################################
# Run like this:
#
# ./sienfield.py | ffmpeg -y -f rawvideo -pix_fmt gray8 -video_size 400x400 -i - -c:v h264 -pix_fmt yuv420p video.mov
################################################################################

from PIL import Image
import sys
pixels =[]
# Load image in greyscale
imagefile = "../sienfield.jpg"
im = Image.open(imagefile).convert('L')
h, w = im.size
print(im.size)

# Make empty white canvas same size
canvas = Image.new('L', im.size, 'white')

cnt = 0
for inc in range(h*w):
    x = cnt+1
    y = cnt

    # Copy a pixel from image to canvas
    print(x,y,end="-")
    canvas.putpixel((x,y), im.getpixel((x,y)))
    pixels.append(im.getpixel((x,y)))
    canvas.save("makevideo/"+str(cnt)+".jpg")
    if inc % 415 == 0:
        y = cnt
    cnt += 1


for i in range(0,100):
    if i % 25 ==0:print(i)

print (len(pixels))

from PIL import Image

def newImg():
    img = Image.new('RGB', (100, 100))
    
    img.putpixel((30,60), (155,155,55))
    img.save('sqr.png')

    return img

wallpaper = newImg()
wallpaper.show()

!mkdir makevideo

!./sienfield.py | ffmpeg -y -f rawvideo -pix_fmt gray8 -video_size 400x400 -i - -c:v h264 -pix_fmt yuv420p video.mp4

!chmod +x sienfield.py



#@title Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

!sudo apt -y install libportaudio2
!pip install -q --use-deprecated=legacy-resolver tflite-model-maker
!pip install -q pycocotools
!pip install -q opencv-python-headless==4.1.2.30
!pip uninstall -y tensorflow && pip install -q tensorflow==2.8.0

import numpy as np
import os

from tflite_model_maker.config import QuantizationConfig
from tflite_model_maker.config import ExportFormat
from tflite_model_maker import model_spec
from tflite_model_maker import object_detector

import tensorflow as tf
assert tf.__version__.startswith('2')

tf.get_logger().setLevel('ERROR')
from absl import logging
logging.set_verbosity(logging.ERROR)

spec = model_spec.get('efficientdet_lite0')

train_data, validation_data, test_data = object_detector.DataLoader.from_csv('gs://cloud-ml-data/img/openimage/csv/salads_ml_use.csv')

model = object_detector.create(train_data, model_spec=spec, batch_size=8, train_whole_model=True, validation_data=validation_data)

model.evaluate(test_data)

model.export(export_dir='.')

model.evaluate_tflite('model.tflite', test_data)

#@title Load the trained TFLite model and define some visualization functions

import cv2

from PIL import Image

model_path = 'model.tflite'

# Load the labels into a list
classes = ['???'] * model.model_spec.config.num_classes
label_map = model.model_spec.config.label_map
for label_id, label_name in label_map.as_dict().items():
  classes[label_id-1] = label_name

# Define a list of colors for visualization
COLORS = np.random.randint(0, 255, size=(len(classes), 3), dtype=np.uint8)

def preprocess_image(image_path, input_size):
  """Preprocess the input image to feed to the TFLite model"""
  img = tf.io.read_file(image_path)
  img = tf.io.decode_image(img, channels=3)
  img = tf.image.convert_image_dtype(img, tf.uint8)
  original_image = img
  resized_img = tf.image.resize(img, input_size)
  resized_img = resized_img[tf.newaxis, :]
  resized_img = tf.cast(resized_img, dtype=tf.uint8)
  return resized_img, original_image


def detect_objects(interpreter, image, threshold):
  """Returns a list of detection results, each a dictionary of object info."""

  signature_fn = interpreter.get_signature_runner()

  # Feed the input image to the model
  output = signature_fn(images=image)

  # Get all outputs from the model
  count = int(np.squeeze(output['output_0']))
  scores = np.squeeze(output['output_1'])
  classes = np.squeeze(output['output_2'])
  boxes = np.squeeze(output['output_3'])

  results = []
  for i in range(count):
    if scores[i] >= threshold:
      result = {
        'bounding_box': boxes[i],
        'class_id': classes[i],
        'score': scores[i]
      }
      results.append(result)
  return results


def run_odt_and_draw_results(image_path, interpreter, threshold=0.5):
  """Run object detection on the input image and draw the detection results"""
  # Load the input shape required by the model
  _, input_height, input_width, _ = interpreter.get_input_details()[0]['shape']

  # Load the input image and preprocess it
  preprocessed_image, original_image = preprocess_image(
      image_path,
      (input_height, input_width)
    )

  # Run object detection on the input image
  results = detect_objects(interpreter, preprocessed_image, threshold=threshold)

  # Plot the detection results on the input image
  original_image_np = original_image.numpy().astype(np.uint8)
  for obj in results:
    # Convert the object bounding box from relative coordinates to absolute
    # coordinates based on the original image resolution
    ymin, xmin, ymax, xmax = obj['bounding_box']
    xmin = int(xmin * original_image_np.shape[1])
    xmax = int(xmax * original_image_np.shape[1])
    ymin = int(ymin * original_image_np.shape[0])
    ymax = int(ymax * original_image_np.shape[0])

    # Find the class index of the current object
    class_id = int(obj['class_id'])

    # Draw the bounding box and label on the image
    color = [int(c) for c in COLORS[class_id]]
    cv2.rectangle(original_image_np, (xmin, ymin), (xmax, ymax), color, 2)
    # Make adjustments to make the label visible for all objects
    y = ymin - 15 if ymin - 15 > 15 else ymin + 15
    label = "{}: {:.0f}%".format(classes[class_id], obj['score'] * 100)
    cv2.putText(original_image_np, label, (xmin, y),
        cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

  # Return the final image
  original_uint8 = original_image_np.astype(np.uint8)
  return original_uint8

#@title Run object detection and show the detection results

INPUT_IMAGE_URL = "https://storage.googleapis.com/cloud-ml-data/img/openimage/3/2520/3916261642_0a504acd60_o.jpg" #@param {type:"string"}
DETECTION_THRESHOLD = 0.3 #@param {type:"number"}

TEMP_FILE = '/tmp/image.png'

!wget -q -O $TEMP_FILE $INPUT_IMAGE_URL
im = Image.open(TEMP_FILE)
im.thumbnail((512, 512), Image.ANTIALIAS)
im.save(TEMP_FILE, 'PNG')

# Load the TFLite model
interpreter = tf.lite.Interpreter(model_path=model_path)
interpreter.allocate_tensors()

# Run inference and draw detection result on the local copy of the original file
detection_result_image = run_odt_and_draw_results(
    TEMP_FILE,
    interpreter,
    threshold=DETECTION_THRESHOLD
)

# Show the detection result
Image.fromarray(detection_result_image)

! curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

! echo "deb https://packages.cloud.google.com/apt coral-edgetpu-stable main" | sudo tee /etc/apt/sources.list.d/coral-edgetpu.list

! sudo apt-get update

! sudo apt-get install edgetpu-compiler

NUMBER_OF_TPUS =  1#@param {type:"number"}

!edgetpu_compiler model.tflite --num_segments=$NUMBER_OF_TPUS

!ls -d */

!mkdir publish

import random
from random import randint
from PIL import Image, ImageDraw, ImageFont, ImageChops 
import os
import sys
import time
count = 0
while count < 350:
    #path = r"art%20nouveau/"
    #path = r"vintage%20magazine%20covers/"
    path = r"vintage%20clothing%20patterns/"
    base_image = random.choice([
        x for x in os.listdir(path)
        if os.path.isfile(os.path.join(path, x))
    ])
    filename0=(path+base_image)
    print(filename0)

    #path0 = r"antique%20book%20covers/"
    #path0 = r"vintage%20advertisments/"
    path0 = r"ancient%20manuscript%20art/"
    base_image0 = random.choice([
        x0 for x0 in os.listdir(path0)
        if os.path.isfile(os.path.join(path0, x0))
    ])
    filename00=(path0+base_image0)
    print(filename00)
    
    path1 = r"binary_images/"
    base_image1 = random.choice([
        x1 for x1 in os.listdir(path1)
        if os.path.isfile(os.path.join(path1, x1))
    ])
    mask0=(path1+base_image1)
    print(mask0)



    im0 = Image.open(filename0)
    im1 = im0.resize((720,480), Image.NEAREST)

    im01 = Image.open(filename00)
    im2 = im01.resize((720,480), Image.NEAREST)
    
    im03 = Image.open(mask0)
    im03 = im03.resize((720,480), Image.NEAREST)
    
    
    result1 = ImageChops.composite(im1, im2, im03) 
    
    filename = time.strftime("publish/"+str(count)+"_%Y%m%d%H%M%S.jpg")
    result1.save(filename)
    time.sleep(3)
    count= count +1

# %load finddb.py
#!/home/jack/anaconda2/envs/py35/bin/python
# get the size of a list of files
#getting a list is easy  locate *.db >>sqlitedatabases.txt
import os
f = open('sqlitedatabases.txt', 'r').readlines()
f0 = open('sqlitedatabases-size.txt', 'w')
for line in f:
    line = line.replace('\n','')
    sz = os.path.getsize(line)
    sz=str(sz)
    f0.write(line+', '+sz+'\n')
f0.close() 


# get the size of a list of files
#getting a list is easy  locate *.db >>sqlitedatabases.txt
#print there list
f0 = open('sqlitedatabases-size.txt', 'r').readlines()
for line in f0:
    line = line.replace('\n','')
    line = line.split(', ')
    if int(line[1]) > int(1004135424):
        print line[0]
        print line[1]
#SNIPPETS 450.5kb = 405504      4 398 080   pointillist.db 1004135424

#/home/conda/Desktop/NoteBooks/ssl/SQLite-8a4e1988/test/fuzzdata1.db
!ls /home/conda/Desktop/NoteBooks/ssl/SQLite-8a4e1988/test

from math import sin, cos
x=140
y=240
z=236
i=2
#print sin(x*y)+sin(y*z)+sin(z*x)
print int(abs((cos(x**2-cos(y)-x+y**2)))*200)

from math import sin
x=-240
y=-240
z=-236
i=2
#print sin(x*y)+sin(y*z)+sin(z*x)
print int(abs((cos(x**2-cos(y)-x+y**2)))*200)

from math import sin
x=20
y=20
z=26
i=2
#print sin(x*y)+sin(y*z)+sin(z*x)
int(abs((cos(x**2-cos(y)-x+y**2)))*200)

1.02476410846
2.24526658171

#%%writefile ImageEffectsBot.py
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
import random
from random import randint
from PIL import Image, ImageDraw, ImageFont, ImageChops 
import os
import sys
import markovify
sys.path.insert(0,"/home/jack/anaconda2/envs/py27/lib/python2.7/site-packages")
import twython
from twython import Twython
import time
nap=randint(10,400)
time.sleep(nap)
path = r"publish/"
base_image = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
])
filename0=(path+base_image)


def generate_the_word(infile):
        with open(infile) as f:
            contents_of_file = f.read()
        lines = contents_of_file.splitlines()
        line_number = random.randrange(0, len(lines))
        return lines[line_number]
        #textin = (generate_the_word("wordcloud.txt"))


base = Image.open(filename0).convert('RGBA')
 

txt = Image.new('RGBA', base.size, (255,255,255,0))
def generate_the_word(infile):
    with open(infile) as f:
            contents_of_file = f.read()
    lines = contents_of_file.splitlines()
    line_number = random.randrange(0, len(lines))
    return lines[line_number]
    

#base = Image.open('images/NewFolder/lightning01.jpg').convert('RGBA')
#8 5 4 6 3 2
# make a blank image for the text, initialized to transparent text color
txt = Image.new('RGBA', base.size, (255,255,255,0))

# get a font
fnt = ImageFont.truetype("/home/jack/.fonts/Exo-Black.ttf", 20)
# get a drawing context
d = ImageDraw.Draw(txt)

width, height = base.size
# calculate the x,y coordinates of the text
#marginx = 325
#marginy = 75
marginx = 225
marginy = 50
x = width - marginx
y = height - marginy
signature_ = "The TwitterBot Project" 
d.text((x,y), signature_, font=fnt, fill=(0,0,0,256))

out = Image.alpha_composite(base, txt)
out.save("tmp/tmp.jpg", "JPEG")
# save the image then reopen to put a title
base = Image.open('tmp/tmp.jpg').convert('RGBA')
#8 5 4 6 3 2
# make a blank image for the text, initialized to transparent text color
txt = Image.new('RGBA', base.size, (255,255,255,0))

# get a font
fnt = ImageFont.truetype("/home/jack/.fonts/Exo-Black.ttf", 50)
# get a drawing context
d = ImageDraw.Draw(txt)

width, height = base.size
# calculate the x,y coordinates of the text
#marginx = 325
#marginy = 75
x = 90
y = 10
#generate a title
title = (generate_the_word("titles.txt"))
d.text((x,y), "Python Stuff" , font=fnt, fill=(0,0,0,250))
out2 = Image.alpha_composite(base, txt)
out2.save("tmp/TM_POST.jpg", "JPEG")

filenameP = time.strftime("posted/%Y%m%d%H%M%S.jpg")
out2.save(filenameP, "JPEG")
#removed keys for privacy reasons
CONSUMER_KEY = 'YazCRIfWX4VICiRCOiph08jDL'
CONSUMER_SECRET = 'QOkLHou6NMwkghSHjMFXMdffQKJlDzttKtP6uBCcZ4VlQtvJyc'
ACCESS_KEY = '296906916-AWggjhqpEWIS7EzXXhc2pOPBeCVJczpOm11cQGIf'
ACCESS_SECRET = 'zFrCiyaPt8gCBVVs1bLCmdCSyQQ3DKxT5wHJq2tOu2AMj'

twitter = Twython(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_KEY, ACCESS_SECRET)
#path = 'images/NewFolder'
f = open("art.txt")
text = f.read()
# Build the model.
text_model = markovify.Text(text)
# Print randomly-generated sentences of no more than 140 characters
#http://paulbourke.net/fractals/
STR = (text_model.make_short_sentence(140))
#STR = ("#All_in_One - #WordCloud #Create - Added ability to randomly choose an image background  #Automated")
#PATH = "/home/jack/Desktop/deep-dream-generator/notebooks/STUFF/experiment/experiment8.jpg"
PATH = "tmp/TM_POST.jpg"
# 1 , 2, 3, 12, 5, 15, 8, 6
#photo = open('/home/jack/Desktop/deep-dream-generator/notebooks/images/'+file_list[rnd]+'.jpg','rb')

photo = open(PATH,'rb')
response = twitter.upload_media(media=photo)
twitter.update_status(status=STR, media_ids=[response['media_id']])


import random
from random import randint
from PIL import Image, ImageDraw, ImageFont, ImageChops 
import os
import sys
import time
count = 0
while count < 180:
    path = r"/home/jack/Desktop/pycode/vpython2/TrigonometryBot/images/"
    base_image = random.choice([
        x for x in os.listdir(path)
        if os.path.isfile(os.path.join(path, x))
    ])
    filename0=(path+base_image)

    path0 = r"/home/jack/Desktop/pycode/vpython2/TrigonometryBot/images/"
    base_image0 = random.choice([
        x0 for x0 in os.listdir(path0)
        if os.path.isfile(os.path.join(path0, x0))
    ])
    filename00=(path0+base_image0)



    im0 = Image.open(filename0)
    im1 = im0.resize((640,640), Image.NEAREST)

    im01 = Image.open(filename00)
    im2 = im01.resize((640,640), Image.NEAREST)
    result1 = ImageChops.lighter(im1, im2) 
    filename = time.strftime("build/%Y%m%d%H%M%S.jpg")
    result1.save(filename)
    time.sleep(3)
    count= count +1

import random
from random import randint
from PIL import Image, ImageDraw, ImageFont, ImageChops 
import os
import sys
import time
count = 0
while count < 124:
    path = r"/home/jack/Desktop/pycode/vpython2/TrigonometryBot/-images/"
    base_image = random.choice([
        x for x in os.listdir(path)
        if os.path.isfile(os.path.join(path, x))
    ])
    filename0=(path+base_image)

    path0 = r"/home/jack/Desktop/pycode/vpython2/TrigonometryBot/-images/"
    base_image0 = random.choice([
        x0 for x0 in os.listdir(path0)
        if os.path.isfile(os.path.join(path0, x0))
    ])
    filename00=(path0+base_image0)



    im0 = Image.open(filename0)
    im1 = im0.resize((640,640), Image.NEAREST)

    im01 = Image.open(filename00)
    im2 = im01.resize((640,640), Image.NEAREST)
    
    result1 = ImageChops.screen(im1, im2) 
    
    filename = time.strftime("experiment/%Y%m%d%H%M%S.jpg")
    result1.save(filename)
    time.sleep(3)
    count= count +1

import random
from random import randint
from PIL import Image, ImageDraw, ImageFont, ImageChops 
import os
import sys
import time
count = 0
while count < 154:
    path = r"/home/jack/Desktop/pycode/vpython2/TrigonometryBot/-images/"
    base_image = random.choice([
        x for x in os.listdir(path)
        if os.path.isfile(os.path.join(path, x))
    ])
    filename0=(path+base_image)

    path0 = r"/home/jack/Desktop/pycode/vpython2/TrigonometryBot/-images/"
    base_image0 = random.choice([
        x0 for x0 in os.listdir(path0)
        if os.path.isfile(os.path.join(path0, x0))
    ])
    filename00=(path0+base_image0)



    im0 = Image.open(filename0)
    im1 = im0.resize((640,640), Image.NEAREST)

    im01 = Image.open(filename00)
    im2 = im01.resize((640,640), Image.NEAREST)
    
    result1 = ImageChops.blend(im1, im2, .5) 
    
    filename = time.strftime("blend/%Y%m%d%H%M%S.jpg")
    result1.save(filename)
    time.sleep(3)
    count= count +1

import random
from random import randint
from PIL import Image, ImageDraw, ImageFont, ImageChops 
import os
import sys
import time
count = 0
while count < 24:
    path = r"/home/jack/Desktop/pycode/vpython2/TrigonometryBot/images/"
    base_image = random.choice([
        x for x in os.listdir(path)
        if os.path.isfile(os.path.join(path, x))
    ])
    filename0=(path+base_image)

    path0 = r"/home/jack/Desktop/pycode/vpython2/TrigonometryBot/images/"
    base_image0 = random.choice([
        x0 for x0 in os.listdir(path0)
        if os.path.isfile(os.path.join(path0, x0))
    ])
    filename00=(path0+base_image0)



    im0 = Image.open(filename0)
    im1 = im0.resize((640,640), Image.NEAREST)

    im01 = Image.open(filename00)
    im2 = im01.resize((640,640), Image.NEAREST)
    
    result1 = ImageChops.blend(im1, im2, .5) 
    
    filename = time.strftime("blend/%Y%m%d%H%M%S.jpg")
    result1.save(filename)
    time.sleep(3)
    count= count +1

!

!rm /home/jack/Desktop/pycode/vpython2/TrigonometryBot/-images/image_68704131938.png

from PIL import Image, ImageDraw, ImageFont, ImageChops 
help(ImageChops)

import random
from random import randint
from PIL import Image, ImageDraw, ImageFont, ImageChops 
import os
import sys



path = r"/home/jack/Desktop/pycode/vpython2/TrigonometryBot/images/"
base_image = random.choice([
    x for x in os.listdir(path)
    if os.path.isfile(os.path.join(path, x))
])
filename0=(path+base_image)

path0 = r"/home/jack/Desktop/pycode/vpython2/TrigonometryBot/images/"
base_image0 = random.choice([
    x0 for x0 in os.listdir(path0)
    if os.path.isfile(os.path.join(path0, x0))
])
filename00=(path0+base_image0)