Display BLOB Text
user
def search_dialogue(database_name, search_query):
    try:
        # Connect to SQLite database
        conn = sqlite3.connect(database_name)
        c = conn.cursor()

        # Split search query by commas
        search_terms = search_query.split(',')

        # Initialize results list
        results = []

        # Search by user question
        for term in search_terms:
            c.execute("SELECT * FROM dialogue WHERE user_ChatGPT_PAIR LIKE ?", ('%' + term.strip() + '%',))
            results.extend(c.fetchall())

        # Remove duplicate results
        results = list(set(results))

        # Print or return results
        for result in results:
            print(result)
        
        # Close connection
        conn.close()
    except Exception as e:
        logging.error(f"An error occurred during the search: {e}")

# Example usage
search_dialogue('/home/jack/Desktop/FINAL/dialogueEXP.db', argv[1])
user_ChatGPT_PAIR is a blob how can I display the text 
ChatGPT
To display the text stored in the `user_ChatGPT_PAIR` column, which is a BLOB (Binary Large Object) type in SQLite, you'll need to convert it to a readable format. Here's how you can modify your code to achieve this:

```python
import sqlite3
import logging

def search_dialogue(database_name, search_query):
    try:
        # Connect to SQLite database
        conn = sqlite3.connect(database_name)
        c = conn.cursor()

        # Split search query by commas
        search_terms = search_query.split(',')

        # Initialize results list
        results = []

        # Search by user question
        for term in search_terms:
            c.execute("SELECT * FROM dialogue WHERE user_ChatGPT_PAIR LIKE ?", ('%' + term.strip() + '%',))
            results.extend(c.fetchall())

        # Remove duplicate results
        results = list(set(results))

        # Print or return results
        for result in results:
            # Decode the BLOB data to a readable string
            decoded_text = result[0].decode('utf-8')  # Assuming the text is stored in the first column
            print(decoded_text)
        
        # Close connection
        conn.close()
    except Exception as e:
        logging.error(f"An error occurred during the search: {e}")

# Example usage
search_dialogue('/home/jack/Desktop/FINAL/dialogueEXP.db', argv[1])
```

In this modification, assuming the text is stored in the first column of the `dialogue` table, `result[0]` retrieves the BLOB data, and `decode('utf-8')` decodes it into a readable string. Adjust the column index according to your actual schema if the text is stored in a different column.

