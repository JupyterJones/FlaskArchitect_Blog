Image Creator Functions.
user
from PIL import Image, ImageDraw, ImageFilter
import glob
import random
import time
from datetime import datetime

class ImageCreator:
    def __init__(self):
        self.directorylist = [
            "/home/jack/Desktop/HDD500/collections
ewstuff/*.png",
            "/home/jack/Desktop/HDD500/collections/640x640-alien/*.jpg",
            "/home/jack/Desktop/HDD500/collections/art-nouveau/*.jpg",
            "/home/jack/Desktop/HDD500/collections/backgrounds/*.png",
            "/home/jack/Desktop/HDD500/collections/pop-art-square/*.jpg",
            "/home/jack/Desktop/HDD500/collections/quantized/*.png",
            "/home/jack/Desktop/HDD500/collections/MIX/*.jpg",
            "/home/jack/Desktop/HDD500/collections/640x640_design/*.jpg"
        ]
        self.border_path = "/mnt/HDD500/YOUTUBE/assets/canvas-boarder.png"
        self.save_directory = "junk/"


    def circle_blur(self, file_name, count):
        im1 = Image.open(file_name)
        im1 = im1.resize((600, 600), Image.BICUBIC)
        im2 = Image.new("RGBA", im1.size, (0, 0, 0, 0))
        mask = Image.new("L", im1.size, 0)
        draw = ImageDraw.Draw(mask)
        draw.ellipse((25, 25, 575, 575), fill=255)
        im = Image.composite(im1, im2, mask)
        mask_blur = mask.filter(ImageFilter.GaussianBlur(15))
        im = Image.composite(im1, im2, mask_blur)
        timestr = time.strftime('%Y%m%d-%H%M%S')
        file_path = f"{self.save_directory}{timestr}{count + 1}X.png"
        im.save(file_path)
        return im
    def get_images(self):
        M = random.sample(self.directorylist, 3)
        M1 = random.choice(glob.glob(M[0]))
        M2 = random.choice(glob.glob(M[1]))
        M3 = random.choice(glob.glob(M[2]))
        return M1, M2, M3

    def save_file(self):
        now = datetime.now()
        timestr = time.strftime('%Y%m%d-%H%M%S')
        milliseconds = now.microsecond // 1000
        file_name = f"{self.save_directory}{timestr}{str(milliseconds).zfill(3)}__.png"
        return file_name


    def create_image(self):
        M1, M2, M3 = self.get_images()
        img1 = Image.open(M1).convert("RGBA")
        img1 = img1.resize((640, 640), Image.BICUBIC)
        alpha = img1.split()[3]
        alpha = Image.eval(alpha, lambda a: 85)
        img1.putalpha(alpha)
        img2 = Image.open(M2).convert("RGBA")
        img2 = img2.resize((640, 640), Image.BICUBIC)
        alpha = img2.split()[3]
        alpha = Image.eval(alpha, lambda a: 85)
        img2.putalpha(alpha)
        img3 = Image.open(M3).convert("RGBA")
        img3 = img3.resize((640, 640), Image.BICUBIC)
        alpha = img3.split()[3]
        alpha = Image.eval(alpha, lambda a: 85)
        img3.putalpha(alpha)
        result = Image.alpha_composite(Image.alpha_composite(img1, img2), img3)
        im4 = Image.new("RGBA", img3.size, (255, 255, 255, 255))
        im4.paste(result, (0, 0))
        im4 =im4.convert("RGB")
        # Display the resulting image with no transparency
        List5 = glob.glob("/home/jack/Desktop/HDD500/collections/art-nouveau/*.jpg")
        FILEname = random.choice(List5)
        img5 = Image.open(FILEname).convert("RGBA")
        saveDirectory = "junk/"
        count = 1
        print(FILEname)
        im = self.circle_blur(FILEname, count)
        #im = circle_blur(FILEname,saveDirectory,count)
        im = im.resize((250,250),Image.BICUBIC)
        loc = 640//2-250
        im4.paste(im, (loc, loc),im)
        Border = "/mnt/HDD500/YOUTUBE/assets/canvas-boarder.png"
        border = Image.open(Border)
        border = border.resize((im4.size),Image.BICUBIC).convert("RGBA")
        im4.paste(border, (0,0),border)
        im4.save(self.save_file())
        print("A copy of this image is saved as: ",save_file())
        return im4                                                                                                                How do I run this in Jupyter notebook ?
ChatGPT


To run this code in Jupyter notebook, you need to first create a new notebook and then copy and paste the code into a code cell. Make sure you have all the necessary packages installed, such as PIL (Pillow).

To run the code, simply click on the first line of the code cell to select it, and then press Shift+Enter or click on the "Run" button in the Jupyter toolbar. This will run the entire script and output the final image file in the specified save directory.

You can also run each function individually by selecting the function and pressing Shift+Enter. For example, you can run the `create_image()` function by selecting the function and pressing Shift+Enter. This will generate and save a new image based on the input images in the `directorylist`.
user
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Cell In[10], line 1
----> 1 create_image()

NameError: name 'create_image' is not defined
ChatGPT
You need to first create an instance of the `ImageCreator` class and then call the `create_image()` method on that instance. Here's an example:

```
from PIL import Image, ImageDraw, ImageFilter
import glob
import random
import time
from datetime import datetime

class ImageCreator:
    def __init__(self):
        self.directorylist = [
            "/home/jack/Desktop/HDD500/collections
ewstuff/*.png",
            "/home/jack/Desktop/HDD500/collections/640x640-alien/*.jpg",
            "/home/jack/Desktop/HDD500/collections/art-nouveau/*.jpg",
            "/home/jack/Desktop/HDD500/collections/backgrounds/*.png",
            "/home/jack/Desktop/HDD500/collections/pop-art-square/*.jpg",
            "/home/jack/Desktop/HDD500/collections/quantized/*.png",
            "/home/jack/Desktop/HDD500/collections/MIX/*.jpg",
            "/home/jack/Desktop/HDD500/collections/640x640_design/*.jpg"
        ]
        self.border_path = "/mnt/HDD500/YOUTUBE/assets/canvas-boarder.png"
        self.save_directory = "junk/"


    def circle_blur(self, file_name, count):
        im1 = Image.open(file_name)
        im1 = im1.resize((600, 600), Image.BICUBIC)
        im2 = Image.new("RGBA", im1.size, (0, 0, 0, 0))
        mask = Image.new("L", im1.size, 0)
        draw = ImageDraw.Draw(mask)
        draw.ellipse((25, 25, 575, 575), fill=255)
        im = Image.composite(im1, im2, mask)
        mask_blur = mask.filter(ImageFilter.GaussianBlur(15))
        im = Image.composite(im1, im2, mask_blur)
        timestr = time.strftime('%Y%m%d-%H%M%S')
        file_path = f"{self.save_directory}{timestr}{count + 1}X.png"
        im.save(file_path)
        return im
    
    def get_images(self):
        M = random.sample(self.directorylist, 3)
        M1 = random.choice(glob.glob(M[0]))
        M2 = random.choice(glob.glob(M[1]))
        M3 = random.choice(glob.glob(M[2]))
        return M1, M2, M3

    def save_file(self):
        now = datetime.now()
        timestr = time.strftime('%Y%m%d-%H%M%S')
        milliseconds = now.microsecond // 1000
        file_name = f"{self.save_directory}{timestr}{str(milliseconds).zfill(3)}__.png"
        return file_name


    def create_image(self):
        M1, M2, M3 = self.get_images()
        img1 = Image.open(M1).convert("RGBA")
        img1 = img1.resize((640, 640), Image.BICUBIC)
        alpha = img1.split()[3]
        alpha = Image.eval(alpha, lambda a: 85)
        img1.putalpha(alpha)
        img2 = Image.open(M2).convert("RGBA")
        img2 = img2.resize((640, 640), Image.BICUBIC)
        alpha = img2.split()[3]
        alpha = Image.eval(alpha, lambda a: 85)
        img2.putalpha(alpha)
        img3 = Image.open(M3).convert("RGBA")
        img3 = img3.resize((640, 640), Image.BICUBIC)
        alpha = img3.split()[3
user
create an instance of the ImageCreator class 
ChatGPT
To create an instance of the `ImageCreator` class, you can simply call the class and assign it to a variable like this:

```
image_creator = ImageCreator()
```

This will create a new instance of the `ImageCreator` class and assign it to the variable `image_creator`. You can then use this instance to call any of the methods defined in the class. For example, to create a new image, you can call the `create_image` method like this:

```
image = image_creator.create_image()
```

This will create a new image using the `create_image` method and assign it to the `image` variable.
user
NameError                                 Traceback (most recent call last)
Cell In[11], line 2
      1 image_creator = ImageCreator()
----> 2 image = image_creator.create_image()

Cell In[9], line 90, in ImageCreator.create_image(self)
     88 im4.paste(border, (0,0),border)
     89 im4.save(self.save_file())
---> 90 print("A copy of this image is saved as: ",save_file())
     91 return im4

NameError: name 'save_file' is not defined
ChatGPT
The error is caused because `save_file()` is not defined in the `ImageCreator` class. Instead, you need to use `self.save_file`. Try replacing `save_file()` with `self.save_file` in the `create_image` method:

```
class ImageCreator:
    def __init__(self, color="white", size=(500,500), save_path="output.jpg"):
        self.color = color
        self.size = size
        self.save_path = save_path

    def create_image(self):
        im = Image.new("RGB", self.size, self.color)
        draw = ImageDraw.Draw(im)
        text = "Sample Text"
        textwidth, textheight = draw.textsize(text)
        x = (self.size[0] - textwidth) / 2
        y = (self.size[1] - textheight) / 2
        draw.text((x, y), text)
        im2 = im.filter(ImageFilter.BLUR)
        im3 = im.filter(ImageFilter.CONTOUR)
        border = Image.new('RGB', self.size, 'black')
        im4 = ImageOps.crop(im, border=10)
        im4.paste(border, (0,0),border)
        im4.save(self.save_path)
        print("A copy of this image is saved as:", self.save_path)
        return im4
```

Then, create a new instance of the `ImageCreator` class and call the `create_image()` method to generate the image:

```
image_creator = ImageCreator()
image = image_creator.create_image()
```
user
from PIL import Image, ImageDraw, ImageFilter
import glob
import random
import time
from datetime import datetime

class ImageCreator:
    def __init__(self, color="white", size=(500,500), save_path="output.jpg"):
        self.color = color
        self.size = size
        self.save_path = save_path
        self.directorylist = [
            "/home/jack/Desktop/HDD500/collections
ewstuff/*.png",
            "/home/jack/Desktop/HDD500/collections/640x640-alien/*.jpg",
            "/home/jack/Desktop/HDD500/collections/art-nouveau/*.jpg",
            "/home/jack/Desktop/HDD500/collections/backgrounds/*.png",
            "/home/jack/Desktop/HDD500/collections/pop-art-square/*.jpg",
            "/home/jack/Desktop/HDD500/collections/quantized/*.png",
            "/home/jack/Desktop/HDD500/collections/MIX/*.jpg",
            "/home/jack/Desktop/HDD500/collections/640x640_design/*.jpg"
        ]
        self.border_path = "/mnt/HDD500/YOUTUBE/assets/canvas-boarder.png"
        self.save_directory = "junk/"


    def circle_blur(self, file_name, count):
        im1 = Image.open(file_name)
        im1 = im1.resize((600, 600), Image.BICUBIC)
        im2 = Image.new("RGBA", im1.size, (0, 0, 0, 0))
        mask = Image.new("L", im1.size, 0)
        draw = ImageDraw.Draw(mask)
        draw.ellipse((25, 25, 575, 575), fill=255)
        im = Image.composite(im1, im2, mask)
        mask_blur = mask.filter(ImageFilter.GaussianBlur(15))
        im = Image.composite(im1, im2, mask_blur)
        timestr = time.strftime('%Y%m%d-%H%M%S')
        file_path = f"{self.save_directory}{timestr}{count + 1}X.png"
        im.save(file_path)
        return im
    def get_images(self):
        M = random.sample(self.directorylist, 3)
        M1 = random.choice(glob.glob(M[0]))
        M2 = random.choice(glob.glob(M[1]))
        M3 = random.choice(glob.glob(M[2]))
        return M1, M2, M3

    def save_file(self):
        now = datetime.now()
        timestr = time.strftime('%Y%m%d-%H%M%S')
        milliseconds = now.microsecond // 1000
        file_name = f"{self.save_directory}{timestr}{str(milliseconds).zfill(3)}__.png"
        return file_name


    def create_image(self):
        M1, M2, M3 = self.get_images()
        img1 = Image.open(M1).convert("RGBA")
        img1 = img1.resize((640, 640), Image.BICUBIC)
        alpha = img1.split()[3]
        alpha = Image.eval(alpha, lambda a: 85)
        img1.putalpha(alpha)
        img2 = Image.open(M2).convert("RGBA")
        img2 = img2.resize((640, 640), Image.BICUBIC)
        alpha = img2.split()[3]
        alpha = Image.eval(alpha, lambda a: 85)
        img2.putalpha(alpha)
        img3 = Image.open(M3).convert("RGBA")
        img3 = img3.resize((640, 640), Image.BICUBIC)
        alpha = img3.split()[3]
        alpha = Image.eval(alpha, lambda a: 85)
        img3.putalpha(alpha)
        result = Image.alpha_composite(Image.alpha_composite(img1, img2), img3)
        im4 = Image.new("RGBA", img3.size, (255, 255, 255, 255))
        im4.paste(result, (0, 0))
        im4 =im4.convert("RGB")
        # Display the resulting image with no transparency
        List5 = glob.glob("/home/jack/Desktop/HDD500/collections/art-nouveau/*.jpg")
        FILEname = random.choice(List5)
        img5 = Image.open(FILEname).convert("RGBA")
        saveDirectory = "junk/"
        count = 1
        print(FILEname)
        im = self.circle_blur(FILEname, count)
        #im = circle_blur(FILEname,saveDirectory,count)
        im = im.resize((250,250),Image.BICUBIC)
        loc = 640//2-250
        im4.paste(im, (loc, loc),im)
        Border = "/mnt/HDD500/YOUTUBE/assets/canvas-boarder.png"
        border = Image.open(Border)
        border = border.resize((im4.size),Image.BICUBIC).convert("RGBA")
        im4.paste(border, (0,0),border)
        im4.save(self.save_file())
        print("A copy of this image is saved as: ",save_file())
        return im4
image_creator = ImageCreator()
image = image_creator.create_image()
NameError                                 Traceback (most recent call last)
Cell In[16], line 2
      1 image_creator = ImageCreator()
----> 2 image = image_creator.create_image()

Cell In[15], line 93, in ImageCreator.create_image(self)
     91 im4.paste(border, (0,0),border)
     92 im4.save(self.save_file())
---> 93 print("A copy of this image is saved as: ",save_file())
     94 return im4

NameError: name 'save_file' is not defined

ChatGPT
There is a NameError in the code. The error is due to calling `save_file()` method with self in the `create_image()` method on line 92 but forgetting to add `self.` to the method call. This causes Python to treat `save_file()` as an undefined variable instead of a method of the ImageCreator class.

To fix the error, change `save_file()` to `self.save_file()` on line 92 in the `create_image()` method. This will ensure that the method is called on the object instance rather than treated as an undefined variable.

Here is the corrected code:

```
class ImageCreator:
    def __init__(self, color="white", size=(500,500), save_path="output.jpg"):
        self.color = color
        self.size = size
        self.save_path = save_path
        self.directorylist = [
            "/home/jack/Desktop/HDD500/collections
ewstuff/*.png",
            "/home/jack/Desktop/HDD500/collections/640x640-alien/*.jpg",
            "/home/jack/Desktop/HDD500/collections/art-nouveau/*.jpg",
            "/home/jack/Desktop/HDD500/collections/backgrounds/*.png",
            "/home/jack/Desktop/HDD500/collections/pop-art-square/*.jpg",
            "/home/jack/Desktop/HDD500/collections/quantized/*.png",
            "/home/jack/Desktop/HDD500/collections/MIX/*.jpg",
            "/home/jack/Desktop/HDD500/collections/640x640_design/*.jpg"
        ]
        self.border_path = "/mnt/HDD500/YOUTUBE/assets/canvas-boarder.png"
        self.save_directory = "junk/"

    def circle_blur(self, file_name, count):
        im1 = Image.open(file_name)
        im1 = im1.resize((600, 600), Image.BICUBIC)
        im2 = Image.new("RGBA", im1.size, (0, 0, 0, 0))
        mask = Image.new("L", im1.size, 0)
        draw = ImageDraw.Draw(mask)
        draw.ellipse((25, 25, 575, 575), fill=255)
        im = Image.composite(im1, im2, mask)
        mask_blur = mask.filter(ImageFilter.GaussianBlur(15))
        im = Image.composite(im1, im2, mask_blur)
        timestr = time.strftime('%Y%m%d-%H%M%S')
        file_path = f"{self.save_directory}{timestr}{count + 1}X.png"
        im.save(file_path)
        return im

    def get_images(self):
        M = random.sample(self.directorylist, 3)
        M1 = random.choice(glob.glob(M[0]))
        M2 = random.choice(glob.glob(M[1]))
        M3 = random.choice(glob.glob(M[2]))
        return M1, M2, M3

    def save_file(self):
        now = datetime.now()
        timestr = time.strftime('%Y%m%d-%H%M%S')
        milliseconds = now.microsecond // 1000
        file_name = f"{self.save_directory}{timestr}{str(milliseconds).zfill(3)}__.png"
        return file_name

    def create_image(self):
        M1, M2, M3 = self.get_images()
        img1 = Image.open(M1).convert("RGBA")
        img1 = img1.resize((640, 640), Image.BICUBIC)
        alpha = img1.split()[3]
        alpha = Image.eval(alpha, lambda a: 85)
        img1.putalpha(alpha)
       

