Video Clips with Sound
user
import os
import random
import shutil
import uuid
from moviepy.editor import VideoFileClip, concatenate_videoclips

def get_random_video_clips(dir_path, num_clips=58, clip_duration=1, target_size=(512, 666), default_fps=30):
    video_files = []
    
    for root, dirs, files in os.walk(dir_path):
        for file in files:
            if file.endswith(('.mp4', '.avi', '.mkv')):
                video_files.append(os.path.join(root, file))

    num_videos = len(video_files)
    
    if num_videos < num_clips:
        print(f"Not enough videos ({num_videos}) in the directory.")
        return None
    
    random_clips = []
    for _ in range(num_clips):
        random_video = random.choice(video_files)
        try:
            video_clip = VideoFileClip(random_video)
            duration = video_clip.duration
            start_time = random.uniform(0, duration - clip_duration)
            end_time = start_time + clip_duration
            random_clip = video_clip.subclip(start_time, end_time)
            random_clip_resized = random_clip.resize(target_size)
            random_clips.append(random_clip_resized)
        except Exception as e:
            print(f"Error processing {random_video}: {e}")
    
    # Set the default frame rate for all clips
    for clip in random_clips:
        clip.fps = default_fps
    
    return random_clips
------------
i want only clips that contain sound
ChatGPT
Certainly, Jack! Let's modify your code to select only video clips that contain sound. We'll use the `audio` attribute of the `VideoFileClip` to check if a clip has audio. Here's the modified script with detailed explanations and added logging:

```python
import os
import random
import shutil
import uuid
from moviepy.editor import VideoFileClip, concatenate_videoclips

import logging

# Set up logging configuration
logging.basicConfig(filename='video_processing.log', level=logging.DEBUG)

def get_random_video_clips_with_sound(dir_path, num_clips=58, clip_duration=1, target_size=(512, 666), default_fps=30):
    video_files = []
    
    for root, dirs, files in os.walk(dir_path):
        for file in files:
            if file.endswith(('.mp4', '.avi', '.mkv')):
                video_files.append(os.path.join(root, file))

    num_videos = len(video_files)
    
    if num_videos < num_clips:
        logging.warning(f"Not enough videos ({num_videos}) in the directory for the requested number of clips ({num_clips}).")

    random_clips = []
    for _ in range(num_clips):
        random_video = random.choice(video_files)
        try:
            video_clip = VideoFileClip(random_video)

            # Check if the video clip has audio
            if video_clip.audio is not None:
                duration = video_clip.duration
                start_time = random.uniform(0, duration - clip_duration)
                end_time = start_time + clip_duration
                random_clip = video_clip.subclip(start_time, end_time)
                random_clip_resized = random_clip.resize(target_size)
                random_clips.append(random_clip_resized)
            else:
                logging.info(f"Skipped {random_video} as it does not contain audio.")
        except Exception as e:
            logging.error(f"Error processing {random_video}: {e}")

    # Set the default frame rate for all clips
    for clip in random_clips:
        clip.fps = default_fps
    
    return random_clips
```

Now, this modified script will select only video clips that contain audio. The log file (`video_processing.log`) will capture information about the processing, including warnings and errors. Feel free to adjust the logging levels as needed for your debugging. Let me know if you have any questions or if there's anything else you'd like to add!

