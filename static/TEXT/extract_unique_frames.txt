
user
import cv2
import numpy as np
import os
import imagehash
from PIL import Image

def calculate_hash(frame):
    # Convert frame to grayscale
    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Calculate hash using average hashing (aHash)
    hash_value = imagehash.average_hash(Image.fromarray(gray_frame))

    return hash_value

def extract_unique_frames(input_video_path):
    cap = cv2.VideoCapture(input_video_path)
    fps = cap.get(cv2.CAP_PROP_FPS)

    unique_frames = []
    prev_hash = None

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # Calculate hash of the frame
        hash_value = calculate_hash(frame)

        # Check if the hash is different from the previous frame
        if prev_hash is None or hash_value != prev_hash:
            unique_frames.append(frame)
            prev_hash = hash_value

    cap.release()
    return unique_frames, fps

def create_zoom_video(frames, output_video_path, fps, zoom_factor=1.5, num_frames_zoom=50):
    # Define video codec and create VideoWriter object
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    video_writer = cv2.VideoWriter(output_video_path, fourcc, fps, (frames[0].shape[1], frames[0].shape[0]))

    for frame in frames:
        # Apply zoom effect to the frame
        zoomed_frames = interpolate_zoom(frame, zoom_factor, num_frames_zoom)

        # Add frames to video writer
        for zoomed_frame in zoomed_frames:
            video_writer.write(zoomed_frame)

    video_writer.release()

def interpolate_zoom(frame, zoom_factor, num_frames_zoom):
    zoomed_frames = []
    for i in range(num_frames_zoom):
        # Interpolate zoom factor
        current_zoom = 1 + (zoom_factor - 1) * (i / (num_frames_zoom - 1))

        # Apply zoom effect to the frame
        zoomed_frame = zoom_frame(frame, current_zoom)

        zoomed_frames.append(zoomed_frame)

    return zoomed_frames

def zoom_frame(frame, zoom_factor):
    # Get frame dimensions
    height, width = frame.shape[:2]

    # Compute new dimensions after zooming
    new_width = int(width * zoom_factor)
    new_height = int(height * zoom_factor)

    # Resize the frame to apply the zoom effect
    zoomed_frame = cv2.resize(frame, (new_width, new_height))

    # Compute cropping coordinates to maintain original size and zoom to center
    crop_x1 = (new_width - width) // 2
    crop_x2 = crop_x1 + width
    crop_y1 = (new_height - height) // 2
    crop_y2 = crop_y1 + height

    # Crop the zoomed frame to original dimensions
    zoomed_frame = zoomed_frame[crop_y1:crop_y2, crop_x1:crop_x2]

    return zoomed_frame

if __name__ == "__main__":
    input_video = "video.mp4"
    output_video_directory = "zoomed_videos"

    # Create output directory if it doesn't exist
    if not os.path.exists(output_video_directory):
        os.makedirs(output_video_directory)

    # Extract unique frames from the input video
    unique_frames, fps = extract_unique_frames(input_video)

    # Create zoomed video for each frame
    for i, frame in enumerate(unique_frames):
        output_video_path = os.path.join(output_video_directory, f"zoomed_video_{i}.mp4")
        create_zoom_video([frame], output_video_path, fps, zoom_factor=1.5, num_frames_zoom=50)
please convert to flask app
choose mp4 from computer in index.html
ChatGPT
To convert this script into a Flask

