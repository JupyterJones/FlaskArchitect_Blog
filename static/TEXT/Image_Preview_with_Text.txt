Image Preview with Text
user

@app.route('/preview', methods=['GET', 'POST'])
def preview():
    form = PreviewForm()  # Instantiate the form object
    if form.validate_on_submit():
        # Access form data
        image_file = form.image.data  # Get the uploaded image file
        horizontal_location = form.horizontal_location.data
        vertical_location = form.vertical_location.data
        font_size = form.font_size.data
        font_style = form.font_style.data
        text = form.text.data
        text_color = form.text_color.data
        
        # Check if an image file was uploaded
        if image_file:
            # Generate a unique filename for the processed image
            processed_image_filename = secure_filename(image_file.filename)

            # Save the uploaded image to a temporary location
            image_path = os.path.join(current_app.config['UPLOAD_FOLDER'], processed_image_filename)
            image_file.save(image_path)

            # Perform image processing (example: resize)
            processed_image_path = os.path.join(current_app.config['UPLOAD_FOLDER'], 'preview.jpg')
            resize_image(image_path, processed_image_path)

            # Open the processed image
            image = Image.open(processed_image_path)

            # Define font and size
            font_path = "/home/jack/fonts/OpenSans-Bold.ttf"  # Update the font path
            font = ImageFont.truetype(font_path, font_size)

            # Create a drawing context
            draw = ImageDraw.Draw(image)

            # Calculate text size
          

            # Calculate text position based on form inputs
            text_position = (horizontal_location, vertical_location)

            # Draw text on the image
            draw.text(text_position, text, fill=text_color, font=font)

            # Save the modified image
            image.save(processed_image_path)

            # Update the preview image URL
            preview_image_url = processed_image_path

            # Render the template with the preview image URL and the form object
            return render_template('preview.html', image_url=preview_image_url, form=form)
        else:
            flash('No image file uploaded.', 'error')
            return redirect(url_for('preview'))

    # If the form is not submitted or there are validation errors, render the template with the form object
    return render_template('preview.html', form=form)

def resize_image(input_path, output_path, width=800, height=600):
    """Resize an image."""
    with Image.open(input_path) as img:
        width, height = img.size
        img_resized = img.resize((width, height))
        img_resized.save(output_path)

<!-- templates/preview.html -->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Preview</title>
</head>

<body>
    <h1>Image Preview</h1>

    <!-- Display the preview image -->
    <img src="{{ image_url }}" alt="Preview Image">

    <form method="POST" action="{{ url_for('preview') }}" enctype="multipart/form-data">
        {{ form.hidden_tag() }}

        <!-- Repeat for other form fields -->
        {{ form.horizontal_location.label }} {{ form.horizontal_location() }}<br>
        {{ form.vertical_location.label }} {{ form.vertical_location() }}<br>
        {{ form.font_size.label }} {{ form.font_size() }}<br>
        {{ form.font_style.label }} {{ form.font_style() }}<br>
        {{ form.text.label }} {{ form.text() }}<br>
        {{ form.text_color.label }} {{ form.text_color() }}<br>
        {{ form.image.label }} {{ form.image() }}<br>

        <button type="submit">Preview</button>
    </form>
</body>

</html>
this works fine to place text on an image
ChatGPT
It's great to hear that your image preview functionality is working well! Placing text on an image is a common task, and it seems like you've got a solid foundation for it.

However, there's always room for improvement and refinement. One area you might consider enhancing is error handling. For instance, you could add more robust validation to ensure that the uploaded file is indeed an image file and not something else. Additionally, you could handle cases where the uploaded image cannot be processed for some reason, such as being corrupted or in an unsupported format.

Here's a revised version of your `preview` function with some improvements and additional error handling using logging:

```python
import os
from flask import render_template, redirect, url_for, flash, current_app
from werkzeug.utils import secure_filename
from PIL import Image, ImageDraw, ImageFont
from .forms import PreviewForm
import logging

@app.route('/preview', methods=['GET', 'POST'])
def preview():
    form = PreviewForm()  # Instantiate the form object
    if form.validate_on_submit():
        try:
            # Access form data
            image_file = form.image.data  # Get the uploaded image file
            horizontal_location = form.horizontal_location.data
            vertical_location = form.vertical_location.data
            font_size = form.font_size.data
            font_style = form.font_style.data
            text = form.text.data
            text_color = form.text_color.data

            # Check if an image file was uploaded
            if image_file:
                # Generate a unique filename for the processed image
                processed_image_filename = secure_filename(image_file.filename)

                # Save the uploaded image to a temporary location
                image_path = os.path.join(current_app.config['UPLOAD_FOLDER'], processed_image_filename)
                image_file.save(image_path)

                # Perform image processing (example: resize)
                processed_image_path = os.path.join(current_app.config['UPLOAD_FOLDER'], 'preview.jpg')
                resize_image(image_path, processed_image_path)

                # Open the processed image
                image = Image.open(processed_image_path)

                # Define font and size
                font_path = "/home/jack/fonts/OpenSans-Bold.ttf"  # Update the font path
                font = ImageFont.truetype(font_path, font_size)

                # Create a drawing context
                draw = ImageDraw.Draw(image)

                # Calculate text position based on form inputs
                text_position = (horizontal_location, vertical_location)

                # Draw text on the image
                draw.text(text_position, text, fill=text_color, font=font)

                # Save the modified image
                image.save(processed_image_path)

                # Update the preview image URL
                preview_image_url = processed_image_path

                # Render the template with the preview image URL and the form object
                return render_template('preview.html', image_url=preview_image_url, form=form)
            else:
                flash('No image file uploaded.', 'error')
                return redirect(url_for('preview'))
        except Exception as e:
            # Log the error
            logging.error(f"Error processing image: {e}")
            flash('Error processing image. Please try again.', 'error')
            return redirect(url_for('preview'))

    # If the form is not submitted or there are validation errors, render the template with the form object
    return render_template('preview.html', form=form)
```

In this updated version, I've added a try-except block to catch any exceptions that may occur during image processing. If an exception is caught, it's logged, and a flash message is displayed to the user indicating that there was an error processing the image.

Feel free to adjust the error handling and logging to suit your specific requirements and preferences!
user
make that the entire app and i will use preview.html as index.html
ChatGPT
Sure, here's the complete Flask application code with the `preview.html` template renamed to `index.html`:

```python
import os
import logging
from flask import Flask, render_template, redirect, url_for, flash, current_app
from werkzeug.utils import secure_filename
from PIL import Image, ImageDraw, ImageFont
from forms import PreviewForm

app = Flask(__name__)
app.secret_key = 'your_secret_key_here'  # Update with a secret key

@app.route('/', methods=['GET', 'POST'])
def index():
    form = PreviewForm()  # Instantiate the form object
    if form.validate_on_submit():
        try:
            # Access form data
            image_file = form.image.data  # Get the uploaded image file
            horizontal_location = form.horizontal_location.data
            vertical_location = form.vertical_location.data
            font_size = form.font_size.data
            font_style = form.font_style.data
            text = form.text.data
            text_color = form.text_color.data

            # Check if an image file was uploaded
            if image_file:
                # Generate a unique filename for the processed image
                processed_image_filename = secure_filename(image_file.filename)

                # Save the uploaded image to a temporary location
                image_path = os.path.join(current_app.config['UPLOAD_FOLDER'], processed_image_filename)
                image_file.save(image_path)

                # Perform image processing (example: resize)
                processed_image_path = os.path.join(current_app.config['UPLOAD_FOLDER'], 'preview.jpg')
                resize_image(image_path, processed_image_path)

                # Open the processed image
                image = Image.open(processed_image_path)

                # Define font and size
                font_path = "/home/jack/fonts/OpenSans-Bold.ttf"  # Update the font path
                font = ImageFont.truetype(font_path, font_size)

                # Create a drawing context
                draw = ImageDraw.Draw(image)

                # Calculate text position based on form inputs
                text_position = (horizontal_location, vertical_location)

                # Draw text on the image
                draw.text(text_position, text, fill=text_color, font=font)

                # Save the modified image
                image.save(processed_image_path)

                # Update the preview image URL
                preview_image_url = processed_image_path

                # Render the template with the preview image URL and the form object
                return render_template('index.html', image_url=preview_image_url, form=form)
            else:
                flash('No image file uploaded.', 'error')
                return redirect(url_for('index'))
        except Exception as e:
            # Log the error
            logging.error(f"Error processing image: {e}")
            flash('Error processing image. Please try again.', 'error')
            return redirect(url_for('index'))

    # If the form is not submitted or there are validation errors, render the template with the form object
    return render_template('index.html', form=form)

def resize_image(input_path, output_path, width=800, height=600):
    """Resize an image."""
    with Image.open(input_path) as img:
        width, height = img.size
        img_resized = img.resize((width, height))
        img_resized.save(output_path)

if __name__ == '__main__':
    app.run(debug=True)
```

This code includes the entire Flask application, including the route for the index page (`'/'`). The `preview.html` template has been renamed to `index.html`, as requested. You should place this code in a file named `app.py` or any other name you prefer.

Remember to replace `'your_secret_key_here'` with a strong secret key for session security. Also, ensure that you have the necessary directory structure and configuration for file uploads (`current_app.config['UPLOAD_FOLDER']`).

Let me know if you need further assistance!

