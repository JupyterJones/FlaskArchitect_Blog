Crear video con transiciones.
user
# Good working with fade transition
import os
import random
from moviepy.editor import *
from moviepy.video.fx import *
import glob
from PIL import Image
import uuid
from moviepy.editor import *
from moviepy.audio.fx.all import audio_fadein
from MUSIC import music
fps = 25 # Frames per second

def choose_dir():
    path = "/home/jack/Desktop/HDD500/collections/images/"
    directories = [d for d in os.listdir(path) if os.path.isdir(os.path.join(path, d))]
    
    if directories:
        DIR = os.path.join(path, random.choice(directories))
    else:
        return choose_dir()  # Return try again if there are no directories


    print("Selected directory:", DIR)
    try:
        # Get a list of the image filenames in the directory
        image_files = random.sample(glob.glob(DIR+'/*.jpg'), 26)
        print("Number of image files:", len(image_files))
        size = Image.open(image_files[0]).size
        print("Size of the first image:", size)
        random.shuffle(image_files)
    except:
        # if fail run again
        choose_dir()
        
        return image_files
# Define the transitions
def crossfade(clip1, clip2):
    return CompositeVideoClip([clip1.fx(vfx.fadeout, duration=1), 
                               clip2.fx(vfx.fadein, duration=1)], 
                              size=size)
def create_video(image_files=choose_dir()):
    # Create a list of image clips with transitions
    clips = []
    image_files=choose_dir()
    for i in range(len(image_files)):
        # Load the image and create a video clip
        image_clip = ImageClip(image_files[i]).set_duration(duration)
        
        if i > 0:
            # Add a crossfade transition to the previous clip
            transition = crossfade(clips[-1], image_clip)
            clips.append(transition)
            
        clips.append(image_clip)

    # Concatenate the clips to create the final video
    video = concatenate_videoclips(clips)

    # Set the output video parameters
    video = video.set_fps(fps)
    video = video.resize(size)

    # Save the video
    video.write_videofile('slideshowT.mp4')

    #DIR ="/home/jack/Desktop/HDD500/collections/images/Gorgeous/"
    # Load video and audio clips
    video_clip = VideoFileClip("slideshowT.mp4")
    audio_clip = AudioFileClip(music())

    # Ensure the audio clip is the same duration as the video
    if audio_clip.duration > video_clip.duration:
        audio_clip = audio_clip.subclip(0, video_clip.duration)
    else:
        padding_duration = video_clip.duration - audio_clip.duration
        padding = AudioFileClip.silence(duration=padding_duration)
        audio_clip = concatenate_audioclips([audio_clip, padding])

    # Define fade durations
    fade_in_duration = 10  # seconds
    fade_out_duration = 15  # seconds

    # Apply fade in effect to audio
    faded_audio = audio_clip.audio_fadein(fade_in_duration)

    # Apply fade out effect to audio at the end
    final_audio = faded_audio.audio_fadeout(fade_out_duration)

    # Set audio of the video to the processed audio
    video_with_audio = video_clip.set_audio(final_audio)

    # Write the final video with audio to a file
    output_path = selected_dir+"/slideshowSharp-music.mp4"
    video_with_audio.write_videofile(output_path, codec="libx264")
    # Source file path
    source_file = output_path

    # Destination directory where you want to save a copy with a UUID-based name
    destination_dir = "/home/jack/Desktop/HDD500/collections/vids/"
    id_ = selected_dir.split("/")
    print(id_[-1])
    # Generate a UUID for the new file name
    new_filename = str(uuid.uuid4()) + "_"+id_[-1]+"slideshowSharp-music.mp4"
    print(new_filename)
    # Combine the destination directory and the new filename to create the full destination path
    destination_path = os.path.join(destination_dir, new_filename)

    # Copy the file to the destination directory with the new name
    shutil.copy(source_file, destination_path)
    print(destination_path)
create_video()                   
ERROR:
Selected directory: /home/jack/Desktop/HDD500/collections/images/oct28
Selected directory: /home/jack/Desktop/HDD500/collections/images/assets
Selected directory: /home/jack/Desktop/HDD500/collections/images/Gorgeous
Number of image files: 26
Size of the first image: (512, 1024)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Cell In[34], line 27, in choose_dir()
     25 try:
     26     # Get a list of the image filenames in the directory
---> 27     image_files = random.sample(glob.glob(DIR+'/*.jpg'), 26)
     28     print("Number of image files:", len(image_files))

File ~/miniconda3/envs/cloned_base/lib/python3.9/random.py:449, in Random.sample(self, population, k, counts)
    448 if not 0 <= k <= n:
--> 449     raise ValueError("Sample larger than population or is negative")
    450 result = [None] * k

ValueError: Sample larger than population or is negative

During handling of the above exception, another exception occurred:

ValueError                                Traceback (most recent call last)
Cell In[34], line 27, in choose_dir()
     25 try:
     26     # Get a list of the image filenames in the directory
---> 27     image_files = random.sample(glob.glob(DIR+'/*.jpg'), 26)
     28     print("Number of image files:", len(image_files))

File ~/miniconda3/envs/cloned_base/lib/python3.9/random.py:449, in Random.sample(self, population, k, counts)
    448 if not 0 <= k <= n:
--> 449     raise ValueError("Sample larger than population or is negative")
    450 result = [None] * k

ValueError: Sample larger than population or is negative

During handling of the above exception, another exception occurred:

UnboundLocalError                         Traceback (most recent call last)
Cell In[34], line 42
     38 def crossfade(clip1, clip2):
     39     return CompositeVideoClip([clip1.fx(vfx.fadeout, duration=1), 
     40                                clip2.fx(vfx.fadein, duration=1)], 
     41                               size=size)
---> 42 def create_video(image_files=choose_dir()):
     43     # Create a list of image clips with transitions
     44     clips = []
     45     image_files=choose_dir()

Cell In[34], line 34, in choose_dir()
     31     random.shuffle(image_files)
     32 except:
     33     # if fail run again
---> 34     choose_dir()
     36     return image_files

Cell In[34], line 36, in choose_dir()
     32 except:
     33     # if fail run again
     34     choose_dir()
---> 36     return image_files

UnboundLocalError: local variable 'image_files' referenced before assignment
ChatGPT
It seems you're encountering an error in your script. The error you're seeing is due to the fact that when you call `choose_dir()` recursively in the `except` block, you're not returning the result back to the outer function. Let's correct the code and provide a complete script with detailed explanations and logging as you requested. Here's an updated version of your script:

```python
import os
import random
from moviepy.editor import *
from moviepy.video.fx import *
import glob
from PIL import Image
import uuid
from moviepy.editor import *
from moviepy.audio.fx.all import audio_fadein
import shutil
from MUSIC import music

# Set the desired frame rate
fps = 25

# Define the duration of each image in seconds
duration = 4

# Get the selected directory
def choose_dir():
    path = "/home/jack/Desktop/HDD500/collections/images/"
    directories = [d for d in os.listdir(path) if os.path.isdir(os.path.join(path, d))]

    if not directories:
        print("No directories found in the specified path.")
        return None

    DIR = os.path.join(path, random.choice(directories))
    print("Selected directory:", DIR)

    try:
        # Get a list of the image filenames in the directory
        image_files = random.sample(glob.glob(os.path.join(DIR, '*.jpg'), 26)
        print("Number of image files:", len(image_files))
        size = Image.open(image_files[0]).size
        print("Size of the first image:", size)
        random.shuffle(image_files)
        return image_files
    except Exception as e:
        print(f"Error while selecting images: {str(e)}")
        return None

# Define the transitions
def crossfade(clip1, clip2):
    return CompositeVideoClip([clip1.fx(vfx.fadeout, duration=1),
                               clip2.fx(vfx.fadein, duration=1)],
                              size=size)

def create_video():
    # Get the list of image files
    image_files = choose_dir()

    if image_files is None:
        print("Unable to select image files. Exiting.")
        return

    # Create a list of image clips with transitions
    clips = []
    for i in range(len(image_files)):
        # Load the image and create a video clip
        image_clip = ImageClip(image_files[i]).set_duration(duration)

        if i > 0:
            # Add a crossfade transition to the previous clip
            transition = crossfade(clips[-1], image_clip)
            clips.append(transition)

        clips.append(image_clip)

    # Concatenate the clips to create the final video
    video = concatenate_videoclips(clips)

    # Set the output video parameters
    video = video.set_fps(fps)
    video = video.resize(size)

    # Save the video
    video.write_videofile('slideshowT.mp4')

    # Load video and audio clips
    video_clip = VideoFileClip("slideshowT.mp4")
    audio_clip = AudioFileClip(music())

    # Ensure the audio clip is the same duration as the video
    if audio_clip.duration > video_clip.duration:
        audio_clip = audio_clip.subclip(0, video_clip.duration)
    else:
        padding_duration = video_clip.duration - audio_clip.duration
        padding = AudioFileClip.silence(duration=padding_duration)
        audio_clip = concatenate_audioclips([audio_clip, padding])

    # Define fade durations
    fade_in_duration = 10  # seconds
    fade_out_duration = 15  # seconds

    # Apply fade in effect to audio
    faded_audio = audio_clip.audio_fadein(fade_in_duration)

    # Apply fade out effect to audio at the end
    final_audio = faded_audio.audio_fadeout(fade_out_duration)

    # Set audio of the video to the processed audio
    video_with_audio = video_clip.set_audio(final_audio)

    # Write the final video with audio to a file
    output_path = "/home/jack/Desktop/HDD500/collections/vids/slideshowSharp-music.mp4"
    video_with_audio.write_videofile(output_path, codec="libx264")

    # Source file path
    source_file = output_path

    # Destination directory where you want to save a copy with a UUID-based name
    destination_dir = "/home/jack/Desktop/HDD500/collections/vids/"
    id_ = output_path.split("/")
    print("Selected Directory:", id_[-1])

    # Generate a UUID for the new file name
    new_filename = str(uuid.uuid4()) + "_" + id_[-1]
    print("New Filename:", new_filename)

    # Combine the destination directory and the new filename to create the full destination path
    destination_path = os.path.join(destination_dir, new_filename)

    # Copy the file to the destination directory with the new name
    shutil.copy(source_file, destination_path)
    print("Destination Path:", destination_path)

if __name__ == "__main__":
    create_video()
```

I've made the necessary corrections and added logging for important steps. This should help you avoid the issues you encountered in your previous code. Feel free to modify it further as needed.

