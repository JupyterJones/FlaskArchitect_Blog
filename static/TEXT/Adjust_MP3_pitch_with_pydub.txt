Adjust MP3 pitch with pydub
user
from pydub import AudioSegment

def deepen_and_roughen_voice(input_file, output_file, pitch_shift=0.5, speed_factor=1.2):
    # Load the audio file
    audio = AudioSegment.from_file(input_file)

    # Shift the pitch (lower values make the voice deeper)
    pitched_audio = audio.speedup(playback_speed=speed_factor)
    pitched_audio = pitched_audio.set_frame_rate(audio.frame_rate)

    # Save the modified audio to the output file
    pitched_audio.export(output_file, format="wav")

if __name__ == "__main__":
    input_audio_file = "input_audio.wav"  # Replace with your input audio file
    output_audio_file = "output_audio.wav"  # Replace with the desired output file name

    deepen_and_roughen_voice(input_audio_file, output_audio_file, pitch_shift=-0.5, speed_factor=1.2)
--------------- will this work with mp3 files

ChatGPT
The code you provided will work with MP3 files with minor adjustments. The `AudioSegment` class from `pydub` can handle various audio file formats, including MP3. However, there are a few issues with the current implementation of your function:

1. The `speedup` method does not directly affect the pitch, it changes the playback speed.
2. The `set_frame_rate` method does not affect pitch or speed. To change the pitch, you need to actually resample the audio data.

Here’s the corrected and improved version of the function, which works with MP3 files and includes proper pitch shifting using `pydub` and `scipy` for resampling:

```python
from pydub import AudioSegment
import numpy as np
from scipy.signal import resample

def change_pitch(audio_segment, pitch_shift):
    # Convert pydub audio_segment to numpy array
    samples = np.array(audio_segment.get_array_of_samples())

    # Calculate the new sample rate
    new_sample_rate = int(audio_segment.frame_rate * (2.0 ** pitch_shift))

    # Resample the audio to the new sample rate
    resampled_samples = resample(samples, int(len(samples) * new_sample_rate / audio_segment.frame_rate))

    # Convert the numpy array back to an audio segment
    new_audio_segment = audio_segment._spawn(resampled_samples.astype(audio_segment.array_type).tobytes())
    new_audio_segment = new_audio_segment.set_frame_rate(new_sample_rate)
    return new_audio_segment

def deepen_and_roughen_voice(input_file, output_file, pitch_shift=0.5, speed_factor=1.2):
    # Load the audio file
    audio = AudioSegment.from_file(input_file)

    # Change the pitch of the audio
    pitched_audio = change_pitch(audio, pitch_shift)

    # Speed up the audio
    sped_up_audio = pitched_audio.speedup(playback_speed=speed_factor)

    # Save the modified audio to the output file
    sped_up_audio.export(output_file, format="wav")

if __name__ == "__main__":
    input_audio_file = "input_audio.mp3"  # Replace with your input audio file
    output_audio_file = "output_audio.wav"  # Replace with the desired output file name

    deepen_and_roughen_voice(input_audio_file, output_audio_file, pitch_shift=-0.5, speed_factor=1.2)
```

### Explanation

1. **Pitch Shifting:** 
   - The `change_pitch` function adjusts the pitch by resampling the audio at a different sample rate.

2. **Speed Adjustment:** 
   - The `speedup` method is used to adjust the playback speed of the audio.

3. **Compatibility with MP3:**
   - The `AudioSegment.from_file(input_file)` line can handle MP3 files, so no changes are needed here.

4. **Output File Format:**
   - The `export` method allows specifying the output file format. In this case, it exports the audio to a WAV file.

This complete script ensures that your audio processing works correctly with MP3 files and handles both pitch shifting and speed adjustments.
user
can it export mp3 audio ?
ChatGPT
Yes, the `pydub` library can export audio in MP3 format as well. To modify the script to export the modified audio as MP3 instead of WAV, you can simply change the format parameter in the `export` method to `"mp3"`.

Here’s how you can modify the `deepen_and_roughen_voice` function to export the audio as MP3:

```python
from pydub import AudioSegment
import numpy as np
from scipy.signal import resample

def change_pitch(audio_segment, pitch_shift):
    # Convert pydub audio_segment to numpy array
    samples = np.array(audio_segment.get_array_of_samples())

    # Calculate the new sample rate
    new_sample_rate = int(audio_segment.frame_rate * (2.0 ** pitch_shift))

    # Resample the audio to the new sample rate
    resampled_samples = resample(samples, int(len(samples) * new_sample_rate / audio_segment.frame_rate))

    # Convert the numpy array back to an audio segment
    new_audio_segment = audio_segment._spawn(resampled_samples.astype(audio_segment.array_type).tobytes())
    new_audio_segment = new_audio_segment.set_frame_rate(new_sample_rate)
    return new_audio_segment

def deepen_and_roughen_voice(input_file, output_file, pitch_shift=0.5, speed_factor=1.2):
    # Load the audio file
    audio = AudioSegment.from_file(input_file)

    # Change the pitch of the audio
    pitched_audio = change_pitch(audio, pitch_shift)

    # Speed up the audio
    sped_up_audio = pitched_audio.speedup(playback_speed=speed_factor)

    # Save the modified audio to the output file in MP3 format
    sped_up_audio.export(output_file, format="mp3")

if __name__ == "__main__":
    input_audio_file = "input_audio.mp3"  # Replace with your input audio file
    output_audio_file = "output_audio.mp3"  # Replace with the desired output file name

    deepen_and_roughen_voice(input_audio_file, output_audio_file, pitch_shift=-0.5, speed_factor=1.2)
```

### Explanation

- **Exporting as MP3:** 
  - The `export` method now specifies `"mp3"` as the format parameter, ensuring that the modified audio is saved in MP3 format.

- **Compatibility:** 
  - `pydub` handles both MP3 and WAV formats seamlessly, so the rest of the script remains unchanged.

This modification allows you to export the modified audio in MP3 format, ensuring compatibility with your requirements.
user
Looks good !
ChatGPT
Great to hear that! If you have any more questions or need further assistance with anything else, feel free to ask. Happy coding!

