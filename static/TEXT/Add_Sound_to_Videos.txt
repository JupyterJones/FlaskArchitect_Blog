Add Sound to Videos
user
# add_sound.py
'''
This script will be used to add a random sound from ''static/audio_mp3/' to a random video from 'zoomed_videos/
This script will be run by the main script, 'create_zooms2.py' when the user selects the option to add sound to a video.'''
import os
import random
import glob
from time import sleep
#make directories if they don't exist
def ensure_folders_exist():
    for directory in ['static/audio_mp3', 'zoomed_videos', 'final_videos']:
        if not os.path.exists(directory):
            os.makedirs(directory)
#pick a random mp3 from static/audio_mp3/
def pick_random_mp3():
    mp3_files = glob.glob("static/audio_mp3/*.mp3")
    MP3 = random.choice(mp3_files)
    print(f"Random MP3: {MP3}")
    return MP3
#pick a random video from zoomed_videos/
def pick_random_video():
    video_files = glob.glob("zoomed_videos/*.mp4")
    MP4 = random.choice(video_files)
    print(f"Random MP4: {MP4}")
    return MP4
#add sound to a video using ffmpeg
def add_sound_to_video(video_file, audio_file):
    output_file = "final_videos/" + os.path.basename(video_file)
    os.system(f"ffmpeg -hide_banner -i {video_file} -i {audio_file} -c:v copy -c:a aac -strict experimental {output_file}")
    return output_file
if __name__ == '__main__':
    ensure_folders_exist()
    audio_file = pick_random_mp3()
    video_file = pick_random_video()
    sleep(5)
    final_video = add_sound_to_video(video_file, audio_file)
    print(f"Final video created: {final_video}")    
    #play the final video using vlc
    os.system(f"vlc {final_video}")
    # create_zooms2.py
python add_sound.py
Random MP3: static/audio_mp3/Aeyegeneratedvirus
.mp3
Random MP4: zoomed_videos/concatenated_zoomed_video_1.mp4
Input #0, mov,mp4,m4a,3gp,3g2,mj2, from 'zoomed_videos/concatenated_zoomed_video_1.mp4':
  Metadata:
    major_brand     : isom
    minor_version   : 512
    compatible_brands: isomiso2avc1mp41
    encoder         : Lavf58.29.100
  Duration: 00:00:39.96, start: 0.000000, bitrate: 931 kb/s
    Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p, 604x604 [SAR 1:1 DAR 1:1], 929 kb/s, 25 fps, 25 tbr, 12800 tbn, 50 tbc (default)
    Metadata:
      handler_name    : VideoHandler
: No such file or directorytedvirus
sh: 2: .mp3: not found

ChatGPT
The issue you're facing is due to the filename `Aeyegeneratedvirus.mp3` which contains spaces, causing the command to fail. You should enclose the paths in quotes to handle filenames with spaces correctly. Additionally, you can improve the script by adding logging to help debug any issues that arise.

Here's the corrected and enhanced script with added logging:

```python
# add_sound.py
'''
This script will be used to add a random sound from 'static/audio_mp3/' to a random video from 'zoomed_videos/'
This script will be run by the main script, 'create_zooms2.py' when the user selects the option to add sound to a video.
'''

import os
import random
import glob
from time import sleep
import logging

# Set up logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

def ensure_folders_exist():
    logging.info("Ensuring required directories exist.")
    for directory in ['static/audio_mp3', 'zoomed_videos', 'final_videos']:
        if not os.path.exists(directory):
            os.makedirs(directory)
            logging.debug(f"Created directory: {directory}")
        else:
            logging.debug(f"Directory already exists: {directory}")

def pick_random_mp3():
    logging.info("Picking a random MP3 file.")
    mp3_files = glob.glob("static/audio_mp3/*.mp3")
    if not mp3_files:
        logging.error("No MP3 files found in static/audio_mp3/")
        raise FileNotFoundError("No MP3 files found in static/audio_mp3/")
    MP3 = random.choice(mp3_files)
    logging.debug(f"Selected MP3: {MP3}")
    return MP3

def pick_random_video():
    logging.info("Picking a random video file.")
    video_files = glob.glob("zoomed_videos/*.mp4")
    if not video_files:
        logging.error("No video files found in zoomed_videos/")
        raise FileNotFoundError("No video files found in zoomed_videos/")
    MP4 = random.choice(video_files)
    logging.debug(f"Selected MP4: {MP4}")
    return MP4

def add_sound_to_video(video_file, audio_file):
    logging.info("Adding sound to video.")
    output_file = "final_videos/" + os.path.basename(video_file)
    command = f'ffmpeg -hide_banner -i "{video_file}" -i "{audio_file}" -c:v copy -c:a aac -strict experimental "{output_file}"'
    logging.debug(f"Running command: {command}")
    result = os.system(command)
    if result != 0:
        logging.error("ffmpeg command failed")
        raise RuntimeError("ffmpeg command failed")
    logging.debug(f"Created final video: {output_file}")
    return output_file

if __name__ == '__main__':
    try:
        logging.info("Script started.")
        ensure_folders_exist()
        audio_file = pick_random_mp3()
        video_file = pick_random_video()
        sleep(5)
        final_video = add_sound_to_video(video_file, audio_file)
        logging.info(f"Final video created: {final_video}")
        
        # Play the final video using VLC
        play_command = f'vlc "{final_video}"'
        logging.debug(f"Running command: {play_command}")
        os.system(play_command)
    except Exception as e:
        logging.error(f"An error occurred: {e}")
    logging.info("Script finished.")
```

### Explanation of Changes:
1. **Logging**: Added logging statements at various points to capture the flow and help debug any issues.
2. **File Paths**: Enclosed file paths in quotes in the `ffmpeg` and `vlc` commands to handle filenames with spaces.
3. **Error Handling**: Added error handling to raise exceptions if no MP3 or video files are found.

This script should provide better insights into what is happening during its execution and help resolve issues related to file paths with spaces.
user
give me a list of 12 fake alien virus names
ChatGPT
Sure, here are 12 fake alien virus names for your science fiction project:

1. Arcanian Nebulovirus
2. Zylarian Mindplague
3. Kronos Parasight
4. Veltrax Biohazard
5. Xenon Neurotoxin
6. Plutorian Psycheplague
7. Trantor Nanohex
8. Thalorian Brainflux
9. Andromeda Voidvirus
10. Quasar Synapseworm
11. Helios Cerebromite
12. Orion Darkpathogen

Feel free to use these names as needed for your creative projects!
user
#generate_text.py
'''
This script will be used to generate text for a random video from 'zoomed_videos/' a random code from 'code_list/'
'''
#create a code_list
import os
import random
for inc in range(137,214,10):
    #create a code_list
    code=random.choice(['z twelve-', 'z zero-', 'z one-', 'z two-', 'z three-', 'z four-', 'z five-', 'z six-', 'z seven-', 'z eight-', 'z nine-', 'z ten-', 'z eleven-', 'z twelve-'])
    #create SOURCE list
    SOURCE = random.choice(['The source of','The origin of','First record of','The origin of the', 'The source of the', 'The origin of the', 'The source of the', 'The origin of the', 'The source of the', 'The origin of the'])
    #create a list of fake virus names
    NAME=random.choice(['Covid-19', 'SARS', 'H1N1', 'H5N1', 'H3N2', 'H3N2', 'H1N1', 'H5N1', 'H3N2', 'H3N2', 'H1N1', 'H5N1', 'H3N2', 'H3N2'])
    #create a list of 12 virus transmissions, air, water, fecal,saliva
    TRANMISSION=random.choice(['air', 'water', 'fecal', 'saliva', 'air borne', 'water', 'fecal', 'saliva', 'air', 'stagnet water', 'water', 'sweat', 'saliva'])
    #fit them together in a description list
    
    i can use help

ChatGPT
Sure, I can help you generate the text as you described. I'll provide a complete script that picks a random video from the `zoomed_videos/` directory and generates a text description using the lists you've provided. The generated text will include a randomly chosen code, source, fake virus name, and transmission method.

Here's the complete `generate_text.py` script:

```python
# generate_text.py
'''
This script will be used to generate text for a random video from 'zoomed_videos/' using a random code from 'code_list/'
'''

import os
import random
import glob
import logging

# Set up logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# Ensure directories exist
def ensure_folders_exist():
    logging.info("Ensuring required directories exist.")
    for directory in ['zoomed_videos']:
        if not os.path.exists(directory):
            os.makedirs(directory)
            logging.debug(f"Created directory: {directory}")
        else:
            logging.debug(f"Directory already exists: {directory}")

# Pick a random video from zoomed_videos/
def pick_random_video():
    logging.info("Picking a random video file.")
    video_files = glob.glob("zoomed_videos/*.mp4")
    if not video_files:
        logging.error("No video files found in zoomed_videos/")
        raise FileNotFoundError("No video files found in zoomed_videos/")
    video_file = random.choice(video_files)
    logging.debug(f"Selected video: {video_file}")
    return video_file

# Generate a random text description
def generate_random_text():
    logging.info("Generating random text description.")

    codes = ['z twelve-', 'z zero-', 'z one-', 'z two-', 'z three-', 'z four-', 'z five-', 'z six-', 'z seven-', 'z eight-', 'z nine-', 'z ten-', 'z eleven-', 'z twelve-']
    sources = ['The source of', 'The origin of', 'First record of', 'The origin of the', 'The source of the', 'The origin of the', 'The source of the', 'The origin of the', 'The source of the', 'The origin of the']
    virus_names = ['Covid-19', 'SARS', 'H1N1', 'H5N1', 'H3N2', 'Zylarian Mindplague', 'Kronos Parasight', 'Veltrax Biohazard', 'Xenon Neurotoxin', 'Plutorian Psycheplague', 'Trantor Nanohex', 'Thalorian Brainflux']
    transmissions = ['air', 'water', 'fecal', 'saliva', 'air borne', 'stagnant water', 'sweat', 'droplets', 'contact', 'inhalation', 'ingestion', 'blood']

    code = random.choice(codes)
    source = random.choice(sources)
    virus_name = random.choice(virus_names)
    transmission = random.choice(transmissions)

    description = f"{code} {source} {virus_name} virus, transmitted through {transmission}."
    logging.debug(f"Generated description: {description}")

    return description

if __name__ == '__main__':
    try:
        logging.info("Script started.")
        ensure_folders_exist()
        video_file = pick_random_video()
        description = generate_random_text()
        logging.info(f"Description for video '{video_file}': {description}")
    except Exception as e:
        logging.error(f"An error occurred: {e}")
    logging.info("Script finished.")
```

### Explanation:
1. **Logging**: Added logging to track the flow of the script and any potential issues.
2. **Directory Check**: Added a function to ensure the `zoomed_videos/` directory exists.
3. **Random Video Selection**: Function to pick a random video from the `zoomed_videos/` directory.
4. **Random Text Generation**: Function to generate a random description using predefined lists.
5. **Script Execution**: Ensures the folders exist, picks a random video, generates a description, and logs the output.

This script provides a structured approach to generating random text descriptions for videos, making it easier to debug and extend in the future.
user
what are a few more descriptions example how dangerous, prevention, reporting agency fake document id cos for info etc 
ChatGPT
To enrich the generated text descriptions, we can include additional information such as the danger level of the virus, prevention methods, a reporting agency, and a fake document ID. Here's how you can incorporate these elements into your script:

### Updated Script: `generate_text.py`
```python
# generate_text.py
'''
This script will be used to generate text for a random video from 'zoomed_videos/' using a random code from 'code_list/'
'''

import os
import random
import glob
import logging

# Set up logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# Ensure directories exist
def ensure_folders_exist():
    logging.info("Ensuring required directories exist.")
    for directory in ['zoomed_videos']:
        if not os.path.exists(directory):
            os.makedirs(directory)
            logging.debug(f"Created directory: {directory}")
        else:
            logging.debug(f"Directory already exists: {directory}")

# Pick a random video from zoomed_videos/
def pick_random_video():
    logging.info("Picking a random video file.")
    video_files = glob.glob("zoomed_videos/*.mp4")
    if not video_files:
        logging.error("No video files found in zoomed_videos/")
        raise FileNotFoundError("No video files found in zoomed_videos/")
    video_file = random.choice(video_files)
    logging.debug(f"Selected video: {video_file}")
    return video_file

# Generate a random text description
def generate_random_text():
    logging.info("Generating random text description.")

    codes = ['z twelve-', 'z zero-', 'z one-', 'z two-', 'z three-', 'z four-', 'z five-', 'z six-', 'z seven-', 'z eight-', 'z nine-', 'z ten-', 'z eleven-', 'z twelve-']
    sources = ['The source of', 'The origin of', 'First record of', 'The origin of the', 'The source of the', 'The origin of the', 'The source of the', 'The origin of the', 'The source of the', 'The origin of the']
    virus_names = ['Covid-19', 'SARS', 'H1N1', 'H5N1', 'H3N2', 'Zylarian Mindplague', 'Kronos Parasight', 'Veltrax Biohazard', 'Xenon Neurotoxin', 'Plutorian Psycheplague', 'Trantor Nanohex', 'Thalorian Brainflux']
    transmissions = ['air', 'water', 'fecal', 'saliva', 'air borne', 'stagnant water', 'sweat', 'droplets', 'contact', 'inhalation', 'ingestion', 'blood']
    danger_levels = ['low', 'moderate', 'high', 'critical']
    preventions = ['wearing masks', 'hand washing', 'avoiding crowded places', 'using sanitizers', 'boiling water', 'getting vaccinated', 'wearing protective gear']
    reporting_agencies = ['Intergalactic Health Organization', 'Space Virus Control Center', 'Cosmic Disease Prevention Agency', 'Universal Health and Safety Administration']
    document_ids = [f"DOC-{random.randint(1000,9999)}-ALN" for _ in range(100)]

    code = random.choice(codes)
    source = random.choice(sources)
    virus_name = random.choice(virus_names)
    transmission = random.choice(transmissions)
    danger_level = random.choice(danger_levels)
    prevention = random.choice(preventions)
    reporting_agency = random.choice(reporting_agencies)
    document_id = random.choice(document_ids)

    description = (f"{code} {source} {virus_name} virus, transmitted through {transmission}. "
                   f"Danger level: {danger_level}. "
                   f"Prevention: {prevention}. "
                   f"Reporting agency: {reporting_agency}. "
                   f"Document ID: {document_id}.")
    logging.debug(f"Generated description: {description}")

    return description

if __name__ == '__main__':
    try:
        logging.info("Script started.")
        ensure_folders_exist()
        video_file = pick_random_video()
        description = generate_random_text()
        logging.info(f"Description for video '{video_file}': {description}")
    except Exception as e:
        logging.error(f"An error occurred: {e}")
    logging.info("Script finished.")
```

### Example Descriptions
Here are a few example outputs that the script might generate:

1. `z twelve- The origin of the H5N1 virus, transmitted through air borne. Danger level: critical. Prevention: avoiding crowded places. Reporting agency: Space Virus Control Center. Document ID: DOC-4821-ALN.`

2. `z zero- The source of the Thalorian Brainflux virus, transmitted through water. Danger level: high. Prevention: hand washing. Reporting agency: Universal Health and Safety Administration. Document ID: DOC-7153-ALN.`

3. `z one- The origin of the Veltrax Biohazard virus, transmitted through saliva. Danger level: moderate. Prevention: wearing masks. Reporting agency: Intergalactic Health Organization. Document ID: DOC-3948-ALN.`

4. `z two- The source of the Xenon Neurotoxin virus, transmitted through droplets. Danger level: low. Prevention: using sanitizers. Reporting agency: Cosmic Disease Prevention Agency. Document ID: DOC-5617-ALN.`

This script and these examples provide a rich, detailed description of each fake virus, which can add depth and interest to your project.
user
it works !
avoid the debug logging just print resulting description
ChatGPT
Great to hear it works! Here’s the updated script without debug logging, and it will just print the resulting description.

```python
# generate_text.py
'''
This script will be used to generate text for a random video from 'zoomed_videos/' using a random code from 'code_list/'
'''

import os
import random
import glob

# Ensure directories exist
def ensure_folders_exist():
    for directory in ['zoomed_videos']:
        if not os.path.exists(directory):
            os.makedirs(directory)

# Pick a random video from zoomed_videos/
def pick_random_video():
    video_files = glob.glob("zoomed_videos/*.mp4")
    if not video_files:
        raise FileNotFoundError("No video files found in zoomed_videos/")
    return random.choice(video_files)

# Generate a random text description
def generate_random_text():
    codes = ['z twelve-', 'z zero-', 'z one-', 'z two-', 'z three-', 'z four-', 'z five-', 'z six-', 'z seven-', 'z eight-', 'z nine-', 'z ten-', 'z eleven-', 'z twelve-']
    sources = ['The source of', 'The origin of', 'First record of', 'The origin of the', 'The source of the', 'The origin of the', 'The source of the', 'The origin of the', 'The source of the', 'The origin of the']
    virus_names = ['Covid-19', 'SARS', 'H1N1', 'H5N1', 'H3N2', 'Zylarian Mindplague', 'Kronos Parasight', 'Veltrax Biohazard', 'Xenon Neurotoxin', 'Plutorian Psycheplague', 'Trantor Nanohex', 'Thalorian Brainflux']
    transmissions = ['air', 'water', 'fecal', 'saliva', 'air borne', 'stagnant water', 'sweat', 'droplets', 'contact', 'inhalation', 'ingestion', 'blood']
    danger_levels = ['low', 'moderate', 'high', 'critical']
    preventions = ['wearing masks', 'hand washing', 'avoiding crowded places', 'using sanitizers', 'boiling water', 'getting vaccinated', 'wearing protective gear']
    reporting_agencies = ['Intergalactic Health Organization', 'Space Virus Control Center', 'Cosmic Disease Prevention Agency', 'Universal Health and Safety Administration']
    document_ids = [f"DOC-{random.randint(1000,9999)}-ALN" for _ in range(100)]

    code = random.choice(codes)
    source = random.choice(sources)
    virus_name = random.choice(virus_names)
    transmission = random.choice(transmissions)
    danger_level = random.choice(danger_levels)
    prevention = random.choice(preventions)
    reporting_agency = random.choice(reporting_agencies)
    document_id = random.choice(document_ids)

    description = (f"{code} {source} {virus_name} virus, transmitted through {transmission}. "
                   f"Danger level: {danger_level}. "
                   f"Prevention: {prevention}. "
                   f"Reporting agency: {reporting_agency}. "
                   f"Document ID: {document_id}.")
    
    return description

if __name__ == '__main__':
    ensure_folders_exist()
    try:
        video_file = pick_random_video()
        description = generate_random_text()
        print(f"Description for video '{video_file}': {description}")
    except Exception as e:
        print(f"An error occurred: {e}")
```

### Example Output
Running the script will print out a description for a randomly selected video from the `zoomed_videos/` directory. Here's an example of what the output might look like:

```
Description for video 'zoomed_videos/example_video.mp4': z zero- The origin of the Veltrax Biohazard virus, transmitted through saliva. Danger level: moderate. Prevention: wearing masks. Reporting agency: Intergalactic Health Organization. Document ID: DOC-3948-ALN.
```

This streamlined script focuses on the core functionality without the debug logging, providing clean and straightforward output.
user
        <h1>Upload Video</h1>
        <p>{{Text}}</p><br/><br/>
        <a href="/text_mp3">CREATE MP3</a><br/><br/>
        <form action="/upload" method="post" enctype="multipart/form-data">
            <input type="file" name="file" accept=".mp4">
            <input type="submit" value="Upload">
        </form>
I want {{Text}} to be the default input
ChatGPT
To set the default value of the `{{Text}}` input field to a predetermined text, you can use the `value` attribute in the `<input>` tag. Here's the updated HTML code with `{{Text}}` set as the default value:

```html
<h1>Upload Video</h1>
<p>{{Text}}</p><br/><br/>
<a href="/text_mp3">CREATE MP3</a><br/><br/>
<form action="/upload" method="post" enctype="multipart/form-data">
    <input type="file" name="file" accept=".mp4">
    <input type="submit" value="Upload">
</form>
```

In this code snippet, you can replace `{{Text}}` with the default text you want to display. For example, if you want the default text to be "Default Text", you can modify it like this:

```html
<p><input type="text" name="Text" value="Default Text"></p>
```

This will display "Default Text" in the input field by default, and users can modify it if needed.
user
that does not go in the form ?
ChatGPT
Apologies for the confusion. If you want the default text to be included as part of the form submission, you can use a hidden input field within the form. Here's how you can modify the HTML code to include the default text within the form:

```html
<h1>Upload Video</h1>
<p>{{Text}}</p><br/><br/>
<a href="/text_mp3">CREATE MP3</a><br/><br/>
<form action="/upload" method="post" enctype="multipart/form-data">
    <input type="file" name="file" accept=".mp4">
    <input type="hidden" name="Text" value="Default Text"> <!-- Default text input -->
    <input type="submit" value="Upload">
</form>
```

In this modified code, a hidden input field with the name `Text` and the value "Default Text" is included within the form. When the form is submitted, the value "Default Text" will be sent along with the file data. This way, you can include the default text as part of the form submission without displaying it visibly to the user.
user
        <h1>Text to Speech</h1>
        <p>{{Text}}</p>
        <form method="post">
            <textarea name="text" rows="5" cols="30"></textarea>
            <br><br>
            <input type="submit" value="Submit">
        </form>
I i sent the wrong form
i want default textarea to be {{Text}}
ChatGPT
To set the default value of the textarea to `{{Text}}`, you can use the `value` attribute in the `<textarea>` tag. Here's the updated HTML code with `{{Text}}` set as the default value:

```html
<h1>Text to Speech</h1>
<p>{{Text}}</p>
<form method="post">
    <textarea name="text" rows="5" cols="30">{{Text}}</textarea> <!-- Default textarea value -->
    <br><br>
    <input type="submit" value="Submit">
</form>
```

In this code snippet, the default value of the textarea is set to `{{Text}}`. When the page renders, `{{Text}}` will be replaced with the actual value of `Text`. If you want to show the literal `{{Text}}` as the default value, you can escape the curly braces like this: `{{'{{Text}}'}}`.
user
<!doctype html>
<html>
    <head>
        <title>Text to Speech</title>
    </head>
    <body>
        <h1>Text to Speech</h1>
        <p>{{Text}}</p>
    
        <p>The Generated defaut text below may be edited.</p>
        <form method="post">
            <textarea name="text" rows="6" cols="80">{{Text}}</textarea> <!-- Default textarea value -->
            <br><br>
            <input type="submit" value="Submit">
        </form>
        
        {% if filename %}
            <p>Text: {{ text }}</p>
            <audio controls>
                <source src="{{ filename }}" type="audio/mpeg">
            </audio>
        {% endif %}

        <audio controls id="audio-player">
            <source src="{{ filename }}" type="audio/mpeg">
          </audio>
          
          <button onclick="document.getElementById('audio-player').play()">Play</button>
          
    </body>
</html>
i want to use a dark theme
ChatGPT
To apply a dark theme to your HTML page, you can use CSS. Here's how you can modify your HTML code to include a dark theme:

```html
<!doctype html>
<html>
    <head>
        <title>Text to Speech</title>
        <style>
            body {
                background-color: #1e1e1e; /* Dark background color */
                color: #fff; /* Light text color */
                font-family: Arial, sans-serif; /* Font family */
            }

            h1 {
                color: #fff; /* Light text color for heading */
            }

            p {
                color: #aaa; /* Light text color for paragraph */
            }

            textarea {
                background-color: #2d2d2d; /* Dark background color for textarea */
                color: #fff; /* Light text color for textarea */
                border: 1px solid #aaa; /* Border color for textarea */
                padding: 5px; /* Padding for textarea */
            }

            input[type="submit"] {
                background-color: #4CAF50; /* Green submit button */
                color: white; /* Text color for submit button */
                padding: 10px 20px; /* Padding for submit button */
                border: none; /* No border */
                cursor: pointer; /* Cursor style */
            }

            input[type="submit"]:hover {
                background-color: #45a049; /* Darker green hover color */
            }

            /* Audio player styles */
            audio {
                display: block; /* Display as block element */
                margin-top: 20px; /* Top margin */
            }

            button {
                background-color: #4CAF50; /* Green button */
                color: white; /* Text color for button */
                padding: 10px 20px; /* Padding for button */
                border: none; /* No border */
                cursor: pointer; /* Cursor style */
            }

            button:hover {
                background-color: #45a049; /* Darker green hover color */
            }
        </style>
    </head>
    <body>
        <h1>Text to Speech</h1>
        <p>{{Text}}</p>
    
        <p>The Generated defaut text below may be edited.</p>
        <form method="post">
            <textarea name="text" rows="6" cols="80">{{Text}}</textarea> <!-- Default textarea value -->
            <br><br>
            <input type="submit" value="Submit">
        </form>
        
        {% if filename %}
            <p>Text: {{ text }}</p>
            <audio controls>
                <source src="{{ filename }}" type="audio/mpeg">
            </audio>
        {% endif %}

        <audio controls id="audio-player">
            <source src="{{ filename }}" type="audio/mpeg">
        </audio>
          
        <button onclick="document.getElementById('audio-player').play()">Play</button>
    </body>
</html>
```

In this CSS code:

- The `body` background color is set to a dark color (#1e1e1e).
- Text colors for headings (`h1`) and paragraphs (`p`) are set to light (#fff).
- The background color for the `textarea` is set to a darker shade (#2d2d2d), with light text color.
- The submit button (`input[type="submit"]`) has a green background color (#4CAF50) and white text color.
- The audio player and the play button have green background colors (#4CAF50).

