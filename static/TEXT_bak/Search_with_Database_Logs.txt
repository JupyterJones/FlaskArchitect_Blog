Search with Database Logs
user
import sqlite3
def search_data(search_term):
    database_name = '/home/jack/Desktop/EXP_01/dialogueEXP.db'
    conn = sqlite3.connect(database_name)
    cursor = conn.cursor()
    cnt = 0

    # Execute the SELECT query with a WHERE clause to filter rows based on the search term in the ChatGPT column
    rows = cursor.execute("SELECT ROWID,* FROM dialogue where user_ChatGPT_PAIR like ?", (search_term,))

    # Iterate over the resulting rows and print the ROWID and ChatGPT column
    for row in rows:
        print("ROW :",row[0],row[1],row[2])
        cnt += 1
        #if search_term in row[2]:# or search_term in row[2]:
            #print(row[0], row[1],"\n",row[2])

    # Close the connection
    conn.close()
search_term="SELECT"
search_data(search_term)
ChatGPT
To enhance your script and add logging, I'll integrate the Python `logging` module. This will help you track the execution of your code more effectively and debug any potential issues.

Here's the modified script with added logging:

```python
import sqlite3
import logging

def search_data(search_term):
    # Configure logging
    logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

    database_name = '/home/jack/Desktop/EXP_01/dialogueEXP.db'
    logging.info(f"Connecting to the database: {database_name}")
    conn = sqlite3.connect(database_name)
    cursor = conn.cursor()
    cnt = 0

    try:
        # Execute the SELECT query with a WHERE clause to filter rows based on the search term in the ChatGPT column
        logging.info(f"Executing SELECT query with search term: {search_term}")
        rows = cursor.execute("SELECT ROWID,* FROM dialogue where user_ChatGPT_PAIR like ?", (search_term,))

        # Iterate over the resulting rows and print the ROWID and ChatGPT column
        for row in rows:
            logging.debug(f"Found row: {row[0]}, {row[1]}, {row[2]}")
            print("ROW :",row[0],row[1],row[2])
            cnt += 1

    except sqlite3.Error as e:
        logging.error(f"Error executing query: {e}")

    finally:
        # Close the connection
        logging.info("Closing the database connection")
        conn.close()

# Example usage
search_term = "SELECT"
search_data(search_term)
```

In this version, I've added logging statements before connecting to the database, executing the query, and closing the connection. This will give you a clearer picture of what your script is doing at each step and help you troubleshoot any issues that may arise.

