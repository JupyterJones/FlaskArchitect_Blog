Salva Mudan√ßas Arquivo Texto
user
          
import os
import datetime
import glob
import random
import logging
from flask import Flask, render_template, request, redirect, url_for

app = Flask(__name__)
app.template_folder = 'templates'

log_dir = 'logs'
os.makedirs(log_dir, exist_ok=True)

# Configure logging
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    handlers=[logging.FileHandler(os.path.join(log_dir, 'app.log')),
                              logging.StreamHandler()])
logger = logging.getLogger(__name__)

def list_text_files():
    text_files = glob.glob('static/text/*.txt')
    logger.info(text_files)
    return text_files

def find_video():
    video = random.choice(glob.glob('static/videos/*.mp4'))
    logger.info(f'Random video: {video}')  # Log the selected video (for debugging purposes) (video)
    return video

@app.route('/', methods=['GET', 'POST'])
def index():
    video = find_video()
    text_files = list_text_files()
    logger.info(f"Video: {video}, Text Files: {text_files}")
    return render_template('edit_file.html', video=video, text_files=text_files)

@app.route('/edit_file', methods=['GET', 'POST'])
def edit_file():
    if request.method == 'POST':
        filename = request.form.get('filename')
        text = request.form.get('text')
        with open(f'{filename}', 'w') as file:
            file.write(text)
    text_files_dir = 'static/text/'
    text_files = []
    for filename in os.listdir(text_files_dir):
        if filename.endswith('.txt'):
            text_files.append(filename)
    fvideo = find_video()        
    return render_template('edit_file.html', text_files=text_files, video=fvideo)
def edit_and_save_text_file(filename, content):
    save_original_text_file(filename, content)
    edited_file_path = os.path.join(text_dir, filename)
    with open(edited_file_path, 'w') as file:
        file.write(content)


if __name__ == '__main__':
    logger.info("Running on port 5000")
    app.run(debug=True, host='0.0.0.0', port=5000)
------------
<!-- edit_file.html -->
<!DOCTYPE html>
<html>
  <head>
    <title>Edit a Text  edit_file.html</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}"/>
  </head>

  <body>
    <div class="wrapper">
      <div class="header">
        <h2>Edit a Text File edit_file.html</h2>
        <p>Text files located in static/text/</p>
      </div>
      <div class="columns">
        <div class="column left">
          <p>Choose a text file :</p>
          <a
            style="font-size: 25px; color: rgb(206, 225, 33); margin-bottom: 10px"
            href="{{ url_for('index') }}"
            >HOME</a>
          <form method="POST" action="/edit_file">
            <select
              id="filename-select"
              name="filename"
              onchange="loadFileContent()">
 
              {% for filename in text_files  %}
              <option value="{{ filename }}">{{ filename }}</option>
              {% endfor %}
            </select>
            <br /><br />
            <textarea
              id="file-content"
              name="text"
              rows="10"
              cols="50"
            ></textarea>
            <br /><br />
            <input type="submit" value="Save Changes" />
          </form>

          <script>
            // Fetches the file content and updates the textarea
            function loadFileContent() {
              var select = document.getElementById("filename-select");
              var textarea = document.getElementById("file-content");

              var selectedFile = select.value;
              if (selectedFile) {
                fetch(`/get_file_content/${selectedFile}`)
                  .then((response) => response.text())
                  .then((content) => {
                    textarea.value = content;
                  });
              } else {
                textarea.value = "";
              }
            }
          </script>
        </div>

        <div class="column right">
          <h2>Random Video</h2>
          <video controls>
            <source src="{{ video }}" type="video/mp4" />
            Your browser does not support the video tag.
          </video>
        </div>
      </div>
    </div>
  </body>
</html>
This lts me open an see the text but does not save the changes ?
ChatGPT
It seems like you're encountering an issue where the changes made to the text file are not being saved. Let's address that.

In your `edit_file()` function, you're correctly retrieving the filename and text from the form submission, but you're not using the correct path to save the file. You should use the absolute path to save the file. Also, you need to handle cases where the selected file doesn't exist.

Let's make the following modifications to your `edit_file()` function to ensure that the changes are saved:

```python
@app.route('/edit_file', methods=['GET', 'POST'])
def edit_file():
    if request.method == 'POST':
        filename = request.form.get('filename')
        text = request.form.get('text')

        # Ensure the selected file exists
        text_files_dir = 'static/text/'
        selected_file_path = os.path.join(text_files_dir, filename)
        if not os.path.exists(selected_file_path):
            logger.error(f"File '{filename}' does not exist.")
            return redirect(url_for('index'))

        # Save the changes to the selected file
        with open(selected_file_path, 'w') as file:
            file.write(text)
        logger.info(f"Changes saved to '{filename}'.")

    # Reload the list of text files and a random video
    text_files = [f for f in os.listdir(text_files_dir) if f.endswith('.txt')]
    video = find_video()

    return render_template('edit_file.html', text_files=text_files, video=video)
```

With these modifications, the changes made to the text file should be saved correctly. If the selected file doesn't exist, it logs an error and redirects the user back to the index page. Otherwise, it saves the changes and reloads the page with the updated file list and a random video.
user
visual code area has a "sticky' top few lines how do I get ride of that ?
ChatGPT
It sounds like you're referring to the "Sticky" behavior of the Visual Studio Code editor, where the top few lines of code remain fixed while scrolling through a long file. This feature is called "Pin Editor" or "Pin First Editor Line" and is designed to keep important context visible as you scroll through large files.

To disable this feature and make the top few lines scroll like the rest of the document, you can follow these steps:

1. Open Visual Studio Code.
2. Go to the "Settings" by either:
   - Pressing `Ctrl + ,` (Windows/Linux) or `Cmd + ,` (Mac).
   - Navigating to `File > Preferences > Settings`.
3. In the Settings panel, search for "pin editor".
4. Find the setting named "Editor: Pin First Editor Line" and uncheck the box to disable it.
5. Close the Settings panel.

After disabling this setting, the top few lines of your code should scroll along with the rest of the document. If you ever want to re-enable this behavior, you can follow the same steps and check the box for "Editor: Pin First Editor Line".
user
Linux - -it seems to only be the html files 
ChatGPT
If the "sticky" behavior is only happening with HTML files in Visual Studio Code on Linux, it might be related to the specific language extension or configuration. You can try the following steps to troubleshoot and potentially resolve the issue:

1. **Check for Extensions**: 
   Ensure that you don't have any extensions installed that might be causing this behavior. Sometimes, language-specific extensions or general UI enhancements can introduce unexpected behavior. You can disable extensions temporarily to see if the issue persists.

2. **Update Visual Studio Code**:
   Make sure you are using the latest version of Visual Studio Code. Updates often include bug fixes and improvements that may resolve issues like this.

3. **Review Settings for HTML**:
   Look for any specific settings related to HTML files in Visual Studio Code settings. You can search for "HTML" in the settings search bar and review any relevant configurations.

4. **Reset Settings to Default**:
   If you suspect that your current settings might be causing the issue, you can reset Visual Studio Code settings to their defaults. You can do this by opening the Command Palette (`Ctrl + Shift + P`) and selecting "Preferences: Reset Settings (UI)".

5. **Check System Fonts and Scaling**:
   Sometimes, issues with font rendering or system scaling settings can affect the display of text in editors. Ensure that your system fonts are correctly configured and that there are no unusual scaling settings applied.

6. **Try Another Text Editor**:
   If the issue persists and seems to be specific to Visual Studio Code, you can try opening the HTML files in another text editor to see if the behavior is consistent across editors. This can help determine if the issue is with the files themselves or with Visual Studio Code.

By following these steps, you should be able to identify and potentially resolve the "sticky" behavior with HTML files in Visual Studio Code on Linux. If the issue persists, you may also consider reaching out to the Visual Studio Code community for further assistance or reporting the issue as a bug.

