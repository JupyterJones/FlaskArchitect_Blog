Search Multiple Words Python
user
i want to search a directory of text files
static/output_txt_html_json/*.txt 
i will need to use multiple words  example:
    
ChatGPT
Certainly, Jack! I understand you want to search a directory of text files for multiple words. To achieve this, we can use Python and the modules you are familiar with, such as `os` and `glob` for file operations, and `re` for regular expressions. Let me provide you with a complete script along with detailed explanations and logging.

```python
import os
import re
import logging

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def search_text_files(directory, search_words):
    """
    Search for multiple words in text files within a directory.

    Parameters:
    - directory: The directory path to search.
    - search_words: A list of words to search for.

    Returns:
    - A list of files containing all the search words.
    """
    matching_files = []

    try:
        # Use glob to get a list of text files in the specified directory
        text_files = glob.glob(os.path.join(directory, '*.txt'))

        for file_path in text_files:
            # Read the content of each text file
            with open(file_path, 'r') as file:
                content = file.read()

            # Check if all search words are present in the file content
            if all(re.search(rf'\b{word}\b', content, re.IGNORECASE) for word in search_words):
                matching_files.append(file_path)
                logger.info(f"File '{file_path}' contains all search words.")

        return matching_files

    except Exception as e:
        logger.error(f"An error occurred: {e}")
        return []

# Example usage
if __name__ == "__main__":
    directory_path = "static/output_txt_html_json"
    search_terms = ["example", "words"]

    result = search_text_files(directory_path, search_terms)

    if result:
        logger.info("Matching files found:")
        for file_path in result:
            print(file_path)
    else:
        logger.info("No matching files found.")
```

This script defines a function `search_text_files` that takes a directory path and a list of search words. It then searches for files that contain all the specified words. The example usage at the end demonstrates how to use this function.

Feel free to run this script and let me know if you encounter any issues or if there's anything else you'd like to modify!
user
i want all the search terms to be in the file just return file name:
I will us a comma delimitation:   movie,resize,mogrify,keep aspect,terminal command
notice the double words: keep aspect, terminal command
a double word counts as one word and must be together. I guess the term shoul be search words and phrases. 
ChatGPT
Certainly, Jack! I've modified the script to accommodate search terms and phrases, treating double words as one phrase. The script will now return only the file names that contain all the search words and phrases.

```python
import os
import re
import logging
import glob

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def search_text_files(directory, search_terms):
    """
    Search for multiple words and phrases in text files within a directory.

    Parameters:
    - directory: The directory path to search.
    - search_terms: A comma-delimited string of words and phrases.

    Returns:
    - A list of file names containing all the search terms.
    """
    matching_files = []

    try:
        # Use glob to get a list of text files in the specified directory
        text_files = glob.glob(os.path.join(directory, '*.txt'))

        # Split the search terms into individual words and phrases
        search_words_phrases = [term.strip() for term in search_terms.split(',')]

        for file_path in text_files:
            # Read the content of each text file
            with open(file_path, 'r') as file:
                content = file.read()

            # Check if all search terms are present in the file content
            if all(re.search(rf'\b{re.escape(term)}\b', content, re.IGNORECASE) for term in search_words_phrases):
                matching_files.append(os.path.basename(file_path))
                logger.info(f"File '{file_path}' contains all search terms.")

        return matching_files

    except Exception as e:
        logger.error(f"An error occurred: {e}")
        return []

# Example usage
if __name__ == "__main__":
    directory_path = "static/output_txt_html_json"
    search_terms_input = "movie,resize,mogrify,keep aspect,terminal command"

    result = search_text_files(directory_path, search_terms_input)

    if result:
        logger.info("Matching files found:")
        for file_name in result:
            print(file_name)
    else:
        logger.info("No matching files found.")
```

Now, the `search_text_files` function takes a comma-delimited string of words and phrases. It treats double words as one phrase and returns only the file names that contain all the search terms and phrases. Let me know if you have any further requests or if you'd like any adjustments!
user
With your help, I have converted the sessions  in conversations.json into directory of text files. I also have a great viewer/editor. i have about 1000 files many with errors. As you know sometimes  we try several times to solve a problem. conversations.json has the Good, the Bad and the Ugly answers, I want to clean up and correct the text files. Starting with files containing words and term i will be reusing. That is the reason for this search. I will eventually want it to open my editor with a drop-down of files containing my search terms.
ChatGPT
Got it, Jack! It sounds like you want to clean up and correct the text files generated from your sessions in `conversations.json`. Let's refine the search script to find files containing your search terms and phrases. Once we identify these files, you can proceed with your editing and cleanup.

Here's an updated script for the search, with your eventual goal in mind:

```python
import os
import re
import logging
import glob

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def search_text_files(directory, search_terms):
    """
    Search for files containing specified words and phrases in text files within a directory.

    Parameters:
    - directory: The directory path to search.
    - search_terms: A comma-delimited string of words and phrases.

    Returns:
    - A list of file paths containing all the search terms.
    """
    matching_files = []

    try:
        # Use glob to get a list of text files in the specified directory
        text_files = glob.glob(os.path.join(directory, '*.txt'))

        # Split the search terms into individual words and phrases
        search_words_phrases = [term.strip() for term in search_terms.split(',')]

        for file_path in text_files:
            # Read the content of each text file
            with open(file_path, 'r') as file:
                content = file.read()

            # Check if all search terms are present in the file content
            if all(re.search(rf'\b{re.escape(term)}\b', content, re.IGNORECASE) for term in search_words_phrases):
                matching_files.append(file_path)
                logger.info(f"File '{file_path}' contains all search terms.")

        return matching_files

    except Exception as e:
        logger.error(f"An error occurred: {e}")
        return []

# Example usage
if __name__ == "__main__":
    directory_path = "path/to/your/text/files"
    search_terms_input = "word1,phrase1,word2,phrase2"  # Add your search terms here

    result = search_text_files(directory_path, search_terms_input)

    if result:
        logger.info("Matching files found:")
        for file_path in result:
            print(file_path)
    else:
        logger.info("No matching files found.")
```

Replace `"path/to/your/text/files"` with the actual path to the directory containing your text files. Adjust the `search_terms_input` variable with your specific search terms and phrases.

Once you have the list of matching files, you can proceed to open your editor with a drop-down of these files for your cleanup and correction process. If you have any further questions or need additional assistance, feel free to let me know!
user
i would like that as a flask declaration and use one html file. i want to enter the search terms in searchFiles.html then return to the same page it should list the search terms and the files. if i need to refine the search i can copy paste the terms and add or remove a term and try again
ChatGPT
Certainly, Jack! Let's create a simple Flask app with one HTML file for the search functionality. You'll be able to enter search terms in the `searchFiles.html` page and see the results on the same page. You can then refine the search by editing the terms and trying again.

First, create a new directory for your Flask app and navigate into it. Inside this directory, create the following files:

1. `app.py` (Flask app script)
2. `templates/searchFiles.html` (HTML template)

Here's the content for each file:

**app.py:**
```python
from flask import Flask, render_template, request
import os
import re
import glob

app = Flask(__name__)

# Configure logging
import logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def search_text_files(directory, search_terms):
    """
    Search for files containing specified words and phrases in text files within a directory.

    Parameters:
    - directory: The directory path to search.
    - search_terms: A comma-delimited string of words and phrases.

    Returns:
    - A list of file paths containing all the search terms.
    """
    matching_files = []

    try:
        # Use glob to get a list of text files in the specified directory
        text_files = glob.glob(os.path.join(directory, '*.txt'))

        # Split the search terms into individual words and phrases
        search_words_phrases = [term.strip() for term in search_terms.split(',')]

        for file_path in text_files:
            # Read the content of each text file
            with open(file_path, 'r') as file:
                content = file.read()

            # Check if all search terms are present in the file content
            if all(re.search(rf'\b{re.escape(term)}\b', content, re.IGNORECASE) for term in search_words_phrases):
                matching_files.append(file_path)
                logger.info(f"File '{file_path}' contains all search terms.")

        return matching_files

    except Exception as e:
        logger.error(f"An error occurred: {e}")
        return []

@app.route('/', methods=['GET', 'POST'])
def search_files():
    if request.method == 'POST':
        directory_path = "path/to/your/text/files"  # Replace with your actual path
        search_terms_input = request.form['search_terms']

        result = search_text_files(directory_path, search_terms_input)

        return render_template('searchFiles.html', search_terms=search_terms_input, files=result)

    return render_template('searchFiles.html', search_terms='', files=[])

if __name__ == '__main__':
    app.run(debug=True)
```

**templates/searchFiles.html:**
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Search Files</title>
</head>
<body>
    <h1>Search Files</h1>

    <form method="post" action="{{ url_for('search_files') }}">
        <label for="search_terms">Enter search terms (comma-delimited):</label>
        <input type="text" id="search_terms" name="search_terms" value="{{ search_terms }}">
        <button type="submit">Search</button>
    </form>

    {% if files %}
        <h2>Matching Files:</h2>
        <ul>
            {% for file_path in files %}
                <li>{{ file_path }}</li>
            {% endfor %}
        </ul>
    {% else %}
        <p>No matching files found.</p>
    {% endif %}
</body>
</html>
```

Replace `"path/to/your/text/files"` in `app.py` with the actual path to the directory containing your text files.

To run the Flask app, open a terminal, navigate to your app directory, and run `python app.py`. Access the app in your web browser at `http://127.0.0.1:5000/`.

You can enter search terms in the form, submit the form, and see the matching files on the same page. Feel free to refine your search by modifying the terms and trying again. If you have any questions or need further adjustments, let me know!
user
make a bacground color 50% transparent 
ChatGPT
Certainly, Jack! You can add a CSS style to your `searchFiles.html` to make the background color 50% transparent. Here's the modified HTML file:

**templates/searchFiles.html:**
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Search Files</title>

    <style>
        body {
            background-color: rgba(255, 255, 255, 0.5); /* 50% transparent white */
        }
    </style>
</head>
<body>
    <h1>Search Files</h1>

    <form method="post" action="{{ url_for('search_files') }}">
        <label for="search_terms">Enter search terms (comma-delimited):</label>
        <input type="text" id="search_terms" name="search_terms" value="{{ search_terms }}">
        <button type="submit">Search</button>
    </form>

    {% if files %}
        <h2>Matching Files:</h2>
        <ul>
            {% for file_path in files %}
                <li>{{ file_path }}</li>
            {% endfor %}
        </ul>
    {% else %}
        <p>No matching files found.</p>
    {% endif %}
</body>
</html>
```

In the `<style>` section, the `body` selector sets the background color to a 50% transparent white using the `rgba` notation. You can adjust the RGB values as needed to achieve the desired color.

Save the changes, and when you run your Flask app (`python app.py`), you should see the 50% transparent background color on the search page. If you have any further requests or questions, feel free to let me know!

