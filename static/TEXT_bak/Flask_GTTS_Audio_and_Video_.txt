Flask/GTTS Audio and Video.
user
I already have a Flask app using wave2lip:  I need to use flask and gtts to create "content/sample_data/input_audio.wav"   from a text entry. Then choose an image from uploads and make a "content/sample_data/input_video.mp4"  mp4 video of the image.  "/sample_data/input_video.mp4" must be the same length as "content/sample_data/input_audio.wav"   can you help ?
ChatGPT


Sure, I can help you with that. Here's an overview of the steps you can take to achieve your goal:

1. Install the required libraries: You will need to install the gtts (Google Text-to-Speech) library to generate the audio file from the text input. You can install it using the following command:

   ```
   pip install gtts
   ```

2. Create the text-to-speech function: You can create a function that takes the text input and generates the corresponding audio file using gtts. Here's an example of how you can do it:

   ```python
   from gtts import gTTS
   
   def generate_audio(text):
       tts = gTTS(text=text, lang='en')
       tts.save('content/sample_data/input_audio.wav')
   ```

   This function takes the text input as an argument and generates an audio file named "input_audio.wav" in the specified directory.

3. Get the image from uploads: You can use Flask's request object to get the uploaded image file. Here's an example of how you can do it:

   ```python
   from flask import Flask, request
   
   app = Flask(__name__)
   
   @app.route('/upload', methods=['POST'])
   def upload_file():
       file = request.files['image']
       # save the file to the uploads directory
       file.save('uploads/' + file.filename)
       return 'file uploaded successfully'
   ```

   This route function handles the POST request sent by the client with the uploaded image file. It saves the file to the specified directory.

4. Generate the video file: You can use the moviepy library to generate the video file from the image and audio files. Here's an example of how you can do it:

   ```python
   from moviepy.editor import *
   
   def generate_video():
       audio = AudioFileClip('content/sample_data/input_audio.wav')
       image = ImageClip('uploads/image.jpg')
       video = image.set_duration(audio.duration).set_audio(audio)
       video.write_videofile('content/sample_data/input_video.mp4', fps=24)
   ```

   This function uses the AudioFileClip and ImageClip classes from the moviepy library to load the audio and image files respectively. It then creates a video clip from the image and audio, with the duration set to the duration of the audio file. Finally, it saves the video file to the specified directory.

5. Call the functions: You can call the functions in the appropriate routes to generate the required files. Here's an example of how you can do it:

   ```python
   @app.route('/generate', methods=['POST'])
   def generate_files():
       # generate the audio file
       text = request.form['text']
       generate_audio(text)
       
       # generate the video file
       generate_video()
       
       return 'files generated successfully'
   ```

   This route function handles the POST request sent by the client with the text input. It calls the generate_audio and generate_video functions to generate the required files.

That's it! You should now be able to generate the audio and video files from the text input and uploaded image. Just make sure to update the file paths and directory names as per your requirements.
user
That all goes in app.py file ?
ChatGPT
Yes, you can put all the code in the `app.py` file, assuming that you are using Flask for your web application. However, it's generally a good practice to organize your code into separate modules or packages for better readability and maintainability. You can create a separate module for each functionality, such as one for generating the audio file and another for generating the video file, and then import them into your `app.py` file.

For example, you can create a `text_to_speech.py` module to define the `generate_audio` function and a `video_generator.py` module to define the `generate_video` function. Then, you can import these functions into your `app.py` file and call them as needed in the appropriate routes. This will make your code more modular and easier to manage.
user
what do you mean ,  Then, you can import these functions into your app.py file and call them as needed in the appropriate routes.
ChatGPT
When you create separate modules to define functions, you can import those functions into your main application file (`app.py` in your case) and use them in your routes as needed.

For example, if you have a `text_to_speech.py` module with the `generate_audio` function defined in it, you can import that function into your `app.py` file like this:

```python
from text_to_speech import generate_audio
```

Then, in your Flask route where you want to generate the audio file, you can call this function like this:

```python
@app.route('/generate_audio', methods=['POST'])
def generate_audio_route():
    text = request.form['text']
    generate_audio(text)
    return 'Audio file generated successfully'
```

Similarly, you can import the `generate_video` function from the `video_generator.py` module and use it in your Flask route for generating the video file.

By organizing your code in this way, you can make your code more modular and easier to maintain. It also makes it easier to reuse the functions in other parts of your application or in other applications.
user
flask app     select an mp3 from static/audio_mp3/  convert it to a wav and save it as  'content/sample_data/input_audio.wav'
ChatGPT
You can use the `pydub` library to convert an MP3 file to a WAV file in your Flask app. Here's an example code snippet that demonstrates how to do this:

```python
from flask import Flask, request
from pydub import AudioSegment
import os

app = Flask(__name__)

@app.route('/convert_mp3_to_wav', methods=['POST'])
def convert_mp3_to_wav():
    mp3_file = request.files['mp3_file']
    mp3_filename = mp3_file.filename
    mp3_path = os.path.join(app.static_folder, 'audio_mp3', mp3_filename)
    mp3_file.save(mp3_path)

    wav_filename = 'input_audio.wav'
    wav_path = os.path.join('content', 'sample_data', wav_filename)

    sound = AudioSegment.from_mp3(mp3_path)
    sound.export(wav_path, format='wav')

    return 'MP3 file converted to WAV successfully'

if __name__ == '__main__':
    app.run()
```

This code defines a Flask route called `convert_mp3_to_wav` that accepts a file upload with the name `mp3_file`. It then saves the uploaded MP3 file to the `static/audio_mp3/` directory and converts it to a WAV file using the `pydub` library. The resulting WAV file is saved to the `content/sample_data/` directory with the filename `input_audio.wav`.

Note that this code assumes that you have a directory called `audio_mp3` inside the `static` directory, and that the uploaded MP3 file will be saved to this directory. It also assumes that you have a directory called `sample_data` inside the `content` directory, and that the resulting WAV file will be saved to this directory with the filename `input_audio.wav`.

You can modify this code to suit your specific needs and integrate it into your existing Flask app as needed.
user
INFO:werkzeug:127.0.0.1 - - [24/Apr/2023 11:33:15] "GET /convert_mp3_to_wav HTTP/1.1" 404 -

ChatGPT
The error message `404 Not Found` suggests that the Flask server was unable to find the URL that you requested, which in this case is `/convert_mp3_to_wav`.

This error can occur if you have not defined a Flask route that matches the URL that you are requesting. Make sure that you have defined a Flask route that corresponds to the URL that you are trying to access.

Also, make sure that you are using the correct HTTP method (e.g. `GET` or `POST`) for your route. If you have defined a route that only accepts `POST` requests, for example, then you will get a `405 Method Not Allowed` error if you try to access it with a `GET` request.

Double-check your Flask route definition and the URL that you are requesting to make sure that they match up correctly.
user
INFO:werkzeug:127.0.0.1 - - [24/Apr/2023 11:36:22] "GET /convert_mp3_to_wav HTTP/1.1" 404 -
 dont I have to have  an html file ?
ChatGPT
Yes, you will need to create an HTML file that contains a form to upload the MP3 file and submit it to the Flask route that you have defined.

Here's an example HTML file that you can use as a starting point:

```html
<!DOCTYPE html>
<html>
  <head>
    <title>Convert MP3 to WAV</title>
  </head>
  <body>
    <h1>Convert MP3 to WAV</h1>
    <form action="{{ url_for('convert_mp3_to_wav') }}" method="POST" enctype="multipart/form-data">
      <label for="mp3_file">Select MP3 file:</label>
      <input type="file" name="mp3_file" id="mp3_file">
      <br>
      <input type="submit" value="Convert">
    </form>
  </body>
</html>
```

This HTML file defines a form that allows the user to select an MP3 file and submit it to the Flask route `convert_mp3_to_wav`. The `action` attribute of the form specifies the URL that the form should be submitted to, and the `method` attribute specifies the HTTP method to use (in this case, `POST`).

You can save this HTML file as `convert_mp3_to_wav.html` in your `templates` directory, and then modify your Flask route to render this template:

```python
from flask import Flask, request, render_template
from pydub import AudioSegment
import os

app = Flask(__name__)

@app.route('/convert_mp3_to_wav', methods=['GET', 'POST'])
def convert_mp3_to_wav():
    if request.method == 'POST':
        mp3_file = request.files['mp3_file']
        mp3_filename = mp3_file.filename
        mp3_path = os.path.join(app.static_folder, 'audio_mp3', mp3_filename)
        mp3_file.save(mp3_path)

        wav_filename = 'input_audio.wav'
        wav_path = os.path.join('content', 'sample_data', wav_filename)

        sound = AudioSegment.from_mp3(mp3_path)
        sound.export(wav_path, format='wav')

        return 'MP3 file converted to WAV successfully'
    else:
        return render_template('convert_mp3_to_wav.html')

if __name__ == '__main__':
    app.run()
```

In this code, the Flask route is now defined to handle both `GET` and `POST` requests. When a `GET` request is received, the route renders the `convert_mp3_to_wav.html` template. When a `POST` request is received (i.e. when the form is submitted), the route processes the uploaded MP3 file and converts it to a WAV file as before.

Make sure that you have a `templates` directory in your project root directory and that it contains the `convert_mp3_to_wav.html` file.
user
list the mp3s in the directory 'static/audio_mp3/' and select the required file
ChatGPT
To list the MP3 files in the `static/audio_mp3/` directory, you can use the `os` module to get a list of files in the directory and then filter the list to include only files with a `.mp3` extension. Here's an example Flask route that lists the MP3 files and allows the user to select a file:

```python
from flask import Flask, render_template, request
import os

app = Flask(__name__)

@app.route('/select_mp3', methods=['GET', 'POST'])
def select_mp3():
    mp3_dir = os.path.join(app.static_folder, 'audio_mp3')
    mp3_files = [f for f in os.listdir(mp3_dir) if f.endswith('.mp3')]

    if request.method == 'POST':
        selected_mp3 = request.form['selected_mp3']
        # Process the selected MP3 file here
        return 'Selected MP3: {}'.format(selected_mp3)
    else:
        return render_template('select_mp3.html', mp3_files=mp3_files)

if __name__ == '__main__':
    app.run()
```

This Flask route first gets the path to the `static/audio_mp3` directory using `os.path.join()` and `app.static_folder`. It then uses a list comprehension to get a list of all the MP3 files in the directory by filtering the list of files returned by `os.listdir()` to include only files with a `.mp3` extension.

The route then checks the request method. If the method is `POST`, it retrieves the selected MP3 file from the form data and processes it (you can replace this code with your own processing logic). If the method is `GET`, it renders an HTML template (`select_mp3.html`) that displays a list of the MP3 files and allows the user to select a file:

```html
<!DOCTYPE html>
<html>
  <head>
    <title>Select MP3</title>
  </head>
  <body>
    <h1>Select MP3</h1>
    <form action="{{ url_for('select_mp3') }}" method="POST">
      <label for="selected_mp3">Select an MP3 file:</label>
      <select name="selected_mp3" id="selected_mp3">
        {% for mp3_file in mp3_files %}
        <option value="{{ mp3_file }}">{{ mp3_file }}</option>
        {% endfor %}
      </select>
      <br>
      <input type="submit" value="Select">
    </form>
  </body>
</html>
```

This HTML template defines a form that displays a list of the MP3 files and allows the user to select one. The list of MP3 files is passed to the template as a variable called `mp3_files` using the `render_template()` function.

Save this HTML file as `select_mp3.html` in your `templates` directory, and make sure that the `templates` directory is in your project root directory. You can then modify the Flask route to render this template:

```python
from flask import Flask, render_template, request
import os

app = Flask(__name__)

@app.route('/select_mp3', methods=['GET', 'POST'])
def select_mp3():
    mp3_dir = os.path.join(app.static_folder, 'audio_mp3')
    mp3_files = [f for f in os.listdir(mp3_dir) if f.endswith('.mp3')]

    if request.method == 'POST':
        selected_mp3 = request.form['selected_mp3']
        # Process the selected MP3 file here
        return 'Selected MP3: {}'.format(selected_mp3)
    else:
        return render_template('select_mp3.html
user
<div class="content">
      <a href="{{ url_for('get_gallery') }}">View Images</a><br />
      <a href="{{ url_for('view_thumbs') }}">View Thumbnails</a><br />
      <a href="{{ url_for('upload_file') }}">Upload Image</a><br />
      <a href="{{ url_for('flask_info') }}">Video</a><br />
      <a href="{{ url_for('add_text') }}">Add text to chat.txt</a><br />
      <a href="{{ url_for('search_txt') }}">Search chat.txt</a><br />
      <a href="{{ url_for('blend_pil') }}">upload and blend images.</a><br />
      <a href="{{ url_for('add_border') }}">Add a border to an image.</a><br />
      <a href="{{ url_for('process_images') }}">Process Images With Mask</a><br />
      <a href="{{ url_for('text_mp3') }}">Create an mp3 from a Text Entry</a><br />
      <a href="{{ url_for('convert_mp3_to_wav') }}">convert_mp3_to_wav</a><br /> 
    </div>        
File "/mnt/HDD500/flask/FLASK/templates/index.html", line 29, in top-level template code

<a href="{{ url_for('convert_mp3_to_wav') }}">convert_mp3_to_wav</a><br />

File "/mnt/HDD500/FLASK/flask_venv/lib/python3.9/site-packages/flask/helpers.py", line 336, in url_for

return appctx.app.handle_url_build_error(error, endpoint, values)

File "/mnt/HDD500/FLASK/flask_venv/lib/python3.9/site-packages/flask/helpers.py", line 323, in url_for

rv = url_adapter.build(                                                  
ChatGPT
It seems that there is an error when trying to access the `convert_mp3_to_wav` route. The error message suggests that the `url_for` function in the index.html template is not able to generate a valid URL for this route. 

One possibility is that the route is not defined correctly in the Flask app. Make sure that the route is defined using the `@app.route` decorator and that the function associated with the route returns a valid response.

Another possibility is that there is a typo in the name of the route. Check that the name of the route in the `@app.route` decorator and the name used in the `url_for` function in the template match exactly.

Finally, make sure that the Flask app is running and accessible at the expected URL. You can try accessing other routes defined in the app to see if they are working correctly.
user
Flask  function:  Select an image from static/uploads   convert it to  "Wav2Lip/content/sample_data/input_video.mp4"  the same length as "Wav2Lip/content/sample_data/input_audio.wav"
ChatGPT
Here's an example Flask function that selects an image from `static/uploads`, converts it to a video using `ffmpeg`, and saves the resulting video as `Wav2Lip/content/sample_data/input_video.mp4`. This function assumes that `ffmpeg` is installed on the system and available in the `PATH`.

```python
import os
import subprocess
from flask import Flask, render_template, request

app = Flask(__name__)

@app.route('/convert_image_to_video', methods=['POST'])
def convert_image_to_video():
    # get the filename of the selected image
    image_file = request.form.get('image_file')
    
    # get the duration of the input audio file
    audio_duration = get_audio_duration('Wav2Lip/content/sample_data/input_audio.wav')
    
    # set the output video filename
    video_file = 'Wav2Lip/content/sample_data/input_video.mp4'
    
    # call ffmpeg to create the video from the image
    command = f"ffmpeg -loop 1 -i static/uploads/{image_file} -c:v libx264 -t {audio_duration} -pix_fmt yuv420p {video_file}"
    subprocess.call(command.split())
    
    return 'Video created successfully!'

def get_audio_duration(audio_file):
    # call ffprobe to get the duration of the audio file
    command = f"ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 {audio_file}"
    duration = subprocess.check_output(command.split())
    
    return duration.strip().decode()

if __name__ == '__main__':
    app.run()
```

This function assumes that the form used to select the image file has a field named `image_file`. You can add this form to an HTML template and submit it to the `/convert_image_to_video` route using a POST request. Note that this function does not handle any errors or exceptions that may occur during the conversion process.
user
I do not need an html file for that ?
ChatGPT
You will need a route in your Flask app that handles the logic for selecting the image and converting it to a video. However, it's up to you whether you want to create a template and HTML page for the user interface to select the image or handle it purely in the backend. 

If you choose to create a user interface for selecting the image, then you will need an HTML file that contains a form with a file input field and a submit button that sends the selected image to the Flask route. The Flask route will then handle the file upload and conversion logic.

If you choose to handle it purely in the backend, then you can skip the HTML file and just provide a Flask route that accepts the image file as an argument and performs the conversion logic.
user
how do I call that function from my index page
ChatGPT
You can create a link or button on your index page that directs the user to the route that handles the image selection and conversion logic. Here's an example of how you can create a link to the route:

```
<a href="{{ url_for('convert_image_to_video') }}">Convert Image to Video</a>
```

You can place this code in your HTML file where you want the link to appear. Make sure to replace `'convert_image_to_video'` with the name of the route that handles the image selection and conversion logic in your Flask app.
user
Method Not Allowed

The method is not allowed for the requested URL.
ChatGPT
The "Method Not Allowed" error usually occurs when you're trying to access a route using an HTTP method that the route doesn't support. 

For example, if you have a Flask route that only supports the POST method and you try to access it using the GET method, you'll get a "Method Not Allowed" error. 

To fix the error, make sure that you're using the correct HTTP method for the route you're accessing. Check your Flask app's route definition to see which HTTP methods it supports. If the issue persists, you may need to share the code for the relevant Flask route and the code for the link/button that's triggering the error so that I can help you better.
user
<a href="{{ url_for('convert_image_to_video') }}">Convert Image to Video</a>
>>> Method Not Allowed

The method is not allowed for the requested URL.
ChatGPT
The "Method Not Allowed" error can occur if the Flask route you're trying to access doesn't support the HTTP method that you're using to access it. 

In the case of the link you shared (`<a href="{{ url_for('convert_image_to_video') }}">Convert Image to Video</a>`), it's using the `GET` HTTP method to access the Flask route that handles image conversion to video. 

If your Flask route only accepts the `POST` method, you can either change the method used in the link to `POST`:

```
<form method="POST" action="{{ url_for('convert_image_to_video') }}">
  <button type="submit">Convert Image to Video</button>
</form>
```

Or you can modify the Flask route to accept the `GET` method as well:

```
@app.route('/convert_image_to_video', methods=['GET', 'POST'])
def convert_image_to_video():
    # Route logic goes here
```

You can replace the route method with the one that you're using in your Flask app.
user
http://localhost:5000/convert_image_to_video  it did not let me select the image
ChatGPT
If you're trying to upload an image file to your Flask app, you'll need to use an HTML form that allows file uploads. Here's an example:

```html
<form method="POST" action="{{ url_for('convert_image_to_video') }}" enctype="multipart/form-data">
  <input type="file" name="image">
  <button type="submit">Convert Image to Video</button>
</form>
```

Note the `enctype="multipart/form-data"` attribute in the `form` tag, which allows the form to handle file uploads. 

Then, in your Flask route, you can access the uploaded file using the `request.files` object:

```python
@app.route('/convert_image_to_video', methods=['POST'])
def convert_image_to_video():
    image_file = request.files['image']
    # Process the image file
    return 'Image converted to video'
```

This code assumes that the uploaded file is named "image" in the HTML form. You can adjust the form field name and the `request.files` argument accordingly.
user
I want to select a file from uploads
ChatGPT
To select a file from the `uploads` folder, you can use the `file` input type in a form in your HTML file. Here's an example:

```html
<form action="{{ url_for('convert_image_to_video') }}" method="POST" enctype="multipart/form-data">
    <input type="file" name="image_file">
    <input type="submit" value="Convert Image to Video">
</form>
```

In your `convert_image_to_video` function, you can access the selected file using the `request.files` attribute. Here's an example:

```python
@app.route('/convert_image_to_video', methods=['GET', 'POST'])
def convert_image_to_video():
    if request.method == 'POST':
        # Get the selected file from the form
        image_file = request.files['image_file']
        # Do something with the file, such as save it or convert it
        # ...
    return render_template('index.html')
```
user
does this go on my index page
ChatGPT
No, you don't need to add this on your index page. This code should be added on a separate page that is responsible for handling the file upload. 

You can create a new route for uploading files and add an HTML form that allows the user to select an image file and submit it. When the form is submitted, the file will be uploaded to the server and the `convert_image_to_video()` function can be called to convert the image to video.

Here's an example of how you can create a file upload route in Flask:

```python
from flask import Flask, request, render_template

app = Flask(__name__)

@app.route('/upload', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        # check if the post request has the file part
        if 'file' not in request.files:
            flash('No file part')
            return redirect(request.url)
        file = request.files['file']
        # if user does not select file, browser also
        # submit an empty part without filename
        if file.filename == '':
            flash('No selected file')
            return redirect(request.url)
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
            # call the function to convert image to video
            convert_image_to_video()
            return redirect(url_for('index'))
    return render_template('upload.html')
```

This code defines a route `/upload` that supports GET and POST requests. When the user visits this URL, they will see an HTML form that allows them to select a file to upload. When the form is submitted, the `upload_file()` function is called.

In this function, we first check if the request method is POST and if the request contains a file. Then, we check if the filename is valid (you can define the `allowed_file()` function to validate the file extension).

If the file is valid, we save it to the server using the `save()` method and call the `convert_image_to_video()` function to convert the image to video. Finally, we redirect the user back to the index page.

You will also need to create an HTML form to allow the user to select an image file to upload. Here's an example:

```html
<form action="{{ url_for('upload_file') }}" method="post" enctype="multipart/form-data">
  <input type="file" name="file">
  <input type="submit" value="Upload">
</form>
```

This form allows the user to select a file and submit it to the server using a POST request. When the user clicks the "Upload" button, the form data is sent to the `/upload` URL.
user
<form action="{{ url_for('convert_image_to_video') }}" method="POST" enctype="multipart/form-data">
    <input type="file" name="image_file">
    <input type="submit" value="Convert Image to Video">
</form>   can that go on my index    The upload directory has images

ChatGPT
Yes, you can include that HTML form in your index page to allow users to select an image file from the upload directory and submit it to the `convert_image_to_video` route to generate a video. Just make sure that you have the appropriate route set up in your Flask app to handle the form submission and process the selected file.
user
my upload function already exists .. I just want to select a file from the "static/upload" directory
ChatGPT
I see. In that case, you can modify the form to include a dropdown list that displays the filenames of the images in the `static/uploads` directory. Here's an example:

```
<form action="{{ url_for('convert_image_to_video') }}" method="POST">
  <select name="image_filename">
    {% for filename in image_filenames %}
      <option value="{{ filename }}">{{ filename }}</option>
    {% endfor %}
  </select>
  <input type="submit" value="Convert Image to Video">
</form>
```

In your Flask view function for the `convert_image_to_video` route, you can get the selected filename from the `request.form` dictionary, and use it to load the selected image file. Here's an example:

```
from flask import Flask, render_template, request
import os

app = Flask(__name__)
UPLOAD_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static/uploads')

@app.route('/')
def index():
  image_filenames = os.listdir(UPLOAD_FOLDER)
  return render_template('index.html', image_filenames=image_filenames)

@app.route('/convert_image_to_video', methods=['POST'])
def convert_image_to_video():
  image_filename = request.form['image_filename']
  image_path = os.path.join(UPLOAD_FOLDER, image_filename)

  # Load the selected image and convert it to video
  # (insert your code here)

  return 'Video generated from image: {}'.format(image_filename)

if __name__ == '__main__':
  app.run()
```

This example assumes that you have an `uploads` directory inside the `static` directory, and that your image files are stored directly inside that directory (not in any subdirectories).
user
Please simplify .. I have an index.html I have the upload function  I just want convert_image_to_video  to allow me to chose an image from uploads 
ChatGPT
Sure! You can modify the `convert_image_to_video` function to load a random image from the `static/uploads` directory instead of prompting the user to upload an image. Here's how you can do it:

1. Import the `os` and `random` modules at the beginning of your Flask app file.

   ```
   import os
   import random
   ```

2. Modify the `convert_image_to_video` function to load a random image from the `static/uploads` directory:

   ```
   @app.route('/convert_image_to_video', methods=['GET', 'POST'])
   def convert_image_to_video():
       if request.method == 'POST':
           # Load a random image from the static/uploads directory
           upload_dir = os.path.join(app.static_folder, 'uploads')
           image_filename = random.choice(os.listdir(upload_dir))
           image_path = os.path.join(upload_dir, image_filename)

           # Convert the image to a video and save it in the Wav2Lip directory
           video_path = os.path.join(app.root_path, 'Wav2Lip/content/sample_data/input_video.mp4')
           audio_path = os.path.join(app.root_path, 'Wav2Lip/content/sample_data/input_audio.wav')
           convert_image_to_video(image_path, audio_path, video_path)

           return f'Video created: {video_path}'

       # If method is GET, show the upload form
       return render_template('convert_image_to_video.html')
   ```

3. Modify your `index.html` file to add a link to the `convert_image_to_video` page:

   ```
   <a href="{{ url_for('convert_image_to_video') }}">Convert Image to Video</a><br />
   ```

4. Create a new HTML file called `convert_image_to_video.html` with the following content:

   ```
   <form action="{{ url_for('convert_image_to_video') }}" method="POST">
       <input type="submit" value="Convert Random Image to Video">
   </form>
   ```

With these changes, you should be able to click on the "Convert Image to Video" link on your `index.html` page, which will take you to the `convert_image_to_video` page with a "Convert Random Image to Video" button. When you click on this button, a random image from the `static/uploads` directory will be loaded and converted to a video using the `convert_image_to_video` function.

