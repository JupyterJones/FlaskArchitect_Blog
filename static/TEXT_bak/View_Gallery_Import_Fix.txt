View Gallery Import Fix
user
#!/home/jack/Desktop/FlaskAppArchitect_Flask_App_Creator/env/bin/python
# view_gallery.py
from flask import  render_template, request, redirect, url_for,Blueprint
import os
import logging
from logging.handlers import RotatingFileHandler


view_gallery_bp = Blueprint('view_gallery', __name__)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# Create a formatter for the log messages
formatter = logging.Formatter(
    '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]')

# Create a file handler to write log messages to a file
file_handler = RotatingFileHandler(
    'Logs/View_gallery.log', maxBytes=10000, backupCount=1)
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(formatter)

# Add the file handler to the logger
logger.addHandler(file_handler)
# Function to get a list of subdirectories in static/images/
def get_image_directories():
    image_dir = 'static/images'
    return [d for d in os.listdir(image_dir) if os.path.isdir(os.path.join(image_dir, d))]

@view_gallery_bp.route('/gallery_index')
def gallery_index():
    directories = get_image_directories()
    logger.info('Gallery index page accessed')
    logger.debug('Directories: %s', directories)
    return render_template('gallery_index.html', directories=directories)

@view_gallery_bp.route('/gallery', methods=['POST', 'GET'])
def generate_gallery():
    selected_directory = request.form['directory']
    logger.info('Generate gallery page accessed')
    logger.debug('Selected directory: %s', selected_directory)
    return redirect(url_for('view_gallery.image_gallery', directory_name=selected_directory))


@view_gallery_bp.route('/gallery/<directory_name>')
def image_gallery(directory_name):
    logger.info('Image gallery page accessed') 
    logger.debug('Directory name: %s', directory_name) 
    selected_directory = os.path.join('static/images', directory_name)

    # Check if the selected directory exists
    if not os.path.exists(selected_directory):
        # Handle the case where the directory does not exist
        return "Directory not found", 404

    image_files = [f for f in os.listdir(selected_directory) if f.lower().endswith(('.jpg', '.jpeg', '.png', '.gif'))]
    logger.debug('Image files: %s', image_files)
    image_urls = [os.path.join('/static/images', directory_name, image) for image in image_files]
    logger.debug('Image URLs: %s', image_urls)
    return render_template('view_gallery.html', image_urls=image_urls)

# app.py
from flask import Flask, render_template, request, redirect, url_for
from flask import send_from_directory, Response, flash, request, session, jsonify, abort
import random
import glob
from PIL import Image
import os 
import shutil
import sqlite3
import base64
import datetime
import time
from view_gallery import view_gallery_b
app = Flask(__name__)
# create  logging funtction
app.register_blueprint(view_gallery_b)
_----------
python app.py
Traceback (most recent call last):
  File "/home/jack/Desktop/PROMPTS/app.py", line 13, in <module>
    import view_gallery.view_gallery_b
ModuleNotFoundError: No module named 'view_gallery.view_gallery_b'; 'view_gallery' is not a package



ChatGPT
It looks like you're encountering an issue with importing the `view_gallery` module in your Flask application. The error message indicates that Python cannot find the module named `view_gallery.view_gallery_b`. Let's address this.

It seems there's a typo in your import statement. You've defined the Blueprint as `view_gallery_bp`, but you're trying to import it as `view_gallery_b`. We need to correct this inconsistency.

Here's the corrected import statement:

```python
from view_gallery import view_gallery_bp
```

Additionally, ensure that the file where you define the `view_gallery_bp` Blueprint is in the correct location and is named `view_gallery.py`. This file should be in the same directory as your `app.py` file.

Once you make these changes, your import statement should work properly, and the Blueprint should be registered with your Flask application without any issues. If you have any further questions or encounter any more problems, feel free to ask!

