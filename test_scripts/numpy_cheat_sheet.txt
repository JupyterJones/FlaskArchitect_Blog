
3D array
c = np.array([[(1.5, 2, 3), (4, 5, 6)], [(3, 2, 1), (4, 5, 6)]])
[[[1.5 2.  3. ]
  [4.  5.  6. ]]

 [[3.  2.  1. ]
  [4.  5.  6. ]]]

Array of zeros
d = np.zeros((3, 4))
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]

Array of ones
e = np.ones((2, 3, 4), dtype=np.int16)
[[[1 1 1 1]
  [1 1 1 1]
  [1 1 1 1]]

 [[1 1 1 1]
  [1 1 1 1]
  [1 1 1 1]]]

Array of evenly spaced values
f = np.arange(10, 25, 5)
[10 15 20]

Array of evenly spaced values (number of samples)
g = np.linspace(0, 2, 9)
[0.   0.25 0.5  0.75 1.   1.25 1.5  1.75 2.  ]

Constant array
h = np.full((2, 2), 7)
[[7 7]
 [7 7]]

2x2 Identity matrix
i = np.eye(2)
[[1. 0.]
 [0. 1.]]

Array with random values
j = np.random.random((2, 2))
[[0.30829509 0.25496495]
 [0.6867389  0.8070623 ]]

Empty array
k = np.empty((3, 2))
[[0.00000000e+000 0.00000000e+000]
 [6.91146121e-310 4.67571867e-310]
 [0.00000000e+000 0.00000000e+000]]

Array saved to disk: my_array.npy

Loaded array from disk
[1 2 3]

Arrays saved to compressed format: array.npz

Loaded arrays from compressed format
[1 2 3]
[10 15 20]

Array saved to text file: myarray.txt

Loaded array from text file
[1. 2. 3.]

Inspecting arrays
Shape of a: (3,)
Length of a: 3
Number of dimensions of b: 1
Number of elements in e: 24
Data type of b: int64
Name of data type of b: int64
Convert b to int: [10 15 20]

Data types
np.int64: <class 'numpy.int64'>
np.float32: <class 'numpy.float32'>
np.complex: <class 'numpy.complex128'>
np.bool: <class 'numpy.bool_'>
np.object: <class 'numpy.object_'>
np.string_: <class 'numpy.bytes_'>
np.unicode_: <class 'numpy.str_'>

Array mathematics
a - b
[[0.5 0.  0. ]
 [0.  0.  0. ]]
np.subtract(a, b)
[[0.5 0.  0. ]
 [0.  0.  0. ]]
b + a
[[ 2.5  4.   6. ]
 [ 8.  10.  12. ]]
np.add(b, a)
[[ 2.5  4.   6. ]
 [ 8.  10.  12. ]]
a / b
[[1.5 1.  1. ]
 [1.  1.  1. ]]
np.divide(a, b)
[[1.5 1.  1. ]
 [1.  1.  1. ]]
a * b
[[ 1.5  4.   9. ]
 [16.  25.  36. ]]
np.multiply(a, b)
[[ 1.5  4.   9. ]
 [16.  25.  36. ]]
np.exp(b)
[[  2.71828183   7.3890561   20.08553692]
 [ 54.59815003 148.4131591  403.42879349]]
np.sqrt(b)
[[1.         1.41421356 1.73205081]
 [2.         2.23606798 2.44948974]]
np.sin(a)
[[ 0.99749499  0.90929743  0.14112001]
 [-0.7568025  -0.95892427 -0.2794155 ]]
np.cos(b)
[[ 0.54030231 -0.41614684 -0.9899925 ]
 [-0.65364362  0.28366219  0.96017029]]
np.log(a)
[[0.40546511 0.69314718 1.09861229]
 [1.38629436 1.60943791 1.79175947]]
e.dot(f)
[[19 22]
 [43 50]]

Comparison
a == b
[[False  True  True]
 [ True  True  True]]
a < 2
[[ True False False]
 [False False False]]
np.array_equal(a, b)
False

Copying arrays
View of array a
[[1.5 2.  3. ]
 [4.  5.  6. ]]
Copy of array a
[[1.5 2.  3. ]
 [4.  5.  6. ]]
Deep copy of array a
[[1.5 2.  3. ]
 [4.  5.  6. ]]

Sorting arrays
Original array a
[[3 2 1]
 [6 5 4]]
Sorted array a
[[1 2 3]
 [4 5 6]]
Sorted array c along axis 0
[[[1.5 2.  1. ]
  [4.  5.  6. ]]

 [[3.  2.  3. ]
  [4.  5.  6. ]]]

Subsetting, slicing, indexing
a[2]
3
b[1,2]
6
a[0:2]
[1 2]
b[0:2,1]
[2 5]
b[:1]
[[1 2 3]]
c[1,...]
[[3. 2. 3.]
 [4. 5. 6.]]
a[::-1]
[3 2 1]

Boolean indexing
a[a < 2]
[1]

Fancy indexing
b[[1,0,1,0],[0,1,2,0]]
[4 2 6 1]
b[[1,0,1,0]][:,[0,1,2,0]]
[[4 5 6 4]
 [1 2 3 1]
 [4 5 6 4]
 [1 2 3 1]]

Combining arrays
Concatenate arrays a and d along axis 0
[[ 1  2  3]
 [ 4  5  6]
 [ 7  8  9]
 [10 11 12]]
Concatenate arrays a and d along axis 1
[[ 1  2  3  7  8  9]
 [ 4  5  6 10 11 12]]
Stack arrays vertically (row-wise)
[[ 1  2  3]
 [ 4  5  6]
 [ 7  8  9]
 [10 11 12]]
Stack arrays horizontally (column-wise)
[[ 1  2  3  7  8  9]
 [ 4  5  6 10 11 12]]
Column stack arrays
[[ 1  2  3  7  8  9]
 [ 4  5  6 10 11 12]]

Splitting arrays
Split array a into 3 parts
[array([1, 2]), array([3, 4]), array([5, 6])]
Split array c into 2 parts vertically
[array([[1.5, 2. , 3. ],
       [4. , 5. , 6. ]]), array([[3., 2., 1.],
       [4., 5., 6.]])]

3D array
c = np.array([[(1.5, 2, 3), (4, 5, 6)], [(3, 2, 1), (4, 5, 6)]])
[[[1.5 2.  3. ]
  [4.  5.  6. ]]

 [[3.  2.  1. ]
  [4.  5.  6. ]]]

Array of zeros
d = np.zeros((3, 4))
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]

Array of ones
e = np.ones((2, 3), dtype=np.int16)
[[1 1 1]
 [1 1 1]]

Array of evenly spaced values
f = np.arange(10, 25, 5)
[10 15 20]

Array of evenly spaced values (number of samples)
g = np.linspace(0, 2, 9)
[0.   0.25 0.5  0.75 1.   1.25 1.5  1.75 2.  ]

Constant array
h = np.full((2, 2), 7)
[[7 7]
 [7 7]]

2x2 identity matrix
i = np.eye(2)
[[1. 0.]
 [0. 1.]]

Array with random values
j = np.random.random((2, 2))
[[0.9745997  0.79162747]
 [0.14370824 0.62329863]]

Empty array
k = np.empty((3, 2))
[[1.5 2. ]
 [3.  4. ]
 [5.  6. ]]

Loaded array from disk
[1 2 3]

Loaded text array from disk
[1. 2. 3.]

Inspecting arrays
a.shape: (3,)
len(a): 3
b.ndim: 1
e.size: 6
b.dtype: int64
b.dtype.name: int64
b.astype(int): [10 15 20]

Data types
np.int64: <class 'numpy.int64'>
np.float32: <class 'numpy.float32'>
complex: <class 'complex'>
np.complex128: <class 'numpy.complex128'>
bool: <class 'bool'>
np.bool_: <class 'numpy.bool_'>
object: <class 'object'>
np.bytes_: <class 'numpy.bytes_'>
np.str_: <class 'numpy.str_'>

Array Mathematics
Subtraction
g = a - b
[[0.5 0.  0. ]
 [0.  0.  0. ]]
np.subtract(a, b)
[[0.5 0.  0. ]
 [0.  0.  0. ]]
Addition
b + a
[[ 2.5  4.   6. ]
 [ 8.  10.  12. ]]
np.add(b, a)
[[ 2.5  4.   6. ]
 [ 8.  10.  12. ]]
Division
a / b
[[1.5 1.  1. ]
 [1.  1.  1. ]]
np.divide(a, b)
[[1.5 1.  1. ]
 [1.  1.  1. ]]
Multiplication
a * b
[[ 1.5  4.   9. ]
 [16.  25.  36. ]]
np.multiply(a, b)
[[ 1.5  4.   9. ]
 [16.  25.  36. ]]
Exponentiation
np.exp(b)
[[  2.71828183   7.3890561   20.08553692]
 [ 54.59815003 148.4131591  403.42879349]]
Square root
np.sqrt(b)
[[1.         1.41421356 1.73205081]
 [2.         2.23606798 2.44948974]]
Sines
np.sin(a)
[[ 0.99749499  0.90929743  0.14112001]
 [-0.7568025  -0.95892427 -0.2794155 ]]
Cosines
np.cos(b)
[[ 0.54030231 -0.41614684 -0.9899925 ]
 [-0.65364362  0.28366219  0.96017029]]
Natural logarithm
np.log(a)
[[0.40546511 0.69314718 1.09861229]
 [1.38629436 1.60943791 1.79175947]]
Dot product
e.dot(f)
[[14 14]
 [14 14]]

Comparison
a == b
[[False  True  True]
 [ True  True  True]]
a < 2
[[ True False False]
 [False False False]]
np.array_equal(a, b)
False

Copying arrays
a.view()
[[1.5 2.  3. ]
 [4.  5.  6. ]]
np.copy(a)
[[1.5 2.  3. ]
 [4.  5.  6. ]]
a.copy()
[[1.5 2.  3. ]
 [4.  5.  6. ]]

Sorting arrays
a.sort()
[[1.5 2.  3. ]
 [4.  5.  6. ]]
c.sort(axis=0)
[[[1.5 2.  1. ]
  [4.  5.  6. ]]

 [[3.  2.  3. ]
  [4.  5.  6. ]]]

Array a
a = np.array([1, 2, 3])
[1 2 3]

3D array
c = np.array([[(1.5, 2, 3), (4, 5, 6)], [(3, 2, 1), (4, 5, 6)]])
[[[1.5 2.  3. ]
  [4.  5.  6. ]]

 [[3.  2.  1. ]
  [4.  5.  6. ]]]

Array of zeros
d = np.zeros((3, 4))
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]

Array of ones
e = np.ones((2, 3), dtype=np.int16)
[[1 1 1]
 [1 1 1]]

Array of evenly spaced values
f = np.arange(10, 25, 5)
[10 15 20]

Array of evenly spaced values (number of samples)
g = np.linspace(0, 2, 9)
[0.   0.25 0.5  0.75 1.   1.25 1.5  1.75 2.  ]

Constant array
h = np.full((2, 2), 7)
[[7 7]
 [7 7]]

2x2 identity matrix
i = np.eye(2)
[[1. 0.]
 [0. 1.]]

Array with random values
j = np.random.random((2, 2))
[[0.95278452 0.17200003]
 [0.64675565 0.8320539 ]]

Empty array
k = np.empty((3, 2))
[[1.5 2. ]
 [3.  4. ]
 [5.  6. ]]

Loaded array from disk
[1 2 3]

Loaded text array from disk
[1. 2. 3.]

Inspecting arrays
a.shape: (3,)
len(a): 3
b.ndim: 1
e.size: 6
b.dtype: int64
b.dtype.name: int64
b.astype(int): [10 15 20]

Data types
np.int64: <class 'numpy.int64'>
np.float32: <class 'numpy.float32'>
complex: <class 'complex'>
np.complex128: <class 'numpy.complex128'>
bool: <class 'bool'>
np.bool_: <class 'numpy.bool_'>
object: <class 'object'>
np.bytes_: <class 'numpy.bytes_'>
np.str_: <class 'numpy.str_'>

Array Mathematics
Subtraction
g = a - b
[[0.5 0.  0. ]
 [0.  0.  0. ]]
np.subtract(a, b)
[[0.5 0.  0. ]
 [0.  0.  0. ]]
Addition
b + a
[[ 2.5  4.   6. ]
 [ 8.  10.  12. ]]
np.add(b, a)
[[ 2.5  4.   6. ]
 [ 8.  10.  12. ]]
Division
a / b
[[1.5 1.  1. ]
 [1.  1.  1. ]]
np.divide(a, b)
[[1.5 1.  1. ]
 [1.  1.  1. ]]
Multiplication
a * b
[[ 1.5  4.   9. ]
 [16.  25.  36. ]]
np.multiply(a, b)
[[ 1.5  4.   9. ]
 [16.  25.  36. ]]
Exponentiation
np.exp(b)
[[  2.71828183   7.3890561   20.08553692]
 [ 54.59815003 148.4131591  403.42879349]]
Square root
np.sqrt(b)
[[1.         1.41421356 1.73205081]
 [2.         2.23606798 2.44948974]]
Sines
np.sin(a)
[[ 0.99749499  0.90929743  0.14112001]
 [-0.7568025  -0.95892427 -0.2794155 ]]
Cosines
np.cos(b)
[[ 0.54030231 -0.41614684 -0.9899925 ]
 [-0.65364362  0.28366219  0.96017029]]
Natural logarithm
np.log(a)
[[0.40546511 0.69314718 1.09861229]
 [1.38629436 1.60943791 1.79175947]]
Dot product
e.dot(f)
[[14 14]
 [14 14]]

Comparison
a == b
[[False  True  True]
 [ True  True  True]]
a < 2
[[ True False False]
 [False False False]]
np.array_equal(a, b)
False

Copying arrays
a.view()
[[1.5 2.  3. ]
 [4.  5.  6. ]]
np.copy(a)
[[1.5 2.  3. ]
 [4.  5.  6. ]]
a.copy()
[[1.5 2.  3. ]
 [4.  5.  6. ]]

Sorting arrays
a.sort()
[[1.5 2.  3. ]
 [4.  5.  6. ]]
c.sort(axis=0)
[[[1.5 2.  1. ]
  [4.  5.  6. ]]

 [[3.  2.  3. ]
  [4.  5.  6. ]]]

Array a
a = np.array([1, 2, 3])
[1 2 3]

Subsetting, slicing, indexing
a[2]
3
b[1,2]
6
a[0:2]
[1 2]
b[0:2,1]
[2 5]
b[:1]
[[1 2 3]]
c[1,...]
[[3. 2. 3.]
 [4. 5. 6.]]
a[::-1]
[3 2 1]
Boolean Indexing
a[a < 2]
[1]
Fancy Indexing
b[[1,0,1, 0],[0,1, 2, 0]]
[4 2 6 1]
b[[1,0,1, 0]][:,[0,1,2,0]]
[[4 5 6 4]
 [1 2 3 1]
 [4 5 6 4]
 [1 2 3 1]]

Array manipulation
Transposing array
np.transpose(b)
[[1 4]
 [2 5]
 [3 6]]
i.T
[[1 2 3]
 [4 5 6]]
Changing array shape
b.ravel()
[1 2 3 4 5 6]
g.reshape(3, -2)
[[0.   0.25 0.5 ]
 [0.75 1.   1.25]
 [1.5  1.75 2.  ]]
Adding/Removing Elements
h.resize((2,6))
[[1 2 3 4 5 6]
 [0 0 0 0 0 0]]
np.append(h,g)
[1.   2.   3.   4.   5.   6.   0.   0.   0.   0.   0.   0.   0.   0.25
 0.5  0.75 1.   1.25 1.5  1.75 2.  ]
np.insert(a, 1, 5)
[1 5 2 3]
np.delete(a, [1])
[1 3]
Shape of a: (3,)
Shape of d: (2, 3)
Combining arrays
np.concatenate((a, d), axis=0)
[[1 2 3]
 [4 5 6]
 [7 8 9]]
np.vstack((a, b))
[[1 2 3]
 [1 2 3]
 [4 5 6]]
np.r_[e, f]
[[1 1]
 [1 1]
 [7 7]
 [7 7]]
Shape of a: (3,)
Shape of d: (2, 3)
Concatenated array:
[[1 2 3]
 [4 5 6]
 [7 8 9]]
Shape of concatenated array: (3, 3)

Grayscale Image
gray_img = np.zeros((256, 256), dtype=np.uint8)
[[0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]

Color Image
color_img = np.zeros((256, 256, 3), dtype=np.uint8)
[[[0 0 0]
  [0 0 0]
  [0 0 0]
  ...
  [0 0 0]
  [0 0 0]
  [0 0 0]]

 [[0 0 0]
  [0 0 0]
  [0 0 0]
  ...
  [0 0 0]
  [0 0 0]
  [0 0 0]]

 [[0 0 0]
  [0 0 0]
  [0 0 0]
  ...
  [0 0 0]
  [0 0 0]
  [0 0 0]]

 ...

 [[0 0 0]
  [0 0 0]
  [0 0 0]
  ...
  [0 0 0]
  [0 0 0]
  [0 0 0]]

 [[0 0 0]
  [0 0 0]
  [0 0 0]
  ...
  [0 0 0]
  [0 0 0]
  [0 0 0]]

 [[0 0 0]
  [0 0 0]
  [0 0 0]
  ...
  [0 0 0]
  [0 0 0]
  [0 0 0]]]

Read Image using OpenCV (cv2)
opencv_img = cv2.imread("00004.jpg")
[[[190 219 228]
  [190 219 228]
  [190 219 228]
  ...
  [  1  10  24]
  [  1  10  23]
  [  1  10  23]]

 [[202 229 239]
  [203 230 240]
  [202 229 239]
  ...
  [  1  10  24]
  [  1  10  23]
  [  1  10  23]]

 [[212 234 246]
  [214 236 248]
  [215 237 249]
  ...
  [  3  10  25]
  [  2   9  24]
  [  2   9  24]]

 ...

 [[112  52 140]
  [111  51 139]
  [113  53 141]
  ...
  [  3   9  20]
  [  0   0  10]
  [  0   0   8]]

 [[114  56 145]
  [116  58 147]
  [121  60 150]
  ...
  [ 23  39  52]
  [  8  24  37]
  [  0  18  29]]

 [[121  63 152]
  [121  63 152]
  [120  59 149]
  ...
  [ 47  68  83]
  [ 38  62  74]
  [ 30  56  68]]]

Convert Image to Grayscale using OpenCV
gray_opencv_img = cv2.cvtColor(opencv_img, cv2.COLOR_BGR2GRAY)
[[218 218 218 ...  13  13  13]
 [229 230 229 ...  13  13  13]
 [235 237 238 ...  14  13  13]
 ...
 [ 85  84  86 ...  12   3   2]
 [ 89  91  94 ...  41  26  19]
 [ 96  96  93 ...  70  63  57]]

Convert Image Array to PIL Image
pil_img = Image.fromarray(opencv_img)
<PIL.Image.Image image mode=RGB size=512x768 at 0x7F3A92577CA0>

Convert PIL Image to Numpy Array
numpy_img = np.array(pil_img)
[[[190 219 228]
  [190 219 228]
  [190 219 228]
  ...
  [  1  10  24]
  [  1  10  23]
  [  1  10  23]]

 [[202 229 239]
  [203 230 240]
  [202 229 239]
  ...
  [  1  10  24]
  [  1  10  23]
  [  1  10  23]]

 [[212 234 246]
  [214 236 248]
  [215 237 249]
  ...
  [  3  10  25]
  [  2   9  24]
  [  2   9  24]]

 ...

 [[112  52 140]
  [111  51 139]
  [113  53 141]
  ...
  [  3   9  20]
  [  0   0  10]
  [  0   0   8]]

 [[114  56 145]
  [116  58 147]
  [121  60 150]
  ...
  [ 23  39  52]
  [  8  24  37]
  [  0  18  29]]

 [[121  63 152]
  [121  63 152]
  [120  59 149]
  ...
  [ 47  68  83]
  [ 38  62  74]
  [ 30  56  68]]]

Save Image using OpenCV: image.jpg

Load Image from BytesIO using PIL
loaded_pil_img = Image.open(bytes_img)
loaded_numpy_img = np.array(loaded_pil_img)

Resize Image using OpenCV
resized_img = cv2.resize(opencv_img, (512, 512))
[[[193 222 231]
  [193 222 231]
  [193 222 231]
  ...
  [  1  10  24]
  [  1  10  23]
  [  1  10  23]]

 [[210 233 244]
  [211 235 246]
  [212 235 247]
  ...
  [  3  10  25]
  [  2   9  24]
  [  2   9  24]]

 [[222 246 251]
  [221 244 249]
  [216 239 246]
  ...
  [  6  12  27]
  [  5  11  26]
  [  5  11  26]]

 ...

 [[123  63 151]
  [116  56 144]
  [109  49 137]
  ...
  [  0   0   8]
  [  4   0   7]
  [  7   0   9]]

 [[113  53 141]
  [112  53 141]
  [115  55 143]
  ...
  [  8  17  28]
  [  2   6  17]
  [  0   5  13]]

 [[119  61 150]
  [120  62 151]
  [120  59 149]
  ...
  [ 41  61  75]
  [ 31  53  65]
  [ 23  47  58]]]
